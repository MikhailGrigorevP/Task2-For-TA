Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TEXT

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements_group -> BEGIN statements END
Rule 3     statements_group -> inner_statement
Rule 4     inner_statement -> declaration
Rule 5     inner_statement -> assignment
Rule 6     inner_statement -> while
Rule 7     inner_statement -> if
Rule 8     inner_statement -> command
Rule 9     inner_statement -> function
Rule 10    inner_statement -> call
Rule 11    inner_statement -> RETURN expression
Rule 12    inner_statement -> empty
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> declaration NEWLINE
Rule 16    statement -> comment NEWLINE
Rule 17    statement -> assignment NEWLINE
Rule 18    statement -> while NEWLINE
Rule 19    statement -> if NEWLINE
Rule 20    statement -> command NEWLINE
Rule 21    statement -> function NEWLINE
Rule 22    statement -> call NEWLINE
Rule 23    statement -> RETURN expression NEWLINE
Rule 24    statement -> empty NEWLINE
Rule 25    statement -> errors NEWLINE
Rule 26    statement -> errors
Rule 27    declaration -> type variables
Rule 28    comment -> COMMENT any
Rule 29    any -> any VARIABLE
Rule 30    any -> VARIABLE
Rule 31    type -> INTEGER
Rule 32    type -> STRING
Rule 33    type -> BOOL
Rule 34    type -> VECTOR OF type
Rule 35    type -> errors
Rule 36    variables -> variable COMMA variables
Rule 37    variables -> assignment COMMA variables
Rule 38    variables -> variable
Rule 39    variables -> assignment
Rule 40    assignment -> variable ASSIGNMENT expression
Rule 41    variable -> VARIABLE L_QBRACKET expression R_QBRACKET
Rule 42    variable -> VARIABLE
Rule 43    expression -> variable
Rule 44    expression -> const
Rule 45    expression -> qstring
Rule 46    expression -> math_expression
Rule 47    expression -> robot_command
Rule 48    expression -> vector_pop
Rule 49    expression -> call
Rule 50    qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE
Rule 51    qstring -> QUOTE string QUOTE
Rule 52    string -> string VARIABLE
Rule 53    string -> VARIABLE
Rule 54    const -> TRUE
Rule 55    const -> FALSE
Rule 56    const -> UNDEFINED
Rule 57    const -> DECIMAL
Rule 58    const -> EXIT
Rule 59    const -> WOOD
Rule 60    const -> STEEL
Rule 61    const -> GLASS
Rule 62    const -> CONCRETE
Rule 63    const -> PLASTIC
Rule 64    math_expression -> expression PLUS expression
Rule 65    math_expression -> expression MINUS expression
Rule 66    math_expression -> MINUS expression
Rule 67    math_expression -> expression LESS expression
Rule 68    math_expression -> expression GREATER expression
Rule 69    math_expression -> expression EQ expression
Rule 70    math_expression -> expression NOTEQ expression
Rule 71    while -> DO statements_group UNTIL expression
Rule 72    if -> IF expression THEN statements_group
Rule 73    if -> IF expression THEN statements_group ELSE statements_group
Rule 74    function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
Rule 75    function -> FUNCTION OF type VARIABLE BRACKETS statements_group
Rule 76    command -> vector_command
Rule 77    command -> robot_command
Rule 78    command -> converting_command
Rule 79    converting_command -> expression TO type
Rule 80    converting_command -> expression TO expression
Rule 81    vector_command -> variable PUSH BACK expression
Rule 82    vector_command -> variable PUSH FRONT expression
Rule 83    vector_pop -> variable POP BACK
Rule 84    vector_pop -> variable POP FRONT
Rule 85    robot_command -> LEFT
Rule 86    robot_command -> RIGHT
Rule 87    robot_command -> FORWARD
Rule 88    robot_command -> BACK
Rule 89    robot_command -> ROTATE_RIGHT
Rule 90    robot_command -> ROTATE_LEFT
Rule 91    robot_command -> LMS
Rule 92    robot_command -> REFLECT
Rule 93    robot_command -> DRILL
Rule 94    call -> VARIABLE LBRACKET parameters RBRACKET
Rule 95    call -> VARIABLE BRACKETS
Rule 96    empty -> <empty>
Rule 97    parameters -> parameters COMMA parameter
Rule 98    parameters -> parameter
Rule 99    parameters -> parameters CONTINUE
Rule 100   parameter -> expression
Rule 101   parameter -> VARIABLE EQ expression
Rule 102   errors -> errors error
Rule 103   errors -> error

Terminals, with rules where they appear

ASSIGNMENT           : 40
BACK                 : 81 83 88
BEGIN                : 2
BOOL                 : 33
BRACKETS             : 75 95
COMMA                : 36 37 97
COMMENT              : 28
CONCRETE             : 62
CONTINUE             : 99
DECIMAL              : 57
DO                   : 71
DOUBLE_QUOTE         : 50 50
DRILL                : 93
ELSE                 : 73
END                  : 2
EQ                   : 69 101
EXIT                 : 58
FALSE                : 55
FORWARD              : 87
FRONT                : 82 84
FUNCTION             : 74 75
GLASS                : 61
GREATER              : 68
IF                   : 72 73
INTEGER              : 31
LBRACKET             : 74 94
LEFT                 : 85
LESS                 : 67
LMS                  : 91
L_QBRACKET           : 41
MINUS                : 65 66
NEWLINE              : 15 16 17 18 19 20 21 22 23 24 25
NOTEQ                : 70
OF                   : 34 74 75
PLASTIC              : 63
PLUS                 : 64
POP                  : 83 84
PUSH                 : 81 82
QUOTE                : 51 51
RBRACKET             : 74 94
REFLECT              : 92
RETURN               : 11 23
RIGHT                : 86
ROTATE_LEFT          : 90
ROTATE_RIGHT         : 89
R_QBRACKET           : 41
STEEL                : 60
STRING               : 32
TEXT                 : 
THEN                 : 72 73
TO                   : 79 80
TRUE                 : 54
UNDEFINED            : 56
UNTIL                : 71
VARIABLE             : 29 30 41 42 52 53 74 75 94 95 101
VECTOR               : 34
WOOD                 : 59
error                : 102 103

Nonterminals, with rules where they appear

any                  : 28 29
assignment           : 5 17 37 39
call                 : 10 22 49
command              : 8 20
comment              : 16
const                : 44
converting_command   : 78
declaration          : 4 15
empty                : 12 24
errors               : 25 26 35 102
expression           : 11 23 40 41 64 64 65 65 66 67 67 68 68 69 69 70 70 71 72 73 79 80 80 81 82 100 101
function             : 9 21
if                   : 7 19
inner_statement      : 3
math_expression      : 46
parameter            : 97 98
parameters           : 74 94 97 99
program              : 0
qstring              : 45
robot_command        : 47 77
statement            : 13 14
statements           : 1 2 13
statements_group     : 71 72 73 73 74 75
string               : 50 51 52
type                 : 27 34 74 75 79
variable             : 36 38 40 43 81 82 83 84
variables            : 27 36 37
vector_command       : 76
vector_pop           : 48
while                : 6 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (102) errors -> . errors error
    (103) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 96 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (102) errors -> . errors error
    (103) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    $end            reduce using rule 1 (program -> statements .)
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 96 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    statement                      shift and go to state 57
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 3

    (14) statements -> statement .

    RETURN          reduce using rule 14 (statements -> statement .)
    COMMENT         reduce using rule 14 (statements -> statement .)
    DO              reduce using rule 14 (statements -> statement .)
    IF              reduce using rule 14 (statements -> statement .)
    FUNCTION        reduce using rule 14 (statements -> statement .)
    VARIABLE        reduce using rule 14 (statements -> statement .)
    error           reduce using rule 14 (statements -> statement .)
    INTEGER         reduce using rule 14 (statements -> statement .)
    STRING          reduce using rule 14 (statements -> statement .)
    BOOL            reduce using rule 14 (statements -> statement .)
    VECTOR          reduce using rule 14 (statements -> statement .)
    LEFT            reduce using rule 14 (statements -> statement .)
    RIGHT           reduce using rule 14 (statements -> statement .)
    FORWARD         reduce using rule 14 (statements -> statement .)
    BACK            reduce using rule 14 (statements -> statement .)
    ROTATE_RIGHT    reduce using rule 14 (statements -> statement .)
    ROTATE_LEFT     reduce using rule 14 (statements -> statement .)
    LMS             reduce using rule 14 (statements -> statement .)
    REFLECT         reduce using rule 14 (statements -> statement .)
    DRILL           reduce using rule 14 (statements -> statement .)
    TRUE            reduce using rule 14 (statements -> statement .)
    FALSE           reduce using rule 14 (statements -> statement .)
    UNDEFINED       reduce using rule 14 (statements -> statement .)
    DECIMAL         reduce using rule 14 (statements -> statement .)
    EXIT            reduce using rule 14 (statements -> statement .)
    WOOD            reduce using rule 14 (statements -> statement .)
    STEEL           reduce using rule 14 (statements -> statement .)
    GLASS           reduce using rule 14 (statements -> statement .)
    CONCRETE        reduce using rule 14 (statements -> statement .)
    PLASTIC         reduce using rule 14 (statements -> statement .)
    DOUBLE_QUOTE    reduce using rule 14 (statements -> statement .)
    QUOTE           reduce using rule 14 (statements -> statement .)
    MINUS           reduce using rule 14 (statements -> statement .)
    NEWLINE         reduce using rule 14 (statements -> statement .)
    $end            reduce using rule 14 (statements -> statement .)
    END             reduce using rule 14 (statements -> statement .)


state 4

    (15) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 58


state 5

    (16) statement -> comment . NEWLINE

    NEWLINE         shift and go to state 59


state 6

    (17) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 60


state 7

    (18) statement -> while . NEWLINE

    NEWLINE         shift and go to state 61


state 8

    (19) statement -> if . NEWLINE

    NEWLINE         shift and go to state 62


state 9

    (20) statement -> command . NEWLINE

    NEWLINE         shift and go to state 63


state 10

    (21) statement -> function . NEWLINE

    NEWLINE         shift and go to state 64


state 11

    (22) statement -> call . NEWLINE
    (49) expression -> call .

    NEWLINE         shift and go to state 65
    TO              reduce using rule 49 (expression -> call .)
    PLUS            reduce using rule 49 (expression -> call .)
    MINUS           reduce using rule 49 (expression -> call .)
    LESS            reduce using rule 49 (expression -> call .)
    GREATER         reduce using rule 49 (expression -> call .)
    EQ              reduce using rule 49 (expression -> call .)
    NOTEQ           reduce using rule 49 (expression -> call .)


state 12

    (23) statement -> RETURN . expression NEWLINE
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 66
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 13

    (79) converting_command -> expression . TO type
    (80) converting_command -> expression . TO expression
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    TO              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 14

    (24) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 78


state 15

    (25) statement -> errors . NEWLINE
    (26) statement -> errors .
    (102) errors -> errors . error
    (35) type -> errors .

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! reduce/reduce conflict for VARIABLE resolved using rule 26 (statement -> errors .)
    NEWLINE         shift and go to state 79
    RETURN          reduce using rule 26 (statement -> errors .)
    COMMENT         reduce using rule 26 (statement -> errors .)
    DO              reduce using rule 26 (statement -> errors .)
    IF              reduce using rule 26 (statement -> errors .)
    FUNCTION        reduce using rule 26 (statement -> errors .)
    VARIABLE        reduce using rule 26 (statement -> errors .)
    INTEGER         reduce using rule 26 (statement -> errors .)
    STRING          reduce using rule 26 (statement -> errors .)
    BOOL            reduce using rule 26 (statement -> errors .)
    VECTOR          reduce using rule 26 (statement -> errors .)
    LEFT            reduce using rule 26 (statement -> errors .)
    RIGHT           reduce using rule 26 (statement -> errors .)
    FORWARD         reduce using rule 26 (statement -> errors .)
    BACK            reduce using rule 26 (statement -> errors .)
    ROTATE_RIGHT    reduce using rule 26 (statement -> errors .)
    ROTATE_LEFT     reduce using rule 26 (statement -> errors .)
    LMS             reduce using rule 26 (statement -> errors .)
    REFLECT         reduce using rule 26 (statement -> errors .)
    DRILL           reduce using rule 26 (statement -> errors .)
    TRUE            reduce using rule 26 (statement -> errors .)
    FALSE           reduce using rule 26 (statement -> errors .)
    UNDEFINED       reduce using rule 26 (statement -> errors .)
    DECIMAL         reduce using rule 26 (statement -> errors .)
    EXIT            reduce using rule 26 (statement -> errors .)
    WOOD            reduce using rule 26 (statement -> errors .)
    STEEL           reduce using rule 26 (statement -> errors .)
    GLASS           reduce using rule 26 (statement -> errors .)
    CONCRETE        reduce using rule 26 (statement -> errors .)
    PLASTIC         reduce using rule 26 (statement -> errors .)
    DOUBLE_QUOTE    reduce using rule 26 (statement -> errors .)
    QUOTE           reduce using rule 26 (statement -> errors .)
    MINUS           reduce using rule 26 (statement -> errors .)
    $end            reduce using rule 26 (statement -> errors .)
    END             reduce using rule 26 (statement -> errors .)
    error           shift and go to state 80

  ! error           [ reduce using rule 26 (statement -> errors .) ]
  ! NEWLINE         [ reduce using rule 26 (statement -> errors .) ]
  ! VARIABLE        [ reduce using rule 35 (type -> errors .) ]


state 16

    (27) declaration -> type . variables
    (36) variables -> . variable COMMA variables
    (37) variables -> . assignment COMMA variables
    (38) variables -> . variable
    (39) variables -> . assignment
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (40) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 84

    variables                      shift and go to state 81
    variable                       shift and go to state 82
    assignment                     shift and go to state 83

state 17

    (28) comment -> COMMENT . any
    (29) any -> . any VARIABLE
    (30) any -> . VARIABLE

    VARIABLE        shift and go to state 86

    any                            shift and go to state 85

state 18

    (40) assignment -> variable . ASSIGNMENT expression
    (81) vector_command -> variable . PUSH BACK expression
    (82) vector_command -> variable . PUSH FRONT expression
    (43) expression -> variable .
    (83) vector_pop -> variable . POP BACK
    (84) vector_pop -> variable . POP FRONT

    ASSIGNMENT      shift and go to state 87
    PUSH            shift and go to state 88
    TO              reduce using rule 43 (expression -> variable .)
    PLUS            reduce using rule 43 (expression -> variable .)
    MINUS           reduce using rule 43 (expression -> variable .)
    LESS            reduce using rule 43 (expression -> variable .)
    GREATER         reduce using rule 43 (expression -> variable .)
    EQ              reduce using rule 43 (expression -> variable .)
    NOTEQ           reduce using rule 43 (expression -> variable .)
    POP             shift and go to state 89


state 19

    (71) while -> DO . statements_group UNTIL expression
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (102) errors -> . errors error
    (103) errors -> . error
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    BEGIN           shift and go to state 91
    RETURN          shift and go to state 100
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    UNTIL           reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    error           shift and go to state 26
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    statements_group               shift and go to state 90
    expression                     shift and go to state 13
    inner_statement                shift and go to state 92
    declaration                    shift and go to state 93
    assignment                     shift and go to state 94
    while                          shift and go to state 95
    if                             shift and go to state 96
    command                        shift and go to state 97
    function                       shift and go to state 98
    call                           shift and go to state 99
    empty                          shift and go to state 101
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    errors                         shift and go to state 102
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 20

    (72) if -> IF . expression THEN statements_group
    (73) if -> IF . expression THEN statements_group ELSE statements_group
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 103
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 21

    (76) command -> vector_command .

    NEWLINE         reduce using rule 76 (command -> vector_command .)
    UNTIL           reduce using rule 76 (command -> vector_command .)
    ELSE            reduce using rule 76 (command -> vector_command .)


state 22

    (77) command -> robot_command .
    (47) expression -> robot_command .

    NEWLINE         reduce using rule 77 (command -> robot_command .)
    UNTIL           reduce using rule 77 (command -> robot_command .)
    ELSE            reduce using rule 77 (command -> robot_command .)
    TO              reduce using rule 47 (expression -> robot_command .)
    PLUS            reduce using rule 47 (expression -> robot_command .)
    MINUS           reduce using rule 47 (expression -> robot_command .)
    LESS            reduce using rule 47 (expression -> robot_command .)
    GREATER         reduce using rule 47 (expression -> robot_command .)
    EQ              reduce using rule 47 (expression -> robot_command .)
    NOTEQ           reduce using rule 47 (expression -> robot_command .)


state 23

    (78) command -> converting_command .

    NEWLINE         reduce using rule 78 (command -> converting_command .)
    UNTIL           reduce using rule 78 (command -> converting_command .)
    ELSE            reduce using rule 78 (command -> converting_command .)


state 24

    (74) function -> FUNCTION . OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> FUNCTION . OF type VARIABLE BRACKETS statements_group

    OF              shift and go to state 104


state 25

    (94) call -> VARIABLE . LBRACKET parameters RBRACKET
    (95) call -> VARIABLE . BRACKETS
    (41) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (42) variable -> VARIABLE .

    LBRACKET        shift and go to state 105
    BRACKETS        shift and go to state 106
    L_QBRACKET      shift and go to state 107
    ASSIGNMENT      reduce using rule 42 (variable -> VARIABLE .)
    PUSH            reduce using rule 42 (variable -> VARIABLE .)
    POP             reduce using rule 42 (variable -> VARIABLE .)
    TO              reduce using rule 42 (variable -> VARIABLE .)
    PLUS            reduce using rule 42 (variable -> VARIABLE .)
    MINUS           reduce using rule 42 (variable -> VARIABLE .)
    LESS            reduce using rule 42 (variable -> VARIABLE .)
    GREATER         reduce using rule 42 (variable -> VARIABLE .)
    EQ              reduce using rule 42 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 42 (variable -> VARIABLE .)


state 26

    (103) errors -> error .

    NEWLINE         reduce using rule 103 (errors -> error .)
    error           reduce using rule 103 (errors -> error .)
    RETURN          reduce using rule 103 (errors -> error .)
    COMMENT         reduce using rule 103 (errors -> error .)
    DO              reduce using rule 103 (errors -> error .)
    IF              reduce using rule 103 (errors -> error .)
    FUNCTION        reduce using rule 103 (errors -> error .)
    VARIABLE        reduce using rule 103 (errors -> error .)
    INTEGER         reduce using rule 103 (errors -> error .)
    STRING          reduce using rule 103 (errors -> error .)
    BOOL            reduce using rule 103 (errors -> error .)
    VECTOR          reduce using rule 103 (errors -> error .)
    LEFT            reduce using rule 103 (errors -> error .)
    RIGHT           reduce using rule 103 (errors -> error .)
    FORWARD         reduce using rule 103 (errors -> error .)
    BACK            reduce using rule 103 (errors -> error .)
    ROTATE_RIGHT    reduce using rule 103 (errors -> error .)
    ROTATE_LEFT     reduce using rule 103 (errors -> error .)
    LMS             reduce using rule 103 (errors -> error .)
    REFLECT         reduce using rule 103 (errors -> error .)
    DRILL           reduce using rule 103 (errors -> error .)
    TRUE            reduce using rule 103 (errors -> error .)
    FALSE           reduce using rule 103 (errors -> error .)
    UNDEFINED       reduce using rule 103 (errors -> error .)
    DECIMAL         reduce using rule 103 (errors -> error .)
    EXIT            reduce using rule 103 (errors -> error .)
    WOOD            reduce using rule 103 (errors -> error .)
    STEEL           reduce using rule 103 (errors -> error .)
    GLASS           reduce using rule 103 (errors -> error .)
    CONCRETE        reduce using rule 103 (errors -> error .)
    PLASTIC         reduce using rule 103 (errors -> error .)
    DOUBLE_QUOTE    reduce using rule 103 (errors -> error .)
    QUOTE           reduce using rule 103 (errors -> error .)
    MINUS           reduce using rule 103 (errors -> error .)
    $end            reduce using rule 103 (errors -> error .)
    UNTIL           reduce using rule 103 (errors -> error .)
    ELSE            reduce using rule 103 (errors -> error .)
    END             reduce using rule 103 (errors -> error .)


state 27

    (31) type -> INTEGER .

    VARIABLE        reduce using rule 31 (type -> INTEGER .)
    NEWLINE         reduce using rule 31 (type -> INTEGER .)
    UNTIL           reduce using rule 31 (type -> INTEGER .)
    ELSE            reduce using rule 31 (type -> INTEGER .)


state 28

    (32) type -> STRING .

    VARIABLE        reduce using rule 32 (type -> STRING .)
    NEWLINE         reduce using rule 32 (type -> STRING .)
    UNTIL           reduce using rule 32 (type -> STRING .)
    ELSE            reduce using rule 32 (type -> STRING .)


state 29

    (33) type -> BOOL .

    VARIABLE        reduce using rule 33 (type -> BOOL .)
    NEWLINE         reduce using rule 33 (type -> BOOL .)
    UNTIL           reduce using rule 33 (type -> BOOL .)
    ELSE            reduce using rule 33 (type -> BOOL .)


state 30

    (34) type -> VECTOR . OF type

    OF              shift and go to state 108


state 31

    (88) robot_command -> BACK .

    NEWLINE         reduce using rule 88 (robot_command -> BACK .)
    TO              reduce using rule 88 (robot_command -> BACK .)
    PLUS            reduce using rule 88 (robot_command -> BACK .)
    MINUS           reduce using rule 88 (robot_command -> BACK .)
    LESS            reduce using rule 88 (robot_command -> BACK .)
    GREATER         reduce using rule 88 (robot_command -> BACK .)
    EQ              reduce using rule 88 (robot_command -> BACK .)
    NOTEQ           reduce using rule 88 (robot_command -> BACK .)
    UNTIL           reduce using rule 88 (robot_command -> BACK .)
    THEN            reduce using rule 88 (robot_command -> BACK .)
    ELSE            reduce using rule 88 (robot_command -> BACK .)
    COMMA           reduce using rule 88 (robot_command -> BACK .)
    RBRACKET        reduce using rule 88 (robot_command -> BACK .)
    CONTINUE        reduce using rule 88 (robot_command -> BACK .)
    R_QBRACKET      reduce using rule 88 (robot_command -> BACK .)


state 32

    (85) robot_command -> LEFT .

    NEWLINE         reduce using rule 85 (robot_command -> LEFT .)
    TO              reduce using rule 85 (robot_command -> LEFT .)
    PLUS            reduce using rule 85 (robot_command -> LEFT .)
    MINUS           reduce using rule 85 (robot_command -> LEFT .)
    LESS            reduce using rule 85 (robot_command -> LEFT .)
    GREATER         reduce using rule 85 (robot_command -> LEFT .)
    EQ              reduce using rule 85 (robot_command -> LEFT .)
    NOTEQ           reduce using rule 85 (robot_command -> LEFT .)
    UNTIL           reduce using rule 85 (robot_command -> LEFT .)
    THEN            reduce using rule 85 (robot_command -> LEFT .)
    ELSE            reduce using rule 85 (robot_command -> LEFT .)
    COMMA           reduce using rule 85 (robot_command -> LEFT .)
    RBRACKET        reduce using rule 85 (robot_command -> LEFT .)
    CONTINUE        reduce using rule 85 (robot_command -> LEFT .)
    R_QBRACKET      reduce using rule 85 (robot_command -> LEFT .)


state 33

    (86) robot_command -> RIGHT .

    NEWLINE         reduce using rule 86 (robot_command -> RIGHT .)
    TO              reduce using rule 86 (robot_command -> RIGHT .)
    PLUS            reduce using rule 86 (robot_command -> RIGHT .)
    MINUS           reduce using rule 86 (robot_command -> RIGHT .)
    LESS            reduce using rule 86 (robot_command -> RIGHT .)
    GREATER         reduce using rule 86 (robot_command -> RIGHT .)
    EQ              reduce using rule 86 (robot_command -> RIGHT .)
    NOTEQ           reduce using rule 86 (robot_command -> RIGHT .)
    UNTIL           reduce using rule 86 (robot_command -> RIGHT .)
    THEN            reduce using rule 86 (robot_command -> RIGHT .)
    ELSE            reduce using rule 86 (robot_command -> RIGHT .)
    COMMA           reduce using rule 86 (robot_command -> RIGHT .)
    RBRACKET        reduce using rule 86 (robot_command -> RIGHT .)
    CONTINUE        reduce using rule 86 (robot_command -> RIGHT .)
    R_QBRACKET      reduce using rule 86 (robot_command -> RIGHT .)


state 34

    (87) robot_command -> FORWARD .

    NEWLINE         reduce using rule 87 (robot_command -> FORWARD .)
    TO              reduce using rule 87 (robot_command -> FORWARD .)
    PLUS            reduce using rule 87 (robot_command -> FORWARD .)
    MINUS           reduce using rule 87 (robot_command -> FORWARD .)
    LESS            reduce using rule 87 (robot_command -> FORWARD .)
    GREATER         reduce using rule 87 (robot_command -> FORWARD .)
    EQ              reduce using rule 87 (robot_command -> FORWARD .)
    NOTEQ           reduce using rule 87 (robot_command -> FORWARD .)
    UNTIL           reduce using rule 87 (robot_command -> FORWARD .)
    THEN            reduce using rule 87 (robot_command -> FORWARD .)
    ELSE            reduce using rule 87 (robot_command -> FORWARD .)
    COMMA           reduce using rule 87 (robot_command -> FORWARD .)
    RBRACKET        reduce using rule 87 (robot_command -> FORWARD .)
    CONTINUE        reduce using rule 87 (robot_command -> FORWARD .)
    R_QBRACKET      reduce using rule 87 (robot_command -> FORWARD .)


state 35

    (89) robot_command -> ROTATE_RIGHT .

    NEWLINE         reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    TO              reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    PLUS            reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    MINUS           reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    LESS            reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    GREATER         reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    EQ              reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    NOTEQ           reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    UNTIL           reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    THEN            reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    ELSE            reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    COMMA           reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    RBRACKET        reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    CONTINUE        reduce using rule 89 (robot_command -> ROTATE_RIGHT .)
    R_QBRACKET      reduce using rule 89 (robot_command -> ROTATE_RIGHT .)


state 36

    (90) robot_command -> ROTATE_LEFT .

    NEWLINE         reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    TO              reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    PLUS            reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    MINUS           reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    LESS            reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    GREATER         reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    EQ              reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    NOTEQ           reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    UNTIL           reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    THEN            reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    ELSE            reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    COMMA           reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    RBRACKET        reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    CONTINUE        reduce using rule 90 (robot_command -> ROTATE_LEFT .)
    R_QBRACKET      reduce using rule 90 (robot_command -> ROTATE_LEFT .)


state 37

    (91) robot_command -> LMS .

    NEWLINE         reduce using rule 91 (robot_command -> LMS .)
    TO              reduce using rule 91 (robot_command -> LMS .)
    PLUS            reduce using rule 91 (robot_command -> LMS .)
    MINUS           reduce using rule 91 (robot_command -> LMS .)
    LESS            reduce using rule 91 (robot_command -> LMS .)
    GREATER         reduce using rule 91 (robot_command -> LMS .)
    EQ              reduce using rule 91 (robot_command -> LMS .)
    NOTEQ           reduce using rule 91 (robot_command -> LMS .)
    UNTIL           reduce using rule 91 (robot_command -> LMS .)
    THEN            reduce using rule 91 (robot_command -> LMS .)
    ELSE            reduce using rule 91 (robot_command -> LMS .)
    COMMA           reduce using rule 91 (robot_command -> LMS .)
    RBRACKET        reduce using rule 91 (robot_command -> LMS .)
    CONTINUE        reduce using rule 91 (robot_command -> LMS .)
    R_QBRACKET      reduce using rule 91 (robot_command -> LMS .)


state 38

    (92) robot_command -> REFLECT .

    NEWLINE         reduce using rule 92 (robot_command -> REFLECT .)
    TO              reduce using rule 92 (robot_command -> REFLECT .)
    PLUS            reduce using rule 92 (robot_command -> REFLECT .)
    MINUS           reduce using rule 92 (robot_command -> REFLECT .)
    LESS            reduce using rule 92 (robot_command -> REFLECT .)
    GREATER         reduce using rule 92 (robot_command -> REFLECT .)
    EQ              reduce using rule 92 (robot_command -> REFLECT .)
    NOTEQ           reduce using rule 92 (robot_command -> REFLECT .)
    UNTIL           reduce using rule 92 (robot_command -> REFLECT .)
    THEN            reduce using rule 92 (robot_command -> REFLECT .)
    ELSE            reduce using rule 92 (robot_command -> REFLECT .)
    COMMA           reduce using rule 92 (robot_command -> REFLECT .)
    RBRACKET        reduce using rule 92 (robot_command -> REFLECT .)
    CONTINUE        reduce using rule 92 (robot_command -> REFLECT .)
    R_QBRACKET      reduce using rule 92 (robot_command -> REFLECT .)


state 39

    (93) robot_command -> DRILL .

    NEWLINE         reduce using rule 93 (robot_command -> DRILL .)
    TO              reduce using rule 93 (robot_command -> DRILL .)
    PLUS            reduce using rule 93 (robot_command -> DRILL .)
    MINUS           reduce using rule 93 (robot_command -> DRILL .)
    LESS            reduce using rule 93 (robot_command -> DRILL .)
    GREATER         reduce using rule 93 (robot_command -> DRILL .)
    EQ              reduce using rule 93 (robot_command -> DRILL .)
    NOTEQ           reduce using rule 93 (robot_command -> DRILL .)
    UNTIL           reduce using rule 93 (robot_command -> DRILL .)
    THEN            reduce using rule 93 (robot_command -> DRILL .)
    ELSE            reduce using rule 93 (robot_command -> DRILL .)
    COMMA           reduce using rule 93 (robot_command -> DRILL .)
    RBRACKET        reduce using rule 93 (robot_command -> DRILL .)
    CONTINUE        reduce using rule 93 (robot_command -> DRILL .)
    R_QBRACKET      reduce using rule 93 (robot_command -> DRILL .)


state 40

    (44) expression -> const .

    TO              reduce using rule 44 (expression -> const .)
    PLUS            reduce using rule 44 (expression -> const .)
    MINUS           reduce using rule 44 (expression -> const .)
    LESS            reduce using rule 44 (expression -> const .)
    GREATER         reduce using rule 44 (expression -> const .)
    EQ              reduce using rule 44 (expression -> const .)
    NOTEQ           reduce using rule 44 (expression -> const .)
    NEWLINE         reduce using rule 44 (expression -> const .)
    THEN            reduce using rule 44 (expression -> const .)
    UNTIL           reduce using rule 44 (expression -> const .)
    ELSE            reduce using rule 44 (expression -> const .)
    COMMA           reduce using rule 44 (expression -> const .)
    RBRACKET        reduce using rule 44 (expression -> const .)
    CONTINUE        reduce using rule 44 (expression -> const .)
    R_QBRACKET      reduce using rule 44 (expression -> const .)


state 41

    (45) expression -> qstring .

    TO              reduce using rule 45 (expression -> qstring .)
    PLUS            reduce using rule 45 (expression -> qstring .)
    MINUS           reduce using rule 45 (expression -> qstring .)
    LESS            reduce using rule 45 (expression -> qstring .)
    GREATER         reduce using rule 45 (expression -> qstring .)
    EQ              reduce using rule 45 (expression -> qstring .)
    NOTEQ           reduce using rule 45 (expression -> qstring .)
    NEWLINE         reduce using rule 45 (expression -> qstring .)
    THEN            reduce using rule 45 (expression -> qstring .)
    UNTIL           reduce using rule 45 (expression -> qstring .)
    ELSE            reduce using rule 45 (expression -> qstring .)
    COMMA           reduce using rule 45 (expression -> qstring .)
    RBRACKET        reduce using rule 45 (expression -> qstring .)
    CONTINUE        reduce using rule 45 (expression -> qstring .)
    R_QBRACKET      reduce using rule 45 (expression -> qstring .)


state 42

    (46) expression -> math_expression .

    TO              reduce using rule 46 (expression -> math_expression .)
    PLUS            reduce using rule 46 (expression -> math_expression .)
    MINUS           reduce using rule 46 (expression -> math_expression .)
    LESS            reduce using rule 46 (expression -> math_expression .)
    GREATER         reduce using rule 46 (expression -> math_expression .)
    EQ              reduce using rule 46 (expression -> math_expression .)
    NOTEQ           reduce using rule 46 (expression -> math_expression .)
    NEWLINE         reduce using rule 46 (expression -> math_expression .)
    THEN            reduce using rule 46 (expression -> math_expression .)
    UNTIL           reduce using rule 46 (expression -> math_expression .)
    ELSE            reduce using rule 46 (expression -> math_expression .)
    COMMA           reduce using rule 46 (expression -> math_expression .)
    RBRACKET        reduce using rule 46 (expression -> math_expression .)
    CONTINUE        reduce using rule 46 (expression -> math_expression .)
    R_QBRACKET      reduce using rule 46 (expression -> math_expression .)


state 43

    (48) expression -> vector_pop .

    TO              reduce using rule 48 (expression -> vector_pop .)
    PLUS            reduce using rule 48 (expression -> vector_pop .)
    MINUS           reduce using rule 48 (expression -> vector_pop .)
    LESS            reduce using rule 48 (expression -> vector_pop .)
    GREATER         reduce using rule 48 (expression -> vector_pop .)
    EQ              reduce using rule 48 (expression -> vector_pop .)
    NOTEQ           reduce using rule 48 (expression -> vector_pop .)
    NEWLINE         reduce using rule 48 (expression -> vector_pop .)
    THEN            reduce using rule 48 (expression -> vector_pop .)
    UNTIL           reduce using rule 48 (expression -> vector_pop .)
    ELSE            reduce using rule 48 (expression -> vector_pop .)
    COMMA           reduce using rule 48 (expression -> vector_pop .)
    RBRACKET        reduce using rule 48 (expression -> vector_pop .)
    CONTINUE        reduce using rule 48 (expression -> vector_pop .)
    R_QBRACKET      reduce using rule 48 (expression -> vector_pop .)


state 44

    (54) const -> TRUE .

    TO              reduce using rule 54 (const -> TRUE .)
    PLUS            reduce using rule 54 (const -> TRUE .)
    MINUS           reduce using rule 54 (const -> TRUE .)
    LESS            reduce using rule 54 (const -> TRUE .)
    GREATER         reduce using rule 54 (const -> TRUE .)
    EQ              reduce using rule 54 (const -> TRUE .)
    NOTEQ           reduce using rule 54 (const -> TRUE .)
    NEWLINE         reduce using rule 54 (const -> TRUE .)
    THEN            reduce using rule 54 (const -> TRUE .)
    UNTIL           reduce using rule 54 (const -> TRUE .)
    ELSE            reduce using rule 54 (const -> TRUE .)
    COMMA           reduce using rule 54 (const -> TRUE .)
    RBRACKET        reduce using rule 54 (const -> TRUE .)
    CONTINUE        reduce using rule 54 (const -> TRUE .)
    R_QBRACKET      reduce using rule 54 (const -> TRUE .)


state 45

    (55) const -> FALSE .

    TO              reduce using rule 55 (const -> FALSE .)
    PLUS            reduce using rule 55 (const -> FALSE .)
    MINUS           reduce using rule 55 (const -> FALSE .)
    LESS            reduce using rule 55 (const -> FALSE .)
    GREATER         reduce using rule 55 (const -> FALSE .)
    EQ              reduce using rule 55 (const -> FALSE .)
    NOTEQ           reduce using rule 55 (const -> FALSE .)
    NEWLINE         reduce using rule 55 (const -> FALSE .)
    THEN            reduce using rule 55 (const -> FALSE .)
    UNTIL           reduce using rule 55 (const -> FALSE .)
    ELSE            reduce using rule 55 (const -> FALSE .)
    COMMA           reduce using rule 55 (const -> FALSE .)
    RBRACKET        reduce using rule 55 (const -> FALSE .)
    CONTINUE        reduce using rule 55 (const -> FALSE .)
    R_QBRACKET      reduce using rule 55 (const -> FALSE .)


state 46

    (56) const -> UNDEFINED .

    TO              reduce using rule 56 (const -> UNDEFINED .)
    PLUS            reduce using rule 56 (const -> UNDEFINED .)
    MINUS           reduce using rule 56 (const -> UNDEFINED .)
    LESS            reduce using rule 56 (const -> UNDEFINED .)
    GREATER         reduce using rule 56 (const -> UNDEFINED .)
    EQ              reduce using rule 56 (const -> UNDEFINED .)
    NOTEQ           reduce using rule 56 (const -> UNDEFINED .)
    NEWLINE         reduce using rule 56 (const -> UNDEFINED .)
    THEN            reduce using rule 56 (const -> UNDEFINED .)
    UNTIL           reduce using rule 56 (const -> UNDEFINED .)
    ELSE            reduce using rule 56 (const -> UNDEFINED .)
    COMMA           reduce using rule 56 (const -> UNDEFINED .)
    RBRACKET        reduce using rule 56 (const -> UNDEFINED .)
    CONTINUE        reduce using rule 56 (const -> UNDEFINED .)
    R_QBRACKET      reduce using rule 56 (const -> UNDEFINED .)


state 47

    (57) const -> DECIMAL .

    TO              reduce using rule 57 (const -> DECIMAL .)
    PLUS            reduce using rule 57 (const -> DECIMAL .)
    MINUS           reduce using rule 57 (const -> DECIMAL .)
    LESS            reduce using rule 57 (const -> DECIMAL .)
    GREATER         reduce using rule 57 (const -> DECIMAL .)
    EQ              reduce using rule 57 (const -> DECIMAL .)
    NOTEQ           reduce using rule 57 (const -> DECIMAL .)
    NEWLINE         reduce using rule 57 (const -> DECIMAL .)
    THEN            reduce using rule 57 (const -> DECIMAL .)
    UNTIL           reduce using rule 57 (const -> DECIMAL .)
    ELSE            reduce using rule 57 (const -> DECIMAL .)
    COMMA           reduce using rule 57 (const -> DECIMAL .)
    RBRACKET        reduce using rule 57 (const -> DECIMAL .)
    CONTINUE        reduce using rule 57 (const -> DECIMAL .)
    R_QBRACKET      reduce using rule 57 (const -> DECIMAL .)


state 48

    (58) const -> EXIT .

    TO              reduce using rule 58 (const -> EXIT .)
    PLUS            reduce using rule 58 (const -> EXIT .)
    MINUS           reduce using rule 58 (const -> EXIT .)
    LESS            reduce using rule 58 (const -> EXIT .)
    GREATER         reduce using rule 58 (const -> EXIT .)
    EQ              reduce using rule 58 (const -> EXIT .)
    NOTEQ           reduce using rule 58 (const -> EXIT .)
    NEWLINE         reduce using rule 58 (const -> EXIT .)
    THEN            reduce using rule 58 (const -> EXIT .)
    UNTIL           reduce using rule 58 (const -> EXIT .)
    ELSE            reduce using rule 58 (const -> EXIT .)
    COMMA           reduce using rule 58 (const -> EXIT .)
    RBRACKET        reduce using rule 58 (const -> EXIT .)
    CONTINUE        reduce using rule 58 (const -> EXIT .)
    R_QBRACKET      reduce using rule 58 (const -> EXIT .)


state 49

    (59) const -> WOOD .

    TO              reduce using rule 59 (const -> WOOD .)
    PLUS            reduce using rule 59 (const -> WOOD .)
    MINUS           reduce using rule 59 (const -> WOOD .)
    LESS            reduce using rule 59 (const -> WOOD .)
    GREATER         reduce using rule 59 (const -> WOOD .)
    EQ              reduce using rule 59 (const -> WOOD .)
    NOTEQ           reduce using rule 59 (const -> WOOD .)
    NEWLINE         reduce using rule 59 (const -> WOOD .)
    THEN            reduce using rule 59 (const -> WOOD .)
    UNTIL           reduce using rule 59 (const -> WOOD .)
    ELSE            reduce using rule 59 (const -> WOOD .)
    COMMA           reduce using rule 59 (const -> WOOD .)
    RBRACKET        reduce using rule 59 (const -> WOOD .)
    CONTINUE        reduce using rule 59 (const -> WOOD .)
    R_QBRACKET      reduce using rule 59 (const -> WOOD .)


state 50

    (60) const -> STEEL .

    TO              reduce using rule 60 (const -> STEEL .)
    PLUS            reduce using rule 60 (const -> STEEL .)
    MINUS           reduce using rule 60 (const -> STEEL .)
    LESS            reduce using rule 60 (const -> STEEL .)
    GREATER         reduce using rule 60 (const -> STEEL .)
    EQ              reduce using rule 60 (const -> STEEL .)
    NOTEQ           reduce using rule 60 (const -> STEEL .)
    NEWLINE         reduce using rule 60 (const -> STEEL .)
    THEN            reduce using rule 60 (const -> STEEL .)
    UNTIL           reduce using rule 60 (const -> STEEL .)
    ELSE            reduce using rule 60 (const -> STEEL .)
    COMMA           reduce using rule 60 (const -> STEEL .)
    RBRACKET        reduce using rule 60 (const -> STEEL .)
    CONTINUE        reduce using rule 60 (const -> STEEL .)
    R_QBRACKET      reduce using rule 60 (const -> STEEL .)


state 51

    (61) const -> GLASS .

    TO              reduce using rule 61 (const -> GLASS .)
    PLUS            reduce using rule 61 (const -> GLASS .)
    MINUS           reduce using rule 61 (const -> GLASS .)
    LESS            reduce using rule 61 (const -> GLASS .)
    GREATER         reduce using rule 61 (const -> GLASS .)
    EQ              reduce using rule 61 (const -> GLASS .)
    NOTEQ           reduce using rule 61 (const -> GLASS .)
    NEWLINE         reduce using rule 61 (const -> GLASS .)
    THEN            reduce using rule 61 (const -> GLASS .)
    UNTIL           reduce using rule 61 (const -> GLASS .)
    ELSE            reduce using rule 61 (const -> GLASS .)
    COMMA           reduce using rule 61 (const -> GLASS .)
    RBRACKET        reduce using rule 61 (const -> GLASS .)
    CONTINUE        reduce using rule 61 (const -> GLASS .)
    R_QBRACKET      reduce using rule 61 (const -> GLASS .)


state 52

    (62) const -> CONCRETE .

    TO              reduce using rule 62 (const -> CONCRETE .)
    PLUS            reduce using rule 62 (const -> CONCRETE .)
    MINUS           reduce using rule 62 (const -> CONCRETE .)
    LESS            reduce using rule 62 (const -> CONCRETE .)
    GREATER         reduce using rule 62 (const -> CONCRETE .)
    EQ              reduce using rule 62 (const -> CONCRETE .)
    NOTEQ           reduce using rule 62 (const -> CONCRETE .)
    NEWLINE         reduce using rule 62 (const -> CONCRETE .)
    THEN            reduce using rule 62 (const -> CONCRETE .)
    UNTIL           reduce using rule 62 (const -> CONCRETE .)
    ELSE            reduce using rule 62 (const -> CONCRETE .)
    COMMA           reduce using rule 62 (const -> CONCRETE .)
    RBRACKET        reduce using rule 62 (const -> CONCRETE .)
    CONTINUE        reduce using rule 62 (const -> CONCRETE .)
    R_QBRACKET      reduce using rule 62 (const -> CONCRETE .)


state 53

    (63) const -> PLASTIC .

    TO              reduce using rule 63 (const -> PLASTIC .)
    PLUS            reduce using rule 63 (const -> PLASTIC .)
    MINUS           reduce using rule 63 (const -> PLASTIC .)
    LESS            reduce using rule 63 (const -> PLASTIC .)
    GREATER         reduce using rule 63 (const -> PLASTIC .)
    EQ              reduce using rule 63 (const -> PLASTIC .)
    NOTEQ           reduce using rule 63 (const -> PLASTIC .)
    NEWLINE         reduce using rule 63 (const -> PLASTIC .)
    THEN            reduce using rule 63 (const -> PLASTIC .)
    UNTIL           reduce using rule 63 (const -> PLASTIC .)
    ELSE            reduce using rule 63 (const -> PLASTIC .)
    COMMA           reduce using rule 63 (const -> PLASTIC .)
    RBRACKET        reduce using rule 63 (const -> PLASTIC .)
    CONTINUE        reduce using rule 63 (const -> PLASTIC .)
    R_QBRACKET      reduce using rule 63 (const -> PLASTIC .)


state 54

    (50) qstring -> DOUBLE_QUOTE . string DOUBLE_QUOTE
    (52) string -> . string VARIABLE
    (53) string -> . VARIABLE

    VARIABLE        shift and go to state 110

    string                         shift and go to state 109

state 55

    (51) qstring -> QUOTE . string QUOTE
    (52) string -> . string VARIABLE
    (53) string -> . VARIABLE

    VARIABLE        shift and go to state 110

    string                         shift and go to state 111

state 56

    (66) math_expression -> MINUS . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 112
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 57

    (13) statements -> statements statement .

    RETURN          reduce using rule 13 (statements -> statements statement .)
    COMMENT         reduce using rule 13 (statements -> statements statement .)
    DO              reduce using rule 13 (statements -> statements statement .)
    IF              reduce using rule 13 (statements -> statements statement .)
    FUNCTION        reduce using rule 13 (statements -> statements statement .)
    VARIABLE        reduce using rule 13 (statements -> statements statement .)
    error           reduce using rule 13 (statements -> statements statement .)
    INTEGER         reduce using rule 13 (statements -> statements statement .)
    STRING          reduce using rule 13 (statements -> statements statement .)
    BOOL            reduce using rule 13 (statements -> statements statement .)
    VECTOR          reduce using rule 13 (statements -> statements statement .)
    LEFT            reduce using rule 13 (statements -> statements statement .)
    RIGHT           reduce using rule 13 (statements -> statements statement .)
    FORWARD         reduce using rule 13 (statements -> statements statement .)
    BACK            reduce using rule 13 (statements -> statements statement .)
    ROTATE_RIGHT    reduce using rule 13 (statements -> statements statement .)
    ROTATE_LEFT     reduce using rule 13 (statements -> statements statement .)
    LMS             reduce using rule 13 (statements -> statements statement .)
    REFLECT         reduce using rule 13 (statements -> statements statement .)
    DRILL           reduce using rule 13 (statements -> statements statement .)
    TRUE            reduce using rule 13 (statements -> statements statement .)
    FALSE           reduce using rule 13 (statements -> statements statement .)
    UNDEFINED       reduce using rule 13 (statements -> statements statement .)
    DECIMAL         reduce using rule 13 (statements -> statements statement .)
    EXIT            reduce using rule 13 (statements -> statements statement .)
    WOOD            reduce using rule 13 (statements -> statements statement .)
    STEEL           reduce using rule 13 (statements -> statements statement .)
    GLASS           reduce using rule 13 (statements -> statements statement .)
    CONCRETE        reduce using rule 13 (statements -> statements statement .)
    PLASTIC         reduce using rule 13 (statements -> statements statement .)
    DOUBLE_QUOTE    reduce using rule 13 (statements -> statements statement .)
    QUOTE           reduce using rule 13 (statements -> statements statement .)
    MINUS           reduce using rule 13 (statements -> statements statement .)
    NEWLINE         reduce using rule 13 (statements -> statements statement .)
    $end            reduce using rule 13 (statements -> statements statement .)
    END             reduce using rule 13 (statements -> statements statement .)


state 58

    (15) statement -> declaration NEWLINE .

    RETURN          reduce using rule 15 (statement -> declaration NEWLINE .)
    COMMENT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DO              reduce using rule 15 (statement -> declaration NEWLINE .)
    IF              reduce using rule 15 (statement -> declaration NEWLINE .)
    FUNCTION        reduce using rule 15 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 15 (statement -> declaration NEWLINE .)
    error           reduce using rule 15 (statement -> declaration NEWLINE .)
    INTEGER         reduce using rule 15 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 15 (statement -> declaration NEWLINE .)
    BOOL            reduce using rule 15 (statement -> declaration NEWLINE .)
    VECTOR          reduce using rule 15 (statement -> declaration NEWLINE .)
    LEFT            reduce using rule 15 (statement -> declaration NEWLINE .)
    RIGHT           reduce using rule 15 (statement -> declaration NEWLINE .)
    FORWARD         reduce using rule 15 (statement -> declaration NEWLINE .)
    BACK            reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_RIGHT    reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_LEFT     reduce using rule 15 (statement -> declaration NEWLINE .)
    LMS             reduce using rule 15 (statement -> declaration NEWLINE .)
    REFLECT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DRILL           reduce using rule 15 (statement -> declaration NEWLINE .)
    TRUE            reduce using rule 15 (statement -> declaration NEWLINE .)
    FALSE           reduce using rule 15 (statement -> declaration NEWLINE .)
    UNDEFINED       reduce using rule 15 (statement -> declaration NEWLINE .)
    DECIMAL         reduce using rule 15 (statement -> declaration NEWLINE .)
    EXIT            reduce using rule 15 (statement -> declaration NEWLINE .)
    WOOD            reduce using rule 15 (statement -> declaration NEWLINE .)
    STEEL           reduce using rule 15 (statement -> declaration NEWLINE .)
    GLASS           reduce using rule 15 (statement -> declaration NEWLINE .)
    CONCRETE        reduce using rule 15 (statement -> declaration NEWLINE .)
    PLASTIC         reduce using rule 15 (statement -> declaration NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 15 (statement -> declaration NEWLINE .)
    QUOTE           reduce using rule 15 (statement -> declaration NEWLINE .)
    MINUS           reduce using rule 15 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 15 (statement -> declaration NEWLINE .)
    $end            reduce using rule 15 (statement -> declaration NEWLINE .)
    END             reduce using rule 15 (statement -> declaration NEWLINE .)


state 59

    (16) statement -> comment NEWLINE .

    RETURN          reduce using rule 16 (statement -> comment NEWLINE .)
    COMMENT         reduce using rule 16 (statement -> comment NEWLINE .)
    DO              reduce using rule 16 (statement -> comment NEWLINE .)
    IF              reduce using rule 16 (statement -> comment NEWLINE .)
    FUNCTION        reduce using rule 16 (statement -> comment NEWLINE .)
    VARIABLE        reduce using rule 16 (statement -> comment NEWLINE .)
    error           reduce using rule 16 (statement -> comment NEWLINE .)
    INTEGER         reduce using rule 16 (statement -> comment NEWLINE .)
    STRING          reduce using rule 16 (statement -> comment NEWLINE .)
    BOOL            reduce using rule 16 (statement -> comment NEWLINE .)
    VECTOR          reduce using rule 16 (statement -> comment NEWLINE .)
    LEFT            reduce using rule 16 (statement -> comment NEWLINE .)
    RIGHT           reduce using rule 16 (statement -> comment NEWLINE .)
    FORWARD         reduce using rule 16 (statement -> comment NEWLINE .)
    BACK            reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_LEFT     reduce using rule 16 (statement -> comment NEWLINE .)
    LMS             reduce using rule 16 (statement -> comment NEWLINE .)
    REFLECT         reduce using rule 16 (statement -> comment NEWLINE .)
    DRILL           reduce using rule 16 (statement -> comment NEWLINE .)
    TRUE            reduce using rule 16 (statement -> comment NEWLINE .)
    FALSE           reduce using rule 16 (statement -> comment NEWLINE .)
    UNDEFINED       reduce using rule 16 (statement -> comment NEWLINE .)
    DECIMAL         reduce using rule 16 (statement -> comment NEWLINE .)
    EXIT            reduce using rule 16 (statement -> comment NEWLINE .)
    WOOD            reduce using rule 16 (statement -> comment NEWLINE .)
    STEEL           reduce using rule 16 (statement -> comment NEWLINE .)
    GLASS           reduce using rule 16 (statement -> comment NEWLINE .)
    CONCRETE        reduce using rule 16 (statement -> comment NEWLINE .)
    PLASTIC         reduce using rule 16 (statement -> comment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 16 (statement -> comment NEWLINE .)
    QUOTE           reduce using rule 16 (statement -> comment NEWLINE .)
    MINUS           reduce using rule 16 (statement -> comment NEWLINE .)
    NEWLINE         reduce using rule 16 (statement -> comment NEWLINE .)
    $end            reduce using rule 16 (statement -> comment NEWLINE .)
    END             reduce using rule 16 (statement -> comment NEWLINE .)


state 60

    (17) statement -> assignment NEWLINE .

    RETURN          reduce using rule 17 (statement -> assignment NEWLINE .)
    COMMENT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DO              reduce using rule 17 (statement -> assignment NEWLINE .)
    IF              reduce using rule 17 (statement -> assignment NEWLINE .)
    FUNCTION        reduce using rule 17 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 17 (statement -> assignment NEWLINE .)
    error           reduce using rule 17 (statement -> assignment NEWLINE .)
    INTEGER         reduce using rule 17 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 17 (statement -> assignment NEWLINE .)
    BOOL            reduce using rule 17 (statement -> assignment NEWLINE .)
    VECTOR          reduce using rule 17 (statement -> assignment NEWLINE .)
    LEFT            reduce using rule 17 (statement -> assignment NEWLINE .)
    RIGHT           reduce using rule 17 (statement -> assignment NEWLINE .)
    FORWARD         reduce using rule 17 (statement -> assignment NEWLINE .)
    BACK            reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_LEFT     reduce using rule 17 (statement -> assignment NEWLINE .)
    LMS             reduce using rule 17 (statement -> assignment NEWLINE .)
    REFLECT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DRILL           reduce using rule 17 (statement -> assignment NEWLINE .)
    TRUE            reduce using rule 17 (statement -> assignment NEWLINE .)
    FALSE           reduce using rule 17 (statement -> assignment NEWLINE .)
    UNDEFINED       reduce using rule 17 (statement -> assignment NEWLINE .)
    DECIMAL         reduce using rule 17 (statement -> assignment NEWLINE .)
    EXIT            reduce using rule 17 (statement -> assignment NEWLINE .)
    WOOD            reduce using rule 17 (statement -> assignment NEWLINE .)
    STEEL           reduce using rule 17 (statement -> assignment NEWLINE .)
    GLASS           reduce using rule 17 (statement -> assignment NEWLINE .)
    CONCRETE        reduce using rule 17 (statement -> assignment NEWLINE .)
    PLASTIC         reduce using rule 17 (statement -> assignment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 17 (statement -> assignment NEWLINE .)
    QUOTE           reduce using rule 17 (statement -> assignment NEWLINE .)
    MINUS           reduce using rule 17 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 17 (statement -> assignment NEWLINE .)
    $end            reduce using rule 17 (statement -> assignment NEWLINE .)
    END             reduce using rule 17 (statement -> assignment NEWLINE .)


state 61

    (18) statement -> while NEWLINE .

    RETURN          reduce using rule 18 (statement -> while NEWLINE .)
    COMMENT         reduce using rule 18 (statement -> while NEWLINE .)
    DO              reduce using rule 18 (statement -> while NEWLINE .)
    IF              reduce using rule 18 (statement -> while NEWLINE .)
    FUNCTION        reduce using rule 18 (statement -> while NEWLINE .)
    VARIABLE        reduce using rule 18 (statement -> while NEWLINE .)
    error           reduce using rule 18 (statement -> while NEWLINE .)
    INTEGER         reduce using rule 18 (statement -> while NEWLINE .)
    STRING          reduce using rule 18 (statement -> while NEWLINE .)
    BOOL            reduce using rule 18 (statement -> while NEWLINE .)
    VECTOR          reduce using rule 18 (statement -> while NEWLINE .)
    LEFT            reduce using rule 18 (statement -> while NEWLINE .)
    RIGHT           reduce using rule 18 (statement -> while NEWLINE .)
    FORWARD         reduce using rule 18 (statement -> while NEWLINE .)
    BACK            reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_RIGHT    reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_LEFT     reduce using rule 18 (statement -> while NEWLINE .)
    LMS             reduce using rule 18 (statement -> while NEWLINE .)
    REFLECT         reduce using rule 18 (statement -> while NEWLINE .)
    DRILL           reduce using rule 18 (statement -> while NEWLINE .)
    TRUE            reduce using rule 18 (statement -> while NEWLINE .)
    FALSE           reduce using rule 18 (statement -> while NEWLINE .)
    UNDEFINED       reduce using rule 18 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 18 (statement -> while NEWLINE .)
    EXIT            reduce using rule 18 (statement -> while NEWLINE .)
    WOOD            reduce using rule 18 (statement -> while NEWLINE .)
    STEEL           reduce using rule 18 (statement -> while NEWLINE .)
    GLASS           reduce using rule 18 (statement -> while NEWLINE .)
    CONCRETE        reduce using rule 18 (statement -> while NEWLINE .)
    PLASTIC         reduce using rule 18 (statement -> while NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 18 (statement -> while NEWLINE .)
    QUOTE           reduce using rule 18 (statement -> while NEWLINE .)
    MINUS           reduce using rule 18 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 18 (statement -> while NEWLINE .)
    $end            reduce using rule 18 (statement -> while NEWLINE .)
    END             reduce using rule 18 (statement -> while NEWLINE .)


state 62

    (19) statement -> if NEWLINE .

    RETURN          reduce using rule 19 (statement -> if NEWLINE .)
    COMMENT         reduce using rule 19 (statement -> if NEWLINE .)
    DO              reduce using rule 19 (statement -> if NEWLINE .)
    IF              reduce using rule 19 (statement -> if NEWLINE .)
    FUNCTION        reduce using rule 19 (statement -> if NEWLINE .)
    VARIABLE        reduce using rule 19 (statement -> if NEWLINE .)
    error           reduce using rule 19 (statement -> if NEWLINE .)
    INTEGER         reduce using rule 19 (statement -> if NEWLINE .)
    STRING          reduce using rule 19 (statement -> if NEWLINE .)
    BOOL            reduce using rule 19 (statement -> if NEWLINE .)
    VECTOR          reduce using rule 19 (statement -> if NEWLINE .)
    LEFT            reduce using rule 19 (statement -> if NEWLINE .)
    RIGHT           reduce using rule 19 (statement -> if NEWLINE .)
    FORWARD         reduce using rule 19 (statement -> if NEWLINE .)
    BACK            reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_RIGHT    reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_LEFT     reduce using rule 19 (statement -> if NEWLINE .)
    LMS             reduce using rule 19 (statement -> if NEWLINE .)
    REFLECT         reduce using rule 19 (statement -> if NEWLINE .)
    DRILL           reduce using rule 19 (statement -> if NEWLINE .)
    TRUE            reduce using rule 19 (statement -> if NEWLINE .)
    FALSE           reduce using rule 19 (statement -> if NEWLINE .)
    UNDEFINED       reduce using rule 19 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 19 (statement -> if NEWLINE .)
    EXIT            reduce using rule 19 (statement -> if NEWLINE .)
    WOOD            reduce using rule 19 (statement -> if NEWLINE .)
    STEEL           reduce using rule 19 (statement -> if NEWLINE .)
    GLASS           reduce using rule 19 (statement -> if NEWLINE .)
    CONCRETE        reduce using rule 19 (statement -> if NEWLINE .)
    PLASTIC         reduce using rule 19 (statement -> if NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 19 (statement -> if NEWLINE .)
    QUOTE           reduce using rule 19 (statement -> if NEWLINE .)
    MINUS           reduce using rule 19 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 19 (statement -> if NEWLINE .)
    $end            reduce using rule 19 (statement -> if NEWLINE .)
    END             reduce using rule 19 (statement -> if NEWLINE .)


state 63

    (20) statement -> command NEWLINE .

    RETURN          reduce using rule 20 (statement -> command NEWLINE .)
    COMMENT         reduce using rule 20 (statement -> command NEWLINE .)
    DO              reduce using rule 20 (statement -> command NEWLINE .)
    IF              reduce using rule 20 (statement -> command NEWLINE .)
    FUNCTION        reduce using rule 20 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 20 (statement -> command NEWLINE .)
    error           reduce using rule 20 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 20 (statement -> command NEWLINE .)
    STRING          reduce using rule 20 (statement -> command NEWLINE .)
    BOOL            reduce using rule 20 (statement -> command NEWLINE .)
    VECTOR          reduce using rule 20 (statement -> command NEWLINE .)
    LEFT            reduce using rule 20 (statement -> command NEWLINE .)
    RIGHT           reduce using rule 20 (statement -> command NEWLINE .)
    FORWARD         reduce using rule 20 (statement -> command NEWLINE .)
    BACK            reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_RIGHT    reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_LEFT     reduce using rule 20 (statement -> command NEWLINE .)
    LMS             reduce using rule 20 (statement -> command NEWLINE .)
    REFLECT         reduce using rule 20 (statement -> command NEWLINE .)
    DRILL           reduce using rule 20 (statement -> command NEWLINE .)
    TRUE            reduce using rule 20 (statement -> command NEWLINE .)
    FALSE           reduce using rule 20 (statement -> command NEWLINE .)
    UNDEFINED       reduce using rule 20 (statement -> command NEWLINE .)
    DECIMAL         reduce using rule 20 (statement -> command NEWLINE .)
    EXIT            reduce using rule 20 (statement -> command NEWLINE .)
    WOOD            reduce using rule 20 (statement -> command NEWLINE .)
    STEEL           reduce using rule 20 (statement -> command NEWLINE .)
    GLASS           reduce using rule 20 (statement -> command NEWLINE .)
    CONCRETE        reduce using rule 20 (statement -> command NEWLINE .)
    PLASTIC         reduce using rule 20 (statement -> command NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 20 (statement -> command NEWLINE .)
    QUOTE           reduce using rule 20 (statement -> command NEWLINE .)
    MINUS           reduce using rule 20 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 20 (statement -> command NEWLINE .)
    $end            reduce using rule 20 (statement -> command NEWLINE .)
    END             reduce using rule 20 (statement -> command NEWLINE .)


state 64

    (21) statement -> function NEWLINE .

    RETURN          reduce using rule 21 (statement -> function NEWLINE .)
    COMMENT         reduce using rule 21 (statement -> function NEWLINE .)
    DO              reduce using rule 21 (statement -> function NEWLINE .)
    IF              reduce using rule 21 (statement -> function NEWLINE .)
    FUNCTION        reduce using rule 21 (statement -> function NEWLINE .)
    VARIABLE        reduce using rule 21 (statement -> function NEWLINE .)
    error           reduce using rule 21 (statement -> function NEWLINE .)
    INTEGER         reduce using rule 21 (statement -> function NEWLINE .)
    STRING          reduce using rule 21 (statement -> function NEWLINE .)
    BOOL            reduce using rule 21 (statement -> function NEWLINE .)
    VECTOR          reduce using rule 21 (statement -> function NEWLINE .)
    LEFT            reduce using rule 21 (statement -> function NEWLINE .)
    RIGHT           reduce using rule 21 (statement -> function NEWLINE .)
    FORWARD         reduce using rule 21 (statement -> function NEWLINE .)
    BACK            reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_RIGHT    reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_LEFT     reduce using rule 21 (statement -> function NEWLINE .)
    LMS             reduce using rule 21 (statement -> function NEWLINE .)
    REFLECT         reduce using rule 21 (statement -> function NEWLINE .)
    DRILL           reduce using rule 21 (statement -> function NEWLINE .)
    TRUE            reduce using rule 21 (statement -> function NEWLINE .)
    FALSE           reduce using rule 21 (statement -> function NEWLINE .)
    UNDEFINED       reduce using rule 21 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 21 (statement -> function NEWLINE .)
    EXIT            reduce using rule 21 (statement -> function NEWLINE .)
    WOOD            reduce using rule 21 (statement -> function NEWLINE .)
    STEEL           reduce using rule 21 (statement -> function NEWLINE .)
    GLASS           reduce using rule 21 (statement -> function NEWLINE .)
    CONCRETE        reduce using rule 21 (statement -> function NEWLINE .)
    PLASTIC         reduce using rule 21 (statement -> function NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 21 (statement -> function NEWLINE .)
    QUOTE           reduce using rule 21 (statement -> function NEWLINE .)
    MINUS           reduce using rule 21 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 21 (statement -> function NEWLINE .)
    $end            reduce using rule 21 (statement -> function NEWLINE .)
    END             reduce using rule 21 (statement -> function NEWLINE .)


state 65

    (22) statement -> call NEWLINE .

    RETURN          reduce using rule 22 (statement -> call NEWLINE .)
    COMMENT         reduce using rule 22 (statement -> call NEWLINE .)
    DO              reduce using rule 22 (statement -> call NEWLINE .)
    IF              reduce using rule 22 (statement -> call NEWLINE .)
    FUNCTION        reduce using rule 22 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 22 (statement -> call NEWLINE .)
    error           reduce using rule 22 (statement -> call NEWLINE .)
    INTEGER         reduce using rule 22 (statement -> call NEWLINE .)
    STRING          reduce using rule 22 (statement -> call NEWLINE .)
    BOOL            reduce using rule 22 (statement -> call NEWLINE .)
    VECTOR          reduce using rule 22 (statement -> call NEWLINE .)
    LEFT            reduce using rule 22 (statement -> call NEWLINE .)
    RIGHT           reduce using rule 22 (statement -> call NEWLINE .)
    FORWARD         reduce using rule 22 (statement -> call NEWLINE .)
    BACK            reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_RIGHT    reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_LEFT     reduce using rule 22 (statement -> call NEWLINE .)
    LMS             reduce using rule 22 (statement -> call NEWLINE .)
    REFLECT         reduce using rule 22 (statement -> call NEWLINE .)
    DRILL           reduce using rule 22 (statement -> call NEWLINE .)
    TRUE            reduce using rule 22 (statement -> call NEWLINE .)
    FALSE           reduce using rule 22 (statement -> call NEWLINE .)
    UNDEFINED       reduce using rule 22 (statement -> call NEWLINE .)
    DECIMAL         reduce using rule 22 (statement -> call NEWLINE .)
    EXIT            reduce using rule 22 (statement -> call NEWLINE .)
    WOOD            reduce using rule 22 (statement -> call NEWLINE .)
    STEEL           reduce using rule 22 (statement -> call NEWLINE .)
    GLASS           reduce using rule 22 (statement -> call NEWLINE .)
    CONCRETE        reduce using rule 22 (statement -> call NEWLINE .)
    PLASTIC         reduce using rule 22 (statement -> call NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 22 (statement -> call NEWLINE .)
    QUOTE           reduce using rule 22 (statement -> call NEWLINE .)
    MINUS           reduce using rule 22 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 22 (statement -> call NEWLINE .)
    $end            reduce using rule 22 (statement -> call NEWLINE .)
    END             reduce using rule 22 (statement -> call NEWLINE .)


state 66

    (23) statement -> RETURN expression . NEWLINE
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    NEWLINE         shift and go to state 113
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 67

    (43) expression -> variable .
    (83) vector_pop -> variable . POP BACK
    (84) vector_pop -> variable . POP FRONT

    NEWLINE         reduce using rule 43 (expression -> variable .)
    PLUS            reduce using rule 43 (expression -> variable .)
    MINUS           reduce using rule 43 (expression -> variable .)
    LESS            reduce using rule 43 (expression -> variable .)
    GREATER         reduce using rule 43 (expression -> variable .)
    EQ              reduce using rule 43 (expression -> variable .)
    NOTEQ           reduce using rule 43 (expression -> variable .)
    THEN            reduce using rule 43 (expression -> variable .)
    TO              reduce using rule 43 (expression -> variable .)
    UNTIL           reduce using rule 43 (expression -> variable .)
    ELSE            reduce using rule 43 (expression -> variable .)
    COMMA           reduce using rule 43 (expression -> variable .)
    RBRACKET        reduce using rule 43 (expression -> variable .)
    CONTINUE        reduce using rule 43 (expression -> variable .)
    R_QBRACKET      reduce using rule 43 (expression -> variable .)
    POP             shift and go to state 89


state 68

    (47) expression -> robot_command .

    NEWLINE         reduce using rule 47 (expression -> robot_command .)
    PLUS            reduce using rule 47 (expression -> robot_command .)
    MINUS           reduce using rule 47 (expression -> robot_command .)
    LESS            reduce using rule 47 (expression -> robot_command .)
    GREATER         reduce using rule 47 (expression -> robot_command .)
    EQ              reduce using rule 47 (expression -> robot_command .)
    NOTEQ           reduce using rule 47 (expression -> robot_command .)
    THEN            reduce using rule 47 (expression -> robot_command .)
    TO              reduce using rule 47 (expression -> robot_command .)
    UNTIL           reduce using rule 47 (expression -> robot_command .)
    ELSE            reduce using rule 47 (expression -> robot_command .)
    COMMA           reduce using rule 47 (expression -> robot_command .)
    RBRACKET        reduce using rule 47 (expression -> robot_command .)
    CONTINUE        reduce using rule 47 (expression -> robot_command .)
    R_QBRACKET      reduce using rule 47 (expression -> robot_command .)


state 69

    (49) expression -> call .

    NEWLINE         reduce using rule 49 (expression -> call .)
    PLUS            reduce using rule 49 (expression -> call .)
    MINUS           reduce using rule 49 (expression -> call .)
    LESS            reduce using rule 49 (expression -> call .)
    GREATER         reduce using rule 49 (expression -> call .)
    EQ              reduce using rule 49 (expression -> call .)
    NOTEQ           reduce using rule 49 (expression -> call .)
    THEN            reduce using rule 49 (expression -> call .)
    TO              reduce using rule 49 (expression -> call .)
    UNTIL           reduce using rule 49 (expression -> call .)
    ELSE            reduce using rule 49 (expression -> call .)
    COMMA           reduce using rule 49 (expression -> call .)
    RBRACKET        reduce using rule 49 (expression -> call .)
    CONTINUE        reduce using rule 49 (expression -> call .)
    R_QBRACKET      reduce using rule 49 (expression -> call .)


state 70

    (41) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (42) variable -> VARIABLE .
    (94) call -> VARIABLE . LBRACKET parameters RBRACKET
    (95) call -> VARIABLE . BRACKETS

    L_QBRACKET      shift and go to state 107
    POP             reduce using rule 42 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 42 (variable -> VARIABLE .)
    PLUS            reduce using rule 42 (variable -> VARIABLE .)
    MINUS           reduce using rule 42 (variable -> VARIABLE .)
    LESS            reduce using rule 42 (variable -> VARIABLE .)
    GREATER         reduce using rule 42 (variable -> VARIABLE .)
    EQ              reduce using rule 42 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 42 (variable -> VARIABLE .)
    THEN            reduce using rule 42 (variable -> VARIABLE .)
    TO              reduce using rule 42 (variable -> VARIABLE .)
    UNTIL           reduce using rule 42 (variable -> VARIABLE .)
    ELSE            reduce using rule 42 (variable -> VARIABLE .)
    COMMA           reduce using rule 42 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 42 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 42 (variable -> VARIABLE .)
    R_QBRACKET      reduce using rule 42 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 105
    BRACKETS        shift and go to state 106


state 71

    (79) converting_command -> expression TO . type
    (80) converting_command -> expression TO . expression
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (102) errors -> . errors error
    (103) errors -> . error
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    error           shift and go to state 26
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 114
    type                           shift and go to state 115
    errors                         shift and go to state 102
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 72

    (64) math_expression -> expression PLUS . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 116
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 73

    (65) math_expression -> expression MINUS . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 117
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 74

    (67) math_expression -> expression LESS . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 118
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 75

    (68) math_expression -> expression GREATER . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 119
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 76

    (69) math_expression -> expression EQ . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 120
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 77

    (70) math_expression -> expression NOTEQ . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 121
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 78

    (24) statement -> empty NEWLINE .

    RETURN          reduce using rule 24 (statement -> empty NEWLINE .)
    COMMENT         reduce using rule 24 (statement -> empty NEWLINE .)
    DO              reduce using rule 24 (statement -> empty NEWLINE .)
    IF              reduce using rule 24 (statement -> empty NEWLINE .)
    FUNCTION        reduce using rule 24 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 24 (statement -> empty NEWLINE .)
    error           reduce using rule 24 (statement -> empty NEWLINE .)
    INTEGER         reduce using rule 24 (statement -> empty NEWLINE .)
    STRING          reduce using rule 24 (statement -> empty NEWLINE .)
    BOOL            reduce using rule 24 (statement -> empty NEWLINE .)
    VECTOR          reduce using rule 24 (statement -> empty NEWLINE .)
    LEFT            reduce using rule 24 (statement -> empty NEWLINE .)
    RIGHT           reduce using rule 24 (statement -> empty NEWLINE .)
    FORWARD         reduce using rule 24 (statement -> empty NEWLINE .)
    BACK            reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_RIGHT    reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_LEFT     reduce using rule 24 (statement -> empty NEWLINE .)
    LMS             reduce using rule 24 (statement -> empty NEWLINE .)
    REFLECT         reduce using rule 24 (statement -> empty NEWLINE .)
    DRILL           reduce using rule 24 (statement -> empty NEWLINE .)
    TRUE            reduce using rule 24 (statement -> empty NEWLINE .)
    FALSE           reduce using rule 24 (statement -> empty NEWLINE .)
    UNDEFINED       reduce using rule 24 (statement -> empty NEWLINE .)
    DECIMAL         reduce using rule 24 (statement -> empty NEWLINE .)
    EXIT            reduce using rule 24 (statement -> empty NEWLINE .)
    WOOD            reduce using rule 24 (statement -> empty NEWLINE .)
    STEEL           reduce using rule 24 (statement -> empty NEWLINE .)
    GLASS           reduce using rule 24 (statement -> empty NEWLINE .)
    CONCRETE        reduce using rule 24 (statement -> empty NEWLINE .)
    PLASTIC         reduce using rule 24 (statement -> empty NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 24 (statement -> empty NEWLINE .)
    QUOTE           reduce using rule 24 (statement -> empty NEWLINE .)
    MINUS           reduce using rule 24 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 24 (statement -> empty NEWLINE .)
    $end            reduce using rule 24 (statement -> empty NEWLINE .)
    END             reduce using rule 24 (statement -> empty NEWLINE .)


state 79

    (25) statement -> errors NEWLINE .

    RETURN          reduce using rule 25 (statement -> errors NEWLINE .)
    COMMENT         reduce using rule 25 (statement -> errors NEWLINE .)
    DO              reduce using rule 25 (statement -> errors NEWLINE .)
    IF              reduce using rule 25 (statement -> errors NEWLINE .)
    FUNCTION        reduce using rule 25 (statement -> errors NEWLINE .)
    VARIABLE        reduce using rule 25 (statement -> errors NEWLINE .)
    error           reduce using rule 25 (statement -> errors NEWLINE .)
    INTEGER         reduce using rule 25 (statement -> errors NEWLINE .)
    STRING          reduce using rule 25 (statement -> errors NEWLINE .)
    BOOL            reduce using rule 25 (statement -> errors NEWLINE .)
    VECTOR          reduce using rule 25 (statement -> errors NEWLINE .)
    LEFT            reduce using rule 25 (statement -> errors NEWLINE .)
    RIGHT           reduce using rule 25 (statement -> errors NEWLINE .)
    FORWARD         reduce using rule 25 (statement -> errors NEWLINE .)
    BACK            reduce using rule 25 (statement -> errors NEWLINE .)
    ROTATE_RIGHT    reduce using rule 25 (statement -> errors NEWLINE .)
    ROTATE_LEFT     reduce using rule 25 (statement -> errors NEWLINE .)
    LMS             reduce using rule 25 (statement -> errors NEWLINE .)
    REFLECT         reduce using rule 25 (statement -> errors NEWLINE .)
    DRILL           reduce using rule 25 (statement -> errors NEWLINE .)
    TRUE            reduce using rule 25 (statement -> errors NEWLINE .)
    FALSE           reduce using rule 25 (statement -> errors NEWLINE .)
    UNDEFINED       reduce using rule 25 (statement -> errors NEWLINE .)
    DECIMAL         reduce using rule 25 (statement -> errors NEWLINE .)
    EXIT            reduce using rule 25 (statement -> errors NEWLINE .)
    WOOD            reduce using rule 25 (statement -> errors NEWLINE .)
    STEEL           reduce using rule 25 (statement -> errors NEWLINE .)
    GLASS           reduce using rule 25 (statement -> errors NEWLINE .)
    CONCRETE        reduce using rule 25 (statement -> errors NEWLINE .)
    PLASTIC         reduce using rule 25 (statement -> errors NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 25 (statement -> errors NEWLINE .)
    QUOTE           reduce using rule 25 (statement -> errors NEWLINE .)
    MINUS           reduce using rule 25 (statement -> errors NEWLINE .)
    NEWLINE         reduce using rule 25 (statement -> errors NEWLINE .)
    $end            reduce using rule 25 (statement -> errors NEWLINE .)
    END             reduce using rule 25 (statement -> errors NEWLINE .)


state 80

    (102) errors -> errors error .

    NEWLINE         reduce using rule 102 (errors -> errors error .)
    error           reduce using rule 102 (errors -> errors error .)
    RETURN          reduce using rule 102 (errors -> errors error .)
    COMMENT         reduce using rule 102 (errors -> errors error .)
    DO              reduce using rule 102 (errors -> errors error .)
    IF              reduce using rule 102 (errors -> errors error .)
    FUNCTION        reduce using rule 102 (errors -> errors error .)
    VARIABLE        reduce using rule 102 (errors -> errors error .)
    INTEGER         reduce using rule 102 (errors -> errors error .)
    STRING          reduce using rule 102 (errors -> errors error .)
    BOOL            reduce using rule 102 (errors -> errors error .)
    VECTOR          reduce using rule 102 (errors -> errors error .)
    LEFT            reduce using rule 102 (errors -> errors error .)
    RIGHT           reduce using rule 102 (errors -> errors error .)
    FORWARD         reduce using rule 102 (errors -> errors error .)
    BACK            reduce using rule 102 (errors -> errors error .)
    ROTATE_RIGHT    reduce using rule 102 (errors -> errors error .)
    ROTATE_LEFT     reduce using rule 102 (errors -> errors error .)
    LMS             reduce using rule 102 (errors -> errors error .)
    REFLECT         reduce using rule 102 (errors -> errors error .)
    DRILL           reduce using rule 102 (errors -> errors error .)
    TRUE            reduce using rule 102 (errors -> errors error .)
    FALSE           reduce using rule 102 (errors -> errors error .)
    UNDEFINED       reduce using rule 102 (errors -> errors error .)
    DECIMAL         reduce using rule 102 (errors -> errors error .)
    EXIT            reduce using rule 102 (errors -> errors error .)
    WOOD            reduce using rule 102 (errors -> errors error .)
    STEEL           reduce using rule 102 (errors -> errors error .)
    GLASS           reduce using rule 102 (errors -> errors error .)
    CONCRETE        reduce using rule 102 (errors -> errors error .)
    PLASTIC         reduce using rule 102 (errors -> errors error .)
    DOUBLE_QUOTE    reduce using rule 102 (errors -> errors error .)
    QUOTE           reduce using rule 102 (errors -> errors error .)
    MINUS           reduce using rule 102 (errors -> errors error .)
    $end            reduce using rule 102 (errors -> errors error .)
    UNTIL           reduce using rule 102 (errors -> errors error .)
    ELSE            reduce using rule 102 (errors -> errors error .)
    END             reduce using rule 102 (errors -> errors error .)


state 81

    (27) declaration -> type variables .

    NEWLINE         reduce using rule 27 (declaration -> type variables .)
    UNTIL           reduce using rule 27 (declaration -> type variables .)
    ELSE            reduce using rule 27 (declaration -> type variables .)


state 82

    (36) variables -> variable . COMMA variables
    (38) variables -> variable .
    (40) assignment -> variable . ASSIGNMENT expression

    COMMA           shift and go to state 122
    NEWLINE         reduce using rule 38 (variables -> variable .)
    UNTIL           reduce using rule 38 (variables -> variable .)
    ELSE            reduce using rule 38 (variables -> variable .)
    ASSIGNMENT      shift and go to state 87


state 83

    (37) variables -> assignment . COMMA variables
    (39) variables -> assignment .

    COMMA           shift and go to state 123
    NEWLINE         reduce using rule 39 (variables -> assignment .)
    UNTIL           reduce using rule 39 (variables -> assignment .)
    ELSE            reduce using rule 39 (variables -> assignment .)


state 84

    (41) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (42) variable -> VARIABLE .

    L_QBRACKET      shift and go to state 107
    COMMA           reduce using rule 42 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 42 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 42 (variable -> VARIABLE .)
    UNTIL           reduce using rule 42 (variable -> VARIABLE .)
    ELSE            reduce using rule 42 (variable -> VARIABLE .)


state 85

    (28) comment -> COMMENT any .
    (29) any -> any . VARIABLE

    NEWLINE         reduce using rule 28 (comment -> COMMENT any .)
    VARIABLE        shift and go to state 124


state 86

    (30) any -> VARIABLE .

    VARIABLE        reduce using rule 30 (any -> VARIABLE .)
    NEWLINE         reduce using rule 30 (any -> VARIABLE .)


state 87

    (40) assignment -> variable ASSIGNMENT . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    variable                       shift and go to state 67
    expression                     shift and go to state 125
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 88

    (81) vector_command -> variable PUSH . BACK expression
    (82) vector_command -> variable PUSH . FRONT expression

    BACK            shift and go to state 126
    FRONT           shift and go to state 127


state 89

    (83) vector_pop -> variable POP . BACK
    (84) vector_pop -> variable POP . FRONT

    BACK            shift and go to state 128
    FRONT           shift and go to state 129


state 90

    (71) while -> DO statements_group . UNTIL expression

    UNTIL           shift and go to state 130


state 91

    (2) statements_group -> BEGIN . statements END
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (102) errors -> . errors error
    (103) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 96 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    statements                     shift and go to state 131
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 92

    (3) statements_group -> inner_statement .

    UNTIL           reduce using rule 3 (statements_group -> inner_statement .)
    ELSE            reduce using rule 3 (statements_group -> inner_statement .)
    NEWLINE         reduce using rule 3 (statements_group -> inner_statement .)


state 93

    (4) inner_statement -> declaration .

    UNTIL           reduce using rule 4 (inner_statement -> declaration .)
    ELSE            reduce using rule 4 (inner_statement -> declaration .)
    NEWLINE         reduce using rule 4 (inner_statement -> declaration .)


state 94

    (5) inner_statement -> assignment .

    UNTIL           reduce using rule 5 (inner_statement -> assignment .)
    ELSE            reduce using rule 5 (inner_statement -> assignment .)
    NEWLINE         reduce using rule 5 (inner_statement -> assignment .)


state 95

    (6) inner_statement -> while .

    UNTIL           reduce using rule 6 (inner_statement -> while .)
    ELSE            reduce using rule 6 (inner_statement -> while .)
    NEWLINE         reduce using rule 6 (inner_statement -> while .)


state 96

    (7) inner_statement -> if .

    UNTIL           reduce using rule 7 (inner_statement -> if .)
    ELSE            reduce using rule 7 (inner_statement -> if .)
    NEWLINE         reduce using rule 7 (inner_statement -> if .)


state 97

    (8) inner_statement -> command .

    UNTIL           reduce using rule 8 (inner_statement -> command .)
    ELSE            reduce using rule 8 (inner_statement -> command .)
    NEWLINE         reduce using rule 8 (inner_statement -> command .)


state 98

    (9) inner_statement -> function .

    UNTIL           reduce using rule 9 (inner_statement -> function .)
    ELSE            reduce using rule 9 (inner_statement -> function .)
    NEWLINE         reduce using rule 9 (inner_statement -> function .)


state 99

    (10) inner_statement -> call .
    (49) expression -> call .

    UNTIL           reduce using rule 10 (inner_statement -> call .)
    ELSE            reduce using rule 10 (inner_statement -> call .)
    NEWLINE         reduce using rule 10 (inner_statement -> call .)
    TO              reduce using rule 49 (expression -> call .)
    PLUS            reduce using rule 49 (expression -> call .)
    MINUS           reduce using rule 49 (expression -> call .)
    LESS            reduce using rule 49 (expression -> call .)
    GREATER         reduce using rule 49 (expression -> call .)
    EQ              reduce using rule 49 (expression -> call .)
    NOTEQ           reduce using rule 49 (expression -> call .)


state 100

    (11) inner_statement -> RETURN . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 132
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 101

    (12) inner_statement -> empty .

    UNTIL           reduce using rule 12 (inner_statement -> empty .)
    ELSE            reduce using rule 12 (inner_statement -> empty .)
    NEWLINE         reduce using rule 12 (inner_statement -> empty .)


state 102

    (35) type -> errors .
    (102) errors -> errors . error

    VARIABLE        reduce using rule 35 (type -> errors .)
    NEWLINE         reduce using rule 35 (type -> errors .)
    UNTIL           reduce using rule 35 (type -> errors .)
    ELSE            reduce using rule 35 (type -> errors .)
    error           shift and go to state 80


state 103

    (72) if -> IF expression . THEN statements_group
    (73) if -> IF expression . THEN statements_group ELSE statements_group
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    THEN            shift and go to state 133
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 104

    (74) function -> FUNCTION OF . type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> FUNCTION OF . type VARIABLE BRACKETS statements_group
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (102) errors -> . errors error
    (103) errors -> . error

    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    error           shift and go to state 26

    type                           shift and go to state 134
    errors                         shift and go to state 102

state 105

    (94) call -> VARIABLE LBRACKET . parameters RBRACKET
    (97) parameters -> . parameters COMMA parameter
    (98) parameters -> . parameter
    (99) parameters -> . parameters CONTINUE
    (100) parameter -> . expression
    (101) parameter -> . VARIABLE EQ expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 135
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    parameters                     shift and go to state 136
    parameter                      shift and go to state 137
    expression                     shift and go to state 138
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 106

    (95) call -> VARIABLE BRACKETS .

    NEWLINE         reduce using rule 95 (call -> VARIABLE BRACKETS .)
    TO              reduce using rule 95 (call -> VARIABLE BRACKETS .)
    PLUS            reduce using rule 95 (call -> VARIABLE BRACKETS .)
    MINUS           reduce using rule 95 (call -> VARIABLE BRACKETS .)
    LESS            reduce using rule 95 (call -> VARIABLE BRACKETS .)
    GREATER         reduce using rule 95 (call -> VARIABLE BRACKETS .)
    EQ              reduce using rule 95 (call -> VARIABLE BRACKETS .)
    NOTEQ           reduce using rule 95 (call -> VARIABLE BRACKETS .)
    UNTIL           reduce using rule 95 (call -> VARIABLE BRACKETS .)
    THEN            reduce using rule 95 (call -> VARIABLE BRACKETS .)
    ELSE            reduce using rule 95 (call -> VARIABLE BRACKETS .)
    COMMA           reduce using rule 95 (call -> VARIABLE BRACKETS .)
    RBRACKET        reduce using rule 95 (call -> VARIABLE BRACKETS .)
    CONTINUE        reduce using rule 95 (call -> VARIABLE BRACKETS .)
    R_QBRACKET      reduce using rule 95 (call -> VARIABLE BRACKETS .)


state 107

    (41) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 139
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 108

    (34) type -> VECTOR OF . type
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (102) errors -> . errors error
    (103) errors -> . error

    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    error           shift and go to state 26

    type                           shift and go to state 140
    errors                         shift and go to state 102

state 109

    (50) qstring -> DOUBLE_QUOTE string . DOUBLE_QUOTE
    (52) string -> string . VARIABLE

    DOUBLE_QUOTE    shift and go to state 141
    VARIABLE        shift and go to state 142


state 110

    (53) string -> VARIABLE .

    DOUBLE_QUOTE    reduce using rule 53 (string -> VARIABLE .)
    VARIABLE        reduce using rule 53 (string -> VARIABLE .)
    QUOTE           reduce using rule 53 (string -> VARIABLE .)


state 111

    (51) qstring -> QUOTE string . QUOTE
    (52) string -> string . VARIABLE

    QUOTE           shift and go to state 143
    VARIABLE        shift and go to state 142


state 112

    (66) math_expression -> MINUS expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 66 (math_expression -> MINUS expression .)
    NEWLINE         reduce using rule 66 (math_expression -> MINUS expression .)
    THEN            reduce using rule 66 (math_expression -> MINUS expression .)
    UNTIL           reduce using rule 66 (math_expression -> MINUS expression .)
    ELSE            reduce using rule 66 (math_expression -> MINUS expression .)
    COMMA           reduce using rule 66 (math_expression -> MINUS expression .)
    RBRACKET        reduce using rule 66 (math_expression -> MINUS expression .)
    CONTINUE        reduce using rule 66 (math_expression -> MINUS expression .)
    R_QBRACKET      reduce using rule 66 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77

  ! PLUS            [ reduce using rule 66 (math_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 66 (math_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 66 (math_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 66 (math_expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 66 (math_expression -> MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 66 (math_expression -> MINUS expression .) ]


state 113

    (23) statement -> RETURN expression NEWLINE .

    RETURN          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    COMMENT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DO              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    IF              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FUNCTION        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VARIABLE        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    error           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    INTEGER         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    STRING          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BOOL            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VECTOR          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LEFT            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    RIGHT           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FORWARD         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BACK            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_RIGHT    reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_LEFT     reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LMS             reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    REFLECT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DRILL           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    TRUE            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FALSE           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    UNDEFINED       reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DECIMAL         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    EXIT            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    WOOD            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    STEEL           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    GLASS           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    CONCRETE        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    PLASTIC         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    QUOTE           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    MINUS           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    NEWLINE         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    END             reduce using rule 23 (statement -> RETURN expression NEWLINE .)


state 114

    (80) converting_command -> expression TO expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 80 (converting_command -> expression TO expression .)
    UNTIL           reduce using rule 80 (converting_command -> expression TO expression .)
    ELSE            reduce using rule 80 (converting_command -> expression TO expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 115

    (79) converting_command -> expression TO type .

    NEWLINE         reduce using rule 79 (converting_command -> expression TO type .)
    UNTIL           reduce using rule 79 (converting_command -> expression TO type .)
    ELSE            reduce using rule 79 (converting_command -> expression TO type .)


state 116

    (64) math_expression -> expression PLUS expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 64 (math_expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 64 (math_expression -> expression PLUS expression .)
    THEN            reduce using rule 64 (math_expression -> expression PLUS expression .)
    UNTIL           reduce using rule 64 (math_expression -> expression PLUS expression .)
    ELSE            reduce using rule 64 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 64 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 64 (math_expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 64 (math_expression -> expression PLUS expression .)
    R_QBRACKET      reduce using rule 64 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77

  ! PLUS            [ reduce using rule 64 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 64 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 64 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 64 (math_expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 64 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 64 (math_expression -> expression PLUS expression .) ]


state 117

    (65) math_expression -> expression MINUS expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 65 (math_expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 65 (math_expression -> expression MINUS expression .)
    THEN            reduce using rule 65 (math_expression -> expression MINUS expression .)
    UNTIL           reduce using rule 65 (math_expression -> expression MINUS expression .)
    ELSE            reduce using rule 65 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 65 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 65 (math_expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 65 (math_expression -> expression MINUS expression .)
    R_QBRACKET      reduce using rule 65 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77

  ! PLUS            [ reduce using rule 65 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 65 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 65 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 65 (math_expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 65 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 65 (math_expression -> expression MINUS expression .) ]


state 118

    (67) math_expression -> expression LESS expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 67 (math_expression -> expression LESS expression .)
    NEWLINE         reduce using rule 67 (math_expression -> expression LESS expression .)
    THEN            reduce using rule 67 (math_expression -> expression LESS expression .)
    UNTIL           reduce using rule 67 (math_expression -> expression LESS expression .)
    ELSE            reduce using rule 67 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 67 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 67 (math_expression -> expression LESS expression .)
    CONTINUE        reduce using rule 67 (math_expression -> expression LESS expression .)
    R_QBRACKET      reduce using rule 67 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77

  ! PLUS            [ reduce using rule 67 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 67 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 67 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 67 (math_expression -> expression LESS expression .) ]
  ! EQ              [ reduce using rule 67 (math_expression -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 67 (math_expression -> expression LESS expression .) ]


state 119

    (68) math_expression -> expression GREATER expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 68 (math_expression -> expression GREATER expression .)
    NEWLINE         reduce using rule 68 (math_expression -> expression GREATER expression .)
    THEN            reduce using rule 68 (math_expression -> expression GREATER expression .)
    UNTIL           reduce using rule 68 (math_expression -> expression GREATER expression .)
    ELSE            reduce using rule 68 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 68 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 68 (math_expression -> expression GREATER expression .)
    CONTINUE        reduce using rule 68 (math_expression -> expression GREATER expression .)
    R_QBRACKET      reduce using rule 68 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77

  ! PLUS            [ reduce using rule 68 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 68 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 68 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 68 (math_expression -> expression GREATER expression .) ]
  ! EQ              [ reduce using rule 68 (math_expression -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 68 (math_expression -> expression GREATER expression .) ]


state 120

    (69) math_expression -> expression EQ expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 69 (math_expression -> expression EQ expression .)
    NEWLINE         reduce using rule 69 (math_expression -> expression EQ expression .)
    THEN            reduce using rule 69 (math_expression -> expression EQ expression .)
    UNTIL           reduce using rule 69 (math_expression -> expression EQ expression .)
    ELSE            reduce using rule 69 (math_expression -> expression EQ expression .)
    COMMA           reduce using rule 69 (math_expression -> expression EQ expression .)
    RBRACKET        reduce using rule 69 (math_expression -> expression EQ expression .)
    CONTINUE        reduce using rule 69 (math_expression -> expression EQ expression .)
    R_QBRACKET      reduce using rule 69 (math_expression -> expression EQ expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77

  ! PLUS            [ reduce using rule 69 (math_expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 69 (math_expression -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 69 (math_expression -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 69 (math_expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 69 (math_expression -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 69 (math_expression -> expression EQ expression .) ]


state 121

    (70) math_expression -> expression NOTEQ expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    NEWLINE         reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    THEN            reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    UNTIL           reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    ELSE            reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    COMMA           reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    CONTINUE        reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    R_QBRACKET      reduce using rule 70 (math_expression -> expression NOTEQ expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77

  ! PLUS            [ reduce using rule 70 (math_expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 70 (math_expression -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 70 (math_expression -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 70 (math_expression -> expression NOTEQ expression .) ]
  ! EQ              [ reduce using rule 70 (math_expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 70 (math_expression -> expression NOTEQ expression .) ]


state 122

    (36) variables -> variable COMMA . variables
    (36) variables -> . variable COMMA variables
    (37) variables -> . assignment COMMA variables
    (38) variables -> . variable
    (39) variables -> . assignment
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (40) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 84

    variable                       shift and go to state 82
    variables                      shift and go to state 144
    assignment                     shift and go to state 83

state 123

    (37) variables -> assignment COMMA . variables
    (36) variables -> . variable COMMA variables
    (37) variables -> . assignment COMMA variables
    (38) variables -> . variable
    (39) variables -> . assignment
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (40) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 84

    assignment                     shift and go to state 83
    variables                      shift and go to state 145
    variable                       shift and go to state 82

state 124

    (29) any -> any VARIABLE .

    VARIABLE        reduce using rule 29 (any -> any VARIABLE .)
    NEWLINE         reduce using rule 29 (any -> any VARIABLE .)


state 125

    (40) assignment -> variable ASSIGNMENT expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    COMMA           reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    UNTIL           reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    ELSE            reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 126

    (81) vector_command -> variable PUSH BACK . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    variable                       shift and go to state 67
    expression                     shift and go to state 146
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 127

    (82) vector_command -> variable PUSH FRONT . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    variable                       shift and go to state 67
    expression                     shift and go to state 147
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 128

    (83) vector_pop -> variable POP BACK .

    TO              reduce using rule 83 (vector_pop -> variable POP BACK .)
    PLUS            reduce using rule 83 (vector_pop -> variable POP BACK .)
    MINUS           reduce using rule 83 (vector_pop -> variable POP BACK .)
    LESS            reduce using rule 83 (vector_pop -> variable POP BACK .)
    GREATER         reduce using rule 83 (vector_pop -> variable POP BACK .)
    EQ              reduce using rule 83 (vector_pop -> variable POP BACK .)
    NOTEQ           reduce using rule 83 (vector_pop -> variable POP BACK .)
    NEWLINE         reduce using rule 83 (vector_pop -> variable POP BACK .)
    THEN            reduce using rule 83 (vector_pop -> variable POP BACK .)
    UNTIL           reduce using rule 83 (vector_pop -> variable POP BACK .)
    ELSE            reduce using rule 83 (vector_pop -> variable POP BACK .)
    COMMA           reduce using rule 83 (vector_pop -> variable POP BACK .)
    RBRACKET        reduce using rule 83 (vector_pop -> variable POP BACK .)
    CONTINUE        reduce using rule 83 (vector_pop -> variable POP BACK .)
    R_QBRACKET      reduce using rule 83 (vector_pop -> variable POP BACK .)


state 129

    (84) vector_pop -> variable POP FRONT .

    TO              reduce using rule 84 (vector_pop -> variable POP FRONT .)
    PLUS            reduce using rule 84 (vector_pop -> variable POP FRONT .)
    MINUS           reduce using rule 84 (vector_pop -> variable POP FRONT .)
    LESS            reduce using rule 84 (vector_pop -> variable POP FRONT .)
    GREATER         reduce using rule 84 (vector_pop -> variable POP FRONT .)
    EQ              reduce using rule 84 (vector_pop -> variable POP FRONT .)
    NOTEQ           reduce using rule 84 (vector_pop -> variable POP FRONT .)
    NEWLINE         reduce using rule 84 (vector_pop -> variable POP FRONT .)
    THEN            reduce using rule 84 (vector_pop -> variable POP FRONT .)
    UNTIL           reduce using rule 84 (vector_pop -> variable POP FRONT .)
    ELSE            reduce using rule 84 (vector_pop -> variable POP FRONT .)
    COMMA           reduce using rule 84 (vector_pop -> variable POP FRONT .)
    RBRACKET        reduce using rule 84 (vector_pop -> variable POP FRONT .)
    CONTINUE        reduce using rule 84 (vector_pop -> variable POP FRONT .)
    R_QBRACKET      reduce using rule 84 (vector_pop -> variable POP FRONT .)


state 130

    (71) while -> DO statements_group UNTIL . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 148
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 131

    (2) statements_group -> BEGIN statements . END
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (102) errors -> . errors error
    (103) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    END             shift and go to state 149
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 96 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    statement                      shift and go to state 57
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 132

    (11) inner_statement -> RETURN expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    UNTIL           reduce using rule 11 (inner_statement -> RETURN expression .)
    ELSE            reduce using rule 11 (inner_statement -> RETURN expression .)
    NEWLINE         reduce using rule 11 (inner_statement -> RETURN expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 133

    (72) if -> IF expression THEN . statements_group
    (73) if -> IF expression THEN . statements_group ELSE statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (102) errors -> . errors error
    (103) errors -> . error
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    BEGIN           shift and go to state 91
    RETURN          shift and go to state 100
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 96 (empty -> .)
    NEWLINE         reduce using rule 96 (empty -> .)
    UNTIL           reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    error           shift and go to state 26
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    expression                     shift and go to state 13
    statements_group               shift and go to state 150
    inner_statement                shift and go to state 92
    declaration                    shift and go to state 93
    assignment                     shift and go to state 94
    while                          shift and go to state 95
    if                             shift and go to state 96
    command                        shift and go to state 97
    function                       shift and go to state 98
    call                           shift and go to state 99
    empty                          shift and go to state 101
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    errors                         shift and go to state 102
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 134

    (74) function -> FUNCTION OF type . VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> FUNCTION OF type . VARIABLE BRACKETS statements_group

    VARIABLE        shift and go to state 151


state 135

    (101) parameter -> VARIABLE . EQ expression
    (41) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (42) variable -> VARIABLE .
    (94) call -> VARIABLE . LBRACKET parameters RBRACKET
    (95) call -> VARIABLE . BRACKETS

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 152
    L_QBRACKET      shift and go to state 107
    POP             reduce using rule 42 (variable -> VARIABLE .)
    PLUS            reduce using rule 42 (variable -> VARIABLE .)
    MINUS           reduce using rule 42 (variable -> VARIABLE .)
    LESS            reduce using rule 42 (variable -> VARIABLE .)
    GREATER         reduce using rule 42 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 42 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 42 (variable -> VARIABLE .)
    COMMA           reduce using rule 42 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 42 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 105
    BRACKETS        shift and go to state 106

  ! EQ              [ reduce using rule 42 (variable -> VARIABLE .) ]


state 136

    (94) call -> VARIABLE LBRACKET parameters . RBRACKET
    (97) parameters -> parameters . COMMA parameter
    (99) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 153
    COMMA           shift and go to state 154
    CONTINUE        shift and go to state 155


state 137

    (98) parameters -> parameter .

    RBRACKET        reduce using rule 98 (parameters -> parameter .)
    COMMA           reduce using rule 98 (parameters -> parameter .)
    CONTINUE        reduce using rule 98 (parameters -> parameter .)


state 138

    (100) parameter -> expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 100 (parameter -> expression .)
    COMMA           reduce using rule 100 (parameter -> expression .)
    CONTINUE        reduce using rule 100 (parameter -> expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 139

    (41) variable -> VARIABLE L_QBRACKET expression . R_QBRACKET
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    R_QBRACKET      shift and go to state 156
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 140

    (34) type -> VECTOR OF type .

    VARIABLE        reduce using rule 34 (type -> VECTOR OF type .)
    NEWLINE         reduce using rule 34 (type -> VECTOR OF type .)
    UNTIL           reduce using rule 34 (type -> VECTOR OF type .)
    ELSE            reduce using rule 34 (type -> VECTOR OF type .)


state 141

    (50) qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .

    TO              reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    PLUS            reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    MINUS           reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    LESS            reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    GREATER         reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    EQ              reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NOTEQ           reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NEWLINE         reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    THEN            reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    UNTIL           reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    ELSE            reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    COMMA           reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    RBRACKET        reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    CONTINUE        reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    R_QBRACKET      reduce using rule 50 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)


state 142

    (52) string -> string VARIABLE .

    DOUBLE_QUOTE    reduce using rule 52 (string -> string VARIABLE .)
    VARIABLE        reduce using rule 52 (string -> string VARIABLE .)
    QUOTE           reduce using rule 52 (string -> string VARIABLE .)


state 143

    (51) qstring -> QUOTE string QUOTE .

    TO              reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    PLUS            reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    MINUS           reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    LESS            reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    GREATER         reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    EQ              reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    NOTEQ           reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    NEWLINE         reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    THEN            reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    UNTIL           reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    ELSE            reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    COMMA           reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    RBRACKET        reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    CONTINUE        reduce using rule 51 (qstring -> QUOTE string QUOTE .)
    R_QBRACKET      reduce using rule 51 (qstring -> QUOTE string QUOTE .)


state 144

    (36) variables -> variable COMMA variables .

    NEWLINE         reduce using rule 36 (variables -> variable COMMA variables .)
    UNTIL           reduce using rule 36 (variables -> variable COMMA variables .)
    ELSE            reduce using rule 36 (variables -> variable COMMA variables .)


state 145

    (37) variables -> assignment COMMA variables .

    NEWLINE         reduce using rule 37 (variables -> assignment COMMA variables .)
    UNTIL           reduce using rule 37 (variables -> assignment COMMA variables .)
    ELSE            reduce using rule 37 (variables -> assignment COMMA variables .)


state 146

    (81) vector_command -> variable PUSH BACK expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 81 (vector_command -> variable PUSH BACK expression .)
    UNTIL           reduce using rule 81 (vector_command -> variable PUSH BACK expression .)
    ELSE            reduce using rule 81 (vector_command -> variable PUSH BACK expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 147

    (82) vector_command -> variable PUSH FRONT expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 82 (vector_command -> variable PUSH FRONT expression .)
    UNTIL           reduce using rule 82 (vector_command -> variable PUSH FRONT expression .)
    ELSE            reduce using rule 82 (vector_command -> variable PUSH FRONT expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 148

    (71) while -> DO statements_group UNTIL expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 71 (while -> DO statements_group UNTIL expression .)
    UNTIL           reduce using rule 71 (while -> DO statements_group UNTIL expression .)
    ELSE            reduce using rule 71 (while -> DO statements_group UNTIL expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 149

    (2) statements_group -> BEGIN statements END .

    UNTIL           reduce using rule 2 (statements_group -> BEGIN statements END .)
    ELSE            reduce using rule 2 (statements_group -> BEGIN statements END .)
    NEWLINE         reduce using rule 2 (statements_group -> BEGIN statements END .)


state 150

    (72) if -> IF expression THEN statements_group .
    (73) if -> IF expression THEN statements_group . ELSE statements_group

  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 72 (if -> IF expression THEN statements_group .)
    UNTIL           reduce using rule 72 (if -> IF expression THEN statements_group .)
    ELSE            shift and go to state 157

  ! ELSE            [ reduce using rule 72 (if -> IF expression THEN statements_group .) ]


state 151

    (74) function -> FUNCTION OF type VARIABLE . LBRACKET parameters RBRACKET statements_group
    (75) function -> FUNCTION OF type VARIABLE . BRACKETS statements_group

    LBRACKET        shift and go to state 158
    BRACKETS        shift and go to state 159


state 152

    (101) parameter -> VARIABLE EQ . expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    expression                     shift and go to state 160
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 153

    (94) call -> VARIABLE LBRACKET parameters RBRACKET .

    NEWLINE         reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    TO              reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    PLUS            reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    MINUS           reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    LESS            reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    GREATER         reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    EQ              reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    NOTEQ           reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    UNTIL           reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    THEN            reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    ELSE            reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    COMMA           reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    RBRACKET        reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    CONTINUE        reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    R_QBRACKET      reduce using rule 94 (call -> VARIABLE LBRACKET parameters RBRACKET .)


state 154

    (97) parameters -> parameters COMMA . parameter
    (100) parameter -> . expression
    (101) parameter -> . VARIABLE EQ expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 135
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    parameter                      shift and go to state 161
    expression                     shift and go to state 138
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 155

    (99) parameters -> parameters CONTINUE .

    RBRACKET        reduce using rule 99 (parameters -> parameters CONTINUE .)
    COMMA           reduce using rule 99 (parameters -> parameters CONTINUE .)
    CONTINUE        reduce using rule 99 (parameters -> parameters CONTINUE .)


state 156

    (41) variable -> VARIABLE L_QBRACKET expression R_QBRACKET .

    ASSIGNMENT      reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    PUSH            reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    POP             reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    TO              reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    PLUS            reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    MINUS           reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    LESS            reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    GREATER         reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    EQ              reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NOTEQ           reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NEWLINE         reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    COMMA           reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    UNTIL           reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    ELSE            reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    THEN            reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    RBRACKET        reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    CONTINUE        reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    R_QBRACKET      reduce using rule 41 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)


state 157

    (73) if -> IF expression THEN statements_group ELSE . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (102) errors -> . errors error
    (103) errors -> . error
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    BEGIN           shift and go to state 91
    RETURN          shift and go to state 100
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 96 (empty -> .)
    NEWLINE         reduce using rule 96 (empty -> .)
    UNTIL           reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    error           shift and go to state 26
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    expression                     shift and go to state 13
    statements_group               shift and go to state 162
    inner_statement                shift and go to state 92
    declaration                    shift and go to state 93
    assignment                     shift and go to state 94
    while                          shift and go to state 95
    if                             shift and go to state 96
    command                        shift and go to state 97
    function                       shift and go to state 98
    call                           shift and go to state 99
    empty                          shift and go to state 101
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    errors                         shift and go to state 102
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 158

    (74) function -> FUNCTION OF type VARIABLE LBRACKET . parameters RBRACKET statements_group
    (97) parameters -> . parameters COMMA parameter
    (98) parameters -> . parameter
    (99) parameters -> . parameters CONTINUE
    (100) parameter -> . expression
    (101) parameter -> . VARIABLE EQ expression
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 135
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39

    parameters                     shift and go to state 163
    parameter                      shift and go to state 137
    expression                     shift and go to state 138
    variable                       shift and go to state 67
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    robot_command                  shift and go to state 68
    vector_pop                     shift and go to state 43
    call                           shift and go to state 69

state 159

    (75) function -> FUNCTION OF type VARIABLE BRACKETS . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (102) errors -> . errors error
    (103) errors -> . error
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    BEGIN           shift and go to state 91
    RETURN          shift and go to state 100
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 96 (empty -> .)
    NEWLINE         reduce using rule 96 (empty -> .)
    UNTIL           reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    error           shift and go to state 26
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    type                           shift and go to state 16
    statements_group               shift and go to state 164
    inner_statement                shift and go to state 92
    declaration                    shift and go to state 93
    assignment                     shift and go to state 94
    while                          shift and go to state 95
    if                             shift and go to state 96
    command                        shift and go to state 97
    function                       shift and go to state 98
    call                           shift and go to state 99
    expression                     shift and go to state 13
    empty                          shift and go to state 101
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    errors                         shift and go to state 102
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 160

    (101) parameter -> VARIABLE EQ expression .
    (64) math_expression -> expression . PLUS expression
    (65) math_expression -> expression . MINUS expression
    (67) math_expression -> expression . LESS expression
    (68) math_expression -> expression . GREATER expression
    (69) math_expression -> expression . EQ expression
    (70) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 101 (parameter -> VARIABLE EQ expression .)
    COMMA           reduce using rule 101 (parameter -> VARIABLE EQ expression .)
    CONTINUE        reduce using rule 101 (parameter -> VARIABLE EQ expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    LESS            shift and go to state 74
    GREATER         shift and go to state 75
    EQ              shift and go to state 76
    NOTEQ           shift and go to state 77


state 161

    (97) parameters -> parameters COMMA parameter .

    RBRACKET        reduce using rule 97 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 97 (parameters -> parameters COMMA parameter .)
    CONTINUE        reduce using rule 97 (parameters -> parameters COMMA parameter .)


state 162

    (73) if -> IF expression THEN statements_group ELSE statements_group .

    NEWLINE         reduce using rule 73 (if -> IF expression THEN statements_group ELSE statements_group .)
    UNTIL           reduce using rule 73 (if -> IF expression THEN statements_group ELSE statements_group .)
    ELSE            reduce using rule 73 (if -> IF expression THEN statements_group ELSE statements_group .)


state 163

    (74) function -> FUNCTION OF type VARIABLE LBRACKET parameters . RBRACKET statements_group
    (97) parameters -> parameters . COMMA parameter
    (99) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 165
    COMMA           shift and go to state 154
    CONTINUE        shift and go to state 155


state 164

    (75) function -> FUNCTION OF type VARIABLE BRACKETS statements_group .

    NEWLINE         reduce using rule 75 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    UNTIL           reduce using rule 75 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    ELSE            reduce using rule 75 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)


state 165

    (74) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (71) while -> . DO statements_group UNTIL expression
    (72) if -> . IF expression THEN statements_group
    (73) if -> . IF expression THEN statements_group ELSE statements_group
    (76) command -> . vector_command
    (77) command -> . robot_command
    (78) command -> . converting_command
    (74) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (94) call -> . VARIABLE LBRACKET parameters RBRACKET
    (95) call -> . VARIABLE BRACKETS
    (96) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (42) variable -> . VARIABLE
    (81) vector_command -> . variable PUSH BACK expression
    (82) vector_command -> . variable PUSH FRONT expression
    (85) robot_command -> . LEFT
    (86) robot_command -> . RIGHT
    (87) robot_command -> . FORWARD
    (88) robot_command -> . BACK
    (89) robot_command -> . ROTATE_RIGHT
    (90) robot_command -> . ROTATE_LEFT
    (91) robot_command -> . LMS
    (92) robot_command -> . REFLECT
    (93) robot_command -> . DRILL
    (79) converting_command -> . expression TO type
    (80) converting_command -> . expression TO expression
    (102) errors -> . errors error
    (103) errors -> . error
    (43) expression -> . variable
    (44) expression -> . const
    (45) expression -> . qstring
    (46) expression -> . math_expression
    (47) expression -> . robot_command
    (48) expression -> . vector_pop
    (49) expression -> . call
    (54) const -> . TRUE
    (55) const -> . FALSE
    (56) const -> . UNDEFINED
    (57) const -> . DECIMAL
    (58) const -> . EXIT
    (59) const -> . WOOD
    (60) const -> . STEEL
    (61) const -> . GLASS
    (62) const -> . CONCRETE
    (63) const -> . PLASTIC
    (50) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (51) qstring -> . QUOTE string QUOTE
    (64) math_expression -> . expression PLUS expression
    (65) math_expression -> . expression MINUS expression
    (66) math_expression -> . MINUS expression
    (67) math_expression -> . expression LESS expression
    (68) math_expression -> . expression GREATER expression
    (69) math_expression -> . expression EQ expression
    (70) math_expression -> . expression NOTEQ expression
    (83) vector_pop -> . variable POP BACK
    (84) vector_pop -> . variable POP FRONT

    BEGIN           shift and go to state 91
    RETURN          shift and go to state 100
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 96 (empty -> .)
    NEWLINE         reduce using rule 96 (empty -> .)
    UNTIL           reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    error           shift and go to state 26
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    UNDEFINED       shift and go to state 46
    DECIMAL         shift and go to state 47
    EXIT            shift and go to state 48
    WOOD            shift and go to state 49
    STEEL           shift and go to state 50
    GLASS           shift and go to state 51
    CONCRETE        shift and go to state 52
    PLASTIC         shift and go to state 53
    DOUBLE_QUOTE    shift and go to state 54
    QUOTE           shift and go to state 55
    MINUS           shift and go to state 56

    type                           shift and go to state 16
    statements_group               shift and go to state 166
    inner_statement                shift and go to state 92
    declaration                    shift and go to state 93
    assignment                     shift and go to state 94
    while                          shift and go to state 95
    if                             shift and go to state 96
    command                        shift and go to state 97
    function                       shift and go to state 98
    call                           shift and go to state 99
    expression                     shift and go to state 13
    empty                          shift and go to state 101
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    errors                         shift and go to state 102
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    vector_pop                     shift and go to state 43

state 166

    (74) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .

    NEWLINE         reduce using rule 74 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    UNTIL           reduce using rule 74 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    ELSE            reduce using rule 74 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 15 resolved as shift
WARNING: shift/reduce conflict for error in state 15 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 150 resolved as shift
WARNING: reduce/reduce conflict in state 15 resolved using rule (statement -> errors)
WARNING: rejected rule (type -> errors) in state 15
