Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> application
Rule 1     application -> statements
Rule 2     statements_group -> BEGIN statements END
Rule 3     statements_group -> inner_statement
Rule 4     inner_statement -> declaration
Rule 5     inner_statement -> assignment
Rule 6     inner_statement -> while
Rule 7     inner_statement -> if
Rule 8     inner_statement -> command
Rule 9     inner_statement -> function
Rule 10    inner_statement -> call
Rule 11    inner_statement -> RETURN expression
Rule 12    inner_statement -> empty
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> declaration NEWLINE
Rule 16    statement -> assignment NEWLINE
Rule 17    statement -> while NEWLINE
Rule 18    statement -> if NEWLINE
Rule 19    statement -> command NEWLINE
Rule 20    statement -> function NEWLINE
Rule 21    statement -> call NEWLINE
Rule 22    statement -> RETURN expression NEWLINE
Rule 23    statement -> empty NEWLINE
Rule 24    declaration -> type variables
Rule 25    type -> INTEGER
Rule 26    type -> STRING
Rule 27    type -> BOOL
Rule 28    type -> VECTOR OF type
Rule 29    variables -> variable COMMA variables
Rule 30    variables -> assignment COMMA variables
Rule 31    variables -> variable
Rule 32    variables -> assignment
Rule 33    assignment -> variable ASSIGNMENT expression
Rule 34    variable -> VARIABLE R_QBRACKET expression L_QBRACKET
Rule 35    variable -> VARIABLE
Rule 36    expression -> variable
Rule 37    expression -> const
Rule 38    expression -> qstring
Rule 39    expression -> math_expression
Rule 40    expression -> call
Rule 41    qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE
Rule 42    qstring -> QUOTE string QUOTE
Rule 43    string -> string VARIABLE
Rule 44    string -> VARIABLE
Rule 45    const -> TRUE
Rule 46    const -> FALSE
Rule 47    const -> UNDEFINED
Rule 48    const -> DECIMAL
Rule 49    const -> EXIT
Rule 50    const -> WOOD
Rule 51    const -> STEEL
Rule 52    const -> GLASS
Rule 53    const -> CONCRETE
Rule 54    const -> PLASTIC
Rule 55    math_expression -> expression PLUS expression
Rule 56    math_expression -> expression MINUS expression
Rule 57    math_expression -> MINUS expression
Rule 58    math_expression -> expression LESS expression
Rule 59    math_expression -> expression GREATER expression
Rule 60    math_expression -> expression EQ expression
Rule 61    math_expression -> expression NOTEQ expression
Rule 62    while -> DO statements_group UNTIL expression
Rule 63    if -> IF expression THEN statements_group
Rule 64    if -> IF expression THEN statements_group ELSE statements_group
Rule 65    function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
Rule 66    function -> FUNCTION OF type VARIABLE BRACKETS statements_group
Rule 67    command -> vector_command
Rule 68    command -> robot_command
Rule 69    command -> converting_command
Rule 70    converting_command -> expression TO type
Rule 71    converting_command -> expression TO expression
Rule 72    vector_command -> VARIABLE PUSH BACK expression
Rule 73    vector_command -> VARIABLE POP BACK
Rule 74    vector_command -> VARIABLE PUSH FRONT expression
Rule 75    vector_command -> VARIABLE POP FRONT
Rule 76    robot_command -> LEFT
Rule 77    robot_command -> RIGHT
Rule 78    robot_command -> FORWARD
Rule 79    robot_command -> BACK
Rule 80    robot_command -> ROTATE_RIGHT
Rule 81    robot_command -> ROTATE_LEFT
Rule 82    robot_command -> LMS
Rule 83    robot_command -> REFLECT
Rule 84    robot_command -> DRILL
Rule 85    call -> VARIABLE LBRACKET parameters RBRACKET
Rule 86    call -> VARIABLE BRACKETS
Rule 87    empty -> <empty>
Rule 88    parameters -> parameters COMMA parameter
Rule 89    parameters -> parameter
Rule 90    parameters -> parameters CONTINUE
Rule 91    parameter -> expression
Rule 92    parameter -> VARIABLE EQ expression

Terminals, with rules where they appear

ASSIGNMENT           : 33
BACK                 : 72 73 79
BEGIN                : 2
BOOL                 : 27
BRACKETS             : 66 86
COMMA                : 29 30 88
CONCRETE             : 53
CONTINUE             : 90
DECIMAL              : 48
DO                   : 62
DOUBLE_QUOTE         : 41 41
DRILL                : 84
ELSE                 : 64
END                  : 2
EQ                   : 60 92
EXIT                 : 49
FALSE                : 46
FORWARD              : 78
FRONT                : 74 75
FUNCTION             : 65 66
GLASS                : 52
GREATER              : 59
IF                   : 63 64
INTEGER              : 25
LBRACKET             : 65 85
LEFT                 : 76
LESS                 : 58
LMS                  : 82
L_QBRACKET           : 34
MINUS                : 56 57
NEWLINE              : 15 16 17 18 19 20 21 22 23
NOTEQ                : 61
OF                   : 28 65 66
PLASTIC              : 54
PLUS                 : 55
POP                  : 73 75
PUSH                 : 72 74
QUOTE                : 42 42
RBRACKET             : 65 85
REFLECT              : 83
RETURN               : 11 22
RIGHT                : 77
ROTATE_LEFT          : 81
ROTATE_RIGHT         : 80
R_QBRACKET           : 34
STEEL                : 51
STRING               : 26
THEN                 : 63 64
TO                   : 70 71
TRUE                 : 45
UNDEFINED            : 47
UNTIL                : 62
VARIABLE             : 34 35 43 44 65 66 72 73 74 75 85 86 92
VECTOR               : 28
WOOD                 : 50
error                : 

Nonterminals, with rules where they appear

application          : 0
assignment           : 5 16 30 32
call                 : 10 21 40
command              : 8 19
const                : 37
converting_command   : 69
declaration          : 4 15
empty                : 12 23
expression           : 11 22 33 34 55 55 56 56 57 58 58 59 59 60 60 61 61 62 63 64 70 71 71 72 74 91 92
function             : 9 20
if                   : 7 18
inner_statement      : 3
math_expression      : 39
parameter            : 88 89
parameters           : 65 85 88 90
qstring              : 38
robot_command        : 68
statement            : 13 14
statements           : 1 2 13
statements_group     : 62 63 64 64 65 66
string               : 41 42 43
type                 : 24 28 65 66 70
variable             : 29 31 33 36
variables            : 24 29 30
vector_command       : 67
while                : 6 17

Parsing method: LALR

state 0

    (0) S' -> . application
    (1) application -> . statements
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . assignment NEWLINE
    (17) statement -> . while NEWLINE
    (18) statement -> . if NEWLINE
    (19) statement -> . command NEWLINE
    (20) statement -> . function NEWLINE
    (21) statement -> . call NEWLINE
    (22) statement -> . RETURN expression NEWLINE
    (23) statement -> . empty NEWLINE
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    application                    shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    expression                     shift and go to state 12
    empty                          shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 1

    (0) S' -> application .



state 2

    (1) application -> statements .
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . assignment NEWLINE
    (17) statement -> . while NEWLINE
    (18) statement -> . if NEWLINE
    (19) statement -> . command NEWLINE
    (20) statement -> . function NEWLINE
    (21) statement -> . call NEWLINE
    (22) statement -> . RETURN expression NEWLINE
    (23) statement -> . empty NEWLINE
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    $end            reduce using rule 1 (application -> statements .)
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    statement                      shift and go to state 52
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    expression                     shift and go to state 12
    empty                          shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 3

    (14) statements -> statement .

    RETURN          reduce using rule 14 (statements -> statement .)
    DO              reduce using rule 14 (statements -> statement .)
    IF              reduce using rule 14 (statements -> statement .)
    FUNCTION        reduce using rule 14 (statements -> statement .)
    VARIABLE        reduce using rule 14 (statements -> statement .)
    INTEGER         reduce using rule 14 (statements -> statement .)
    STRING          reduce using rule 14 (statements -> statement .)
    BOOL            reduce using rule 14 (statements -> statement .)
    VECTOR          reduce using rule 14 (statements -> statement .)
    LEFT            reduce using rule 14 (statements -> statement .)
    RIGHT           reduce using rule 14 (statements -> statement .)
    FORWARD         reduce using rule 14 (statements -> statement .)
    BACK            reduce using rule 14 (statements -> statement .)
    ROTATE_RIGHT    reduce using rule 14 (statements -> statement .)
    ROTATE_LEFT     reduce using rule 14 (statements -> statement .)
    LMS             reduce using rule 14 (statements -> statement .)
    REFLECT         reduce using rule 14 (statements -> statement .)
    DRILL           reduce using rule 14 (statements -> statement .)
    TRUE            reduce using rule 14 (statements -> statement .)
    FALSE           reduce using rule 14 (statements -> statement .)
    UNDEFINED       reduce using rule 14 (statements -> statement .)
    DECIMAL         reduce using rule 14 (statements -> statement .)
    EXIT            reduce using rule 14 (statements -> statement .)
    WOOD            reduce using rule 14 (statements -> statement .)
    STEEL           reduce using rule 14 (statements -> statement .)
    GLASS           reduce using rule 14 (statements -> statement .)
    CONCRETE        reduce using rule 14 (statements -> statement .)
    PLASTIC         reduce using rule 14 (statements -> statement .)
    DOUBLE_QUOTE    reduce using rule 14 (statements -> statement .)
    QUOTE           reduce using rule 14 (statements -> statement .)
    MINUS           reduce using rule 14 (statements -> statement .)
    NEWLINE         reduce using rule 14 (statements -> statement .)
    $end            reduce using rule 14 (statements -> statement .)
    END             reduce using rule 14 (statements -> statement .)


state 4

    (15) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 53


state 5

    (16) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 54


state 6

    (17) statement -> while . NEWLINE

    NEWLINE         shift and go to state 55


state 7

    (18) statement -> if . NEWLINE

    NEWLINE         shift and go to state 56


state 8

    (19) statement -> command . NEWLINE

    NEWLINE         shift and go to state 57


state 9

    (20) statement -> function . NEWLINE

    NEWLINE         shift and go to state 58


state 10

    (21) statement -> call . NEWLINE
    (40) expression -> call .

    NEWLINE         shift and go to state 59
    TO              reduce using rule 40 (expression -> call .)
    PLUS            reduce using rule 40 (expression -> call .)
    MINUS           reduce using rule 40 (expression -> call .)
    LESS            reduce using rule 40 (expression -> call .)
    GREATER         reduce using rule 40 (expression -> call .)
    EQ              reduce using rule 40 (expression -> call .)
    NOTEQ           reduce using rule 40 (expression -> call .)


state 11

    (22) statement -> RETURN . expression NEWLINE
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 60
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 12

    (70) converting_command -> expression . TO type
    (71) converting_command -> expression . TO expression
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    TO              shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 13

    (23) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 71


state 14

    (24) declaration -> type . variables
    (29) variables -> . variable COMMA variables
    (30) variables -> . assignment COMMA variables
    (31) variables -> . variable
    (32) variables -> . assignment
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (33) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 75

    variables                      shift and go to state 72
    variable                       shift and go to state 73
    assignment                     shift and go to state 74

state 15

    (33) assignment -> variable . ASSIGNMENT expression
    (36) expression -> variable .

    ASSIGNMENT      shift and go to state 76
    TO              reduce using rule 36 (expression -> variable .)
    PLUS            reduce using rule 36 (expression -> variable .)
    MINUS           reduce using rule 36 (expression -> variable .)
    LESS            reduce using rule 36 (expression -> variable .)
    GREATER         reduce using rule 36 (expression -> variable .)
    EQ              reduce using rule 36 (expression -> variable .)
    NOTEQ           reduce using rule 36 (expression -> variable .)


state 16

    (62) while -> DO . statements_group UNTIL expression
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 78
    RETURN          shift and go to state 87
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    UNTIL           reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    statements_group               shift and go to state 77
    expression                     shift and go to state 12
    inner_statement                shift and go to state 79
    declaration                    shift and go to state 80
    assignment                     shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    command                        shift and go to state 84
    function                       shift and go to state 85
    call                           shift and go to state 86
    empty                          shift and go to state 88
    type                           shift and go to state 14
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 17

    (63) if -> IF . expression THEN statements_group
    (64) if -> IF . expression THEN statements_group ELSE statements_group
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 89
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 18

    (67) command -> vector_command .

    NEWLINE         reduce using rule 67 (command -> vector_command .)
    UNTIL           reduce using rule 67 (command -> vector_command .)
    ELSE            reduce using rule 67 (command -> vector_command .)


state 19

    (68) command -> robot_command .

    NEWLINE         reduce using rule 68 (command -> robot_command .)
    UNTIL           reduce using rule 68 (command -> robot_command .)
    ELSE            reduce using rule 68 (command -> robot_command .)


state 20

    (69) command -> converting_command .

    NEWLINE         reduce using rule 69 (command -> converting_command .)
    UNTIL           reduce using rule 69 (command -> converting_command .)
    ELSE            reduce using rule 69 (command -> converting_command .)


state 21

    (65) function -> FUNCTION . OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> FUNCTION . OF type VARIABLE BRACKETS statements_group

    OF              shift and go to state 90


state 22

    (85) call -> VARIABLE . LBRACKET parameters RBRACKET
    (86) call -> VARIABLE . BRACKETS
    (34) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (35) variable -> VARIABLE .
    (72) vector_command -> VARIABLE . PUSH BACK expression
    (73) vector_command -> VARIABLE . POP BACK
    (74) vector_command -> VARIABLE . PUSH FRONT expression
    (75) vector_command -> VARIABLE . POP FRONT

    LBRACKET        shift and go to state 91
    BRACKETS        shift and go to state 92
    R_QBRACKET      shift and go to state 93
    ASSIGNMENT      reduce using rule 35 (variable -> VARIABLE .)
    TO              reduce using rule 35 (variable -> VARIABLE .)
    PLUS            reduce using rule 35 (variable -> VARIABLE .)
    MINUS           reduce using rule 35 (variable -> VARIABLE .)
    LESS            reduce using rule 35 (variable -> VARIABLE .)
    GREATER         reduce using rule 35 (variable -> VARIABLE .)
    EQ              reduce using rule 35 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 35 (variable -> VARIABLE .)
    PUSH            shift and go to state 94
    POP             shift and go to state 95


state 23

    (25) type -> INTEGER .

    VARIABLE        reduce using rule 25 (type -> INTEGER .)
    NEWLINE         reduce using rule 25 (type -> INTEGER .)
    UNTIL           reduce using rule 25 (type -> INTEGER .)
    ELSE            reduce using rule 25 (type -> INTEGER .)


state 24

    (26) type -> STRING .

    VARIABLE        reduce using rule 26 (type -> STRING .)
    NEWLINE         reduce using rule 26 (type -> STRING .)
    UNTIL           reduce using rule 26 (type -> STRING .)
    ELSE            reduce using rule 26 (type -> STRING .)


state 25

    (27) type -> BOOL .

    VARIABLE        reduce using rule 27 (type -> BOOL .)
    NEWLINE         reduce using rule 27 (type -> BOOL .)
    UNTIL           reduce using rule 27 (type -> BOOL .)
    ELSE            reduce using rule 27 (type -> BOOL .)


state 26

    (28) type -> VECTOR . OF type

    OF              shift and go to state 96


state 27

    (79) robot_command -> BACK .

    NEWLINE         reduce using rule 79 (robot_command -> BACK .)
    UNTIL           reduce using rule 79 (robot_command -> BACK .)
    ELSE            reduce using rule 79 (robot_command -> BACK .)


state 28

    (76) robot_command -> LEFT .

    NEWLINE         reduce using rule 76 (robot_command -> LEFT .)
    UNTIL           reduce using rule 76 (robot_command -> LEFT .)
    ELSE            reduce using rule 76 (robot_command -> LEFT .)


state 29

    (77) robot_command -> RIGHT .

    NEWLINE         reduce using rule 77 (robot_command -> RIGHT .)
    UNTIL           reduce using rule 77 (robot_command -> RIGHT .)
    ELSE            reduce using rule 77 (robot_command -> RIGHT .)


state 30

    (78) robot_command -> FORWARD .

    NEWLINE         reduce using rule 78 (robot_command -> FORWARD .)
    UNTIL           reduce using rule 78 (robot_command -> FORWARD .)
    ELSE            reduce using rule 78 (robot_command -> FORWARD .)


state 31

    (80) robot_command -> ROTATE_RIGHT .

    NEWLINE         reduce using rule 80 (robot_command -> ROTATE_RIGHT .)
    UNTIL           reduce using rule 80 (robot_command -> ROTATE_RIGHT .)
    ELSE            reduce using rule 80 (robot_command -> ROTATE_RIGHT .)


state 32

    (81) robot_command -> ROTATE_LEFT .

    NEWLINE         reduce using rule 81 (robot_command -> ROTATE_LEFT .)
    UNTIL           reduce using rule 81 (robot_command -> ROTATE_LEFT .)
    ELSE            reduce using rule 81 (robot_command -> ROTATE_LEFT .)


state 33

    (82) robot_command -> LMS .

    NEWLINE         reduce using rule 82 (robot_command -> LMS .)
    UNTIL           reduce using rule 82 (robot_command -> LMS .)
    ELSE            reduce using rule 82 (robot_command -> LMS .)


state 34

    (83) robot_command -> REFLECT .

    NEWLINE         reduce using rule 83 (robot_command -> REFLECT .)
    UNTIL           reduce using rule 83 (robot_command -> REFLECT .)
    ELSE            reduce using rule 83 (robot_command -> REFLECT .)


state 35

    (84) robot_command -> DRILL .

    NEWLINE         reduce using rule 84 (robot_command -> DRILL .)
    UNTIL           reduce using rule 84 (robot_command -> DRILL .)
    ELSE            reduce using rule 84 (robot_command -> DRILL .)


state 36

    (37) expression -> const .

    TO              reduce using rule 37 (expression -> const .)
    PLUS            reduce using rule 37 (expression -> const .)
    MINUS           reduce using rule 37 (expression -> const .)
    LESS            reduce using rule 37 (expression -> const .)
    GREATER         reduce using rule 37 (expression -> const .)
    EQ              reduce using rule 37 (expression -> const .)
    NOTEQ           reduce using rule 37 (expression -> const .)
    NEWLINE         reduce using rule 37 (expression -> const .)
    THEN            reduce using rule 37 (expression -> const .)
    UNTIL           reduce using rule 37 (expression -> const .)
    ELSE            reduce using rule 37 (expression -> const .)
    COMMA           reduce using rule 37 (expression -> const .)
    RBRACKET        reduce using rule 37 (expression -> const .)
    CONTINUE        reduce using rule 37 (expression -> const .)
    L_QBRACKET      reduce using rule 37 (expression -> const .)


state 37

    (38) expression -> qstring .

    TO              reduce using rule 38 (expression -> qstring .)
    PLUS            reduce using rule 38 (expression -> qstring .)
    MINUS           reduce using rule 38 (expression -> qstring .)
    LESS            reduce using rule 38 (expression -> qstring .)
    GREATER         reduce using rule 38 (expression -> qstring .)
    EQ              reduce using rule 38 (expression -> qstring .)
    NOTEQ           reduce using rule 38 (expression -> qstring .)
    NEWLINE         reduce using rule 38 (expression -> qstring .)
    THEN            reduce using rule 38 (expression -> qstring .)
    UNTIL           reduce using rule 38 (expression -> qstring .)
    ELSE            reduce using rule 38 (expression -> qstring .)
    COMMA           reduce using rule 38 (expression -> qstring .)
    RBRACKET        reduce using rule 38 (expression -> qstring .)
    CONTINUE        reduce using rule 38 (expression -> qstring .)
    L_QBRACKET      reduce using rule 38 (expression -> qstring .)


state 38

    (39) expression -> math_expression .

    TO              reduce using rule 39 (expression -> math_expression .)
    PLUS            reduce using rule 39 (expression -> math_expression .)
    MINUS           reduce using rule 39 (expression -> math_expression .)
    LESS            reduce using rule 39 (expression -> math_expression .)
    GREATER         reduce using rule 39 (expression -> math_expression .)
    EQ              reduce using rule 39 (expression -> math_expression .)
    NOTEQ           reduce using rule 39 (expression -> math_expression .)
    NEWLINE         reduce using rule 39 (expression -> math_expression .)
    THEN            reduce using rule 39 (expression -> math_expression .)
    UNTIL           reduce using rule 39 (expression -> math_expression .)
    ELSE            reduce using rule 39 (expression -> math_expression .)
    COMMA           reduce using rule 39 (expression -> math_expression .)
    RBRACKET        reduce using rule 39 (expression -> math_expression .)
    CONTINUE        reduce using rule 39 (expression -> math_expression .)
    L_QBRACKET      reduce using rule 39 (expression -> math_expression .)


state 39

    (45) const -> TRUE .

    TO              reduce using rule 45 (const -> TRUE .)
    PLUS            reduce using rule 45 (const -> TRUE .)
    MINUS           reduce using rule 45 (const -> TRUE .)
    LESS            reduce using rule 45 (const -> TRUE .)
    GREATER         reduce using rule 45 (const -> TRUE .)
    EQ              reduce using rule 45 (const -> TRUE .)
    NOTEQ           reduce using rule 45 (const -> TRUE .)
    NEWLINE         reduce using rule 45 (const -> TRUE .)
    THEN            reduce using rule 45 (const -> TRUE .)
    UNTIL           reduce using rule 45 (const -> TRUE .)
    ELSE            reduce using rule 45 (const -> TRUE .)
    COMMA           reduce using rule 45 (const -> TRUE .)
    RBRACKET        reduce using rule 45 (const -> TRUE .)
    CONTINUE        reduce using rule 45 (const -> TRUE .)
    L_QBRACKET      reduce using rule 45 (const -> TRUE .)


state 40

    (46) const -> FALSE .

    TO              reduce using rule 46 (const -> FALSE .)
    PLUS            reduce using rule 46 (const -> FALSE .)
    MINUS           reduce using rule 46 (const -> FALSE .)
    LESS            reduce using rule 46 (const -> FALSE .)
    GREATER         reduce using rule 46 (const -> FALSE .)
    EQ              reduce using rule 46 (const -> FALSE .)
    NOTEQ           reduce using rule 46 (const -> FALSE .)
    NEWLINE         reduce using rule 46 (const -> FALSE .)
    THEN            reduce using rule 46 (const -> FALSE .)
    UNTIL           reduce using rule 46 (const -> FALSE .)
    ELSE            reduce using rule 46 (const -> FALSE .)
    COMMA           reduce using rule 46 (const -> FALSE .)
    RBRACKET        reduce using rule 46 (const -> FALSE .)
    CONTINUE        reduce using rule 46 (const -> FALSE .)
    L_QBRACKET      reduce using rule 46 (const -> FALSE .)


state 41

    (47) const -> UNDEFINED .

    TO              reduce using rule 47 (const -> UNDEFINED .)
    PLUS            reduce using rule 47 (const -> UNDEFINED .)
    MINUS           reduce using rule 47 (const -> UNDEFINED .)
    LESS            reduce using rule 47 (const -> UNDEFINED .)
    GREATER         reduce using rule 47 (const -> UNDEFINED .)
    EQ              reduce using rule 47 (const -> UNDEFINED .)
    NOTEQ           reduce using rule 47 (const -> UNDEFINED .)
    NEWLINE         reduce using rule 47 (const -> UNDEFINED .)
    THEN            reduce using rule 47 (const -> UNDEFINED .)
    UNTIL           reduce using rule 47 (const -> UNDEFINED .)
    ELSE            reduce using rule 47 (const -> UNDEFINED .)
    COMMA           reduce using rule 47 (const -> UNDEFINED .)
    RBRACKET        reduce using rule 47 (const -> UNDEFINED .)
    CONTINUE        reduce using rule 47 (const -> UNDEFINED .)
    L_QBRACKET      reduce using rule 47 (const -> UNDEFINED .)


state 42

    (48) const -> DECIMAL .

    TO              reduce using rule 48 (const -> DECIMAL .)
    PLUS            reduce using rule 48 (const -> DECIMAL .)
    MINUS           reduce using rule 48 (const -> DECIMAL .)
    LESS            reduce using rule 48 (const -> DECIMAL .)
    GREATER         reduce using rule 48 (const -> DECIMAL .)
    EQ              reduce using rule 48 (const -> DECIMAL .)
    NOTEQ           reduce using rule 48 (const -> DECIMAL .)
    NEWLINE         reduce using rule 48 (const -> DECIMAL .)
    THEN            reduce using rule 48 (const -> DECIMAL .)
    UNTIL           reduce using rule 48 (const -> DECIMAL .)
    ELSE            reduce using rule 48 (const -> DECIMAL .)
    COMMA           reduce using rule 48 (const -> DECIMAL .)
    RBRACKET        reduce using rule 48 (const -> DECIMAL .)
    CONTINUE        reduce using rule 48 (const -> DECIMAL .)
    L_QBRACKET      reduce using rule 48 (const -> DECIMAL .)


state 43

    (49) const -> EXIT .

    TO              reduce using rule 49 (const -> EXIT .)
    PLUS            reduce using rule 49 (const -> EXIT .)
    MINUS           reduce using rule 49 (const -> EXIT .)
    LESS            reduce using rule 49 (const -> EXIT .)
    GREATER         reduce using rule 49 (const -> EXIT .)
    EQ              reduce using rule 49 (const -> EXIT .)
    NOTEQ           reduce using rule 49 (const -> EXIT .)
    NEWLINE         reduce using rule 49 (const -> EXIT .)
    THEN            reduce using rule 49 (const -> EXIT .)
    UNTIL           reduce using rule 49 (const -> EXIT .)
    ELSE            reduce using rule 49 (const -> EXIT .)
    COMMA           reduce using rule 49 (const -> EXIT .)
    RBRACKET        reduce using rule 49 (const -> EXIT .)
    CONTINUE        reduce using rule 49 (const -> EXIT .)
    L_QBRACKET      reduce using rule 49 (const -> EXIT .)


state 44

    (50) const -> WOOD .

    TO              reduce using rule 50 (const -> WOOD .)
    PLUS            reduce using rule 50 (const -> WOOD .)
    MINUS           reduce using rule 50 (const -> WOOD .)
    LESS            reduce using rule 50 (const -> WOOD .)
    GREATER         reduce using rule 50 (const -> WOOD .)
    EQ              reduce using rule 50 (const -> WOOD .)
    NOTEQ           reduce using rule 50 (const -> WOOD .)
    NEWLINE         reduce using rule 50 (const -> WOOD .)
    THEN            reduce using rule 50 (const -> WOOD .)
    UNTIL           reduce using rule 50 (const -> WOOD .)
    ELSE            reduce using rule 50 (const -> WOOD .)
    COMMA           reduce using rule 50 (const -> WOOD .)
    RBRACKET        reduce using rule 50 (const -> WOOD .)
    CONTINUE        reduce using rule 50 (const -> WOOD .)
    L_QBRACKET      reduce using rule 50 (const -> WOOD .)


state 45

    (51) const -> STEEL .

    TO              reduce using rule 51 (const -> STEEL .)
    PLUS            reduce using rule 51 (const -> STEEL .)
    MINUS           reduce using rule 51 (const -> STEEL .)
    LESS            reduce using rule 51 (const -> STEEL .)
    GREATER         reduce using rule 51 (const -> STEEL .)
    EQ              reduce using rule 51 (const -> STEEL .)
    NOTEQ           reduce using rule 51 (const -> STEEL .)
    NEWLINE         reduce using rule 51 (const -> STEEL .)
    THEN            reduce using rule 51 (const -> STEEL .)
    UNTIL           reduce using rule 51 (const -> STEEL .)
    ELSE            reduce using rule 51 (const -> STEEL .)
    COMMA           reduce using rule 51 (const -> STEEL .)
    RBRACKET        reduce using rule 51 (const -> STEEL .)
    CONTINUE        reduce using rule 51 (const -> STEEL .)
    L_QBRACKET      reduce using rule 51 (const -> STEEL .)


state 46

    (52) const -> GLASS .

    TO              reduce using rule 52 (const -> GLASS .)
    PLUS            reduce using rule 52 (const -> GLASS .)
    MINUS           reduce using rule 52 (const -> GLASS .)
    LESS            reduce using rule 52 (const -> GLASS .)
    GREATER         reduce using rule 52 (const -> GLASS .)
    EQ              reduce using rule 52 (const -> GLASS .)
    NOTEQ           reduce using rule 52 (const -> GLASS .)
    NEWLINE         reduce using rule 52 (const -> GLASS .)
    THEN            reduce using rule 52 (const -> GLASS .)
    UNTIL           reduce using rule 52 (const -> GLASS .)
    ELSE            reduce using rule 52 (const -> GLASS .)
    COMMA           reduce using rule 52 (const -> GLASS .)
    RBRACKET        reduce using rule 52 (const -> GLASS .)
    CONTINUE        reduce using rule 52 (const -> GLASS .)
    L_QBRACKET      reduce using rule 52 (const -> GLASS .)


state 47

    (53) const -> CONCRETE .

    TO              reduce using rule 53 (const -> CONCRETE .)
    PLUS            reduce using rule 53 (const -> CONCRETE .)
    MINUS           reduce using rule 53 (const -> CONCRETE .)
    LESS            reduce using rule 53 (const -> CONCRETE .)
    GREATER         reduce using rule 53 (const -> CONCRETE .)
    EQ              reduce using rule 53 (const -> CONCRETE .)
    NOTEQ           reduce using rule 53 (const -> CONCRETE .)
    NEWLINE         reduce using rule 53 (const -> CONCRETE .)
    THEN            reduce using rule 53 (const -> CONCRETE .)
    UNTIL           reduce using rule 53 (const -> CONCRETE .)
    ELSE            reduce using rule 53 (const -> CONCRETE .)
    COMMA           reduce using rule 53 (const -> CONCRETE .)
    RBRACKET        reduce using rule 53 (const -> CONCRETE .)
    CONTINUE        reduce using rule 53 (const -> CONCRETE .)
    L_QBRACKET      reduce using rule 53 (const -> CONCRETE .)


state 48

    (54) const -> PLASTIC .

    TO              reduce using rule 54 (const -> PLASTIC .)
    PLUS            reduce using rule 54 (const -> PLASTIC .)
    MINUS           reduce using rule 54 (const -> PLASTIC .)
    LESS            reduce using rule 54 (const -> PLASTIC .)
    GREATER         reduce using rule 54 (const -> PLASTIC .)
    EQ              reduce using rule 54 (const -> PLASTIC .)
    NOTEQ           reduce using rule 54 (const -> PLASTIC .)
    NEWLINE         reduce using rule 54 (const -> PLASTIC .)
    THEN            reduce using rule 54 (const -> PLASTIC .)
    UNTIL           reduce using rule 54 (const -> PLASTIC .)
    ELSE            reduce using rule 54 (const -> PLASTIC .)
    COMMA           reduce using rule 54 (const -> PLASTIC .)
    RBRACKET        reduce using rule 54 (const -> PLASTIC .)
    CONTINUE        reduce using rule 54 (const -> PLASTIC .)
    L_QBRACKET      reduce using rule 54 (const -> PLASTIC .)


state 49

    (41) qstring -> DOUBLE_QUOTE . string DOUBLE_QUOTE
    (43) string -> . string VARIABLE
    (44) string -> . VARIABLE

    VARIABLE        shift and go to state 98

    string                         shift and go to state 97

state 50

    (42) qstring -> QUOTE . string QUOTE
    (43) string -> . string VARIABLE
    (44) string -> . VARIABLE

    VARIABLE        shift and go to state 98

    string                         shift and go to state 99

state 51

    (57) math_expression -> MINUS . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 100
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 52

    (13) statements -> statements statement .

    RETURN          reduce using rule 13 (statements -> statements statement .)
    DO              reduce using rule 13 (statements -> statements statement .)
    IF              reduce using rule 13 (statements -> statements statement .)
    FUNCTION        reduce using rule 13 (statements -> statements statement .)
    VARIABLE        reduce using rule 13 (statements -> statements statement .)
    INTEGER         reduce using rule 13 (statements -> statements statement .)
    STRING          reduce using rule 13 (statements -> statements statement .)
    BOOL            reduce using rule 13 (statements -> statements statement .)
    VECTOR          reduce using rule 13 (statements -> statements statement .)
    LEFT            reduce using rule 13 (statements -> statements statement .)
    RIGHT           reduce using rule 13 (statements -> statements statement .)
    FORWARD         reduce using rule 13 (statements -> statements statement .)
    BACK            reduce using rule 13 (statements -> statements statement .)
    ROTATE_RIGHT    reduce using rule 13 (statements -> statements statement .)
    ROTATE_LEFT     reduce using rule 13 (statements -> statements statement .)
    LMS             reduce using rule 13 (statements -> statements statement .)
    REFLECT         reduce using rule 13 (statements -> statements statement .)
    DRILL           reduce using rule 13 (statements -> statements statement .)
    TRUE            reduce using rule 13 (statements -> statements statement .)
    FALSE           reduce using rule 13 (statements -> statements statement .)
    UNDEFINED       reduce using rule 13 (statements -> statements statement .)
    DECIMAL         reduce using rule 13 (statements -> statements statement .)
    EXIT            reduce using rule 13 (statements -> statements statement .)
    WOOD            reduce using rule 13 (statements -> statements statement .)
    STEEL           reduce using rule 13 (statements -> statements statement .)
    GLASS           reduce using rule 13 (statements -> statements statement .)
    CONCRETE        reduce using rule 13 (statements -> statements statement .)
    PLASTIC         reduce using rule 13 (statements -> statements statement .)
    DOUBLE_QUOTE    reduce using rule 13 (statements -> statements statement .)
    QUOTE           reduce using rule 13 (statements -> statements statement .)
    MINUS           reduce using rule 13 (statements -> statements statement .)
    NEWLINE         reduce using rule 13 (statements -> statements statement .)
    $end            reduce using rule 13 (statements -> statements statement .)
    END             reduce using rule 13 (statements -> statements statement .)


state 53

    (15) statement -> declaration NEWLINE .

    RETURN          reduce using rule 15 (statement -> declaration NEWLINE .)
    DO              reduce using rule 15 (statement -> declaration NEWLINE .)
    IF              reduce using rule 15 (statement -> declaration NEWLINE .)
    FUNCTION        reduce using rule 15 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 15 (statement -> declaration NEWLINE .)
    INTEGER         reduce using rule 15 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 15 (statement -> declaration NEWLINE .)
    BOOL            reduce using rule 15 (statement -> declaration NEWLINE .)
    VECTOR          reduce using rule 15 (statement -> declaration NEWLINE .)
    LEFT            reduce using rule 15 (statement -> declaration NEWLINE .)
    RIGHT           reduce using rule 15 (statement -> declaration NEWLINE .)
    FORWARD         reduce using rule 15 (statement -> declaration NEWLINE .)
    BACK            reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_RIGHT    reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_LEFT     reduce using rule 15 (statement -> declaration NEWLINE .)
    LMS             reduce using rule 15 (statement -> declaration NEWLINE .)
    REFLECT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DRILL           reduce using rule 15 (statement -> declaration NEWLINE .)
    TRUE            reduce using rule 15 (statement -> declaration NEWLINE .)
    FALSE           reduce using rule 15 (statement -> declaration NEWLINE .)
    UNDEFINED       reduce using rule 15 (statement -> declaration NEWLINE .)
    DECIMAL         reduce using rule 15 (statement -> declaration NEWLINE .)
    EXIT            reduce using rule 15 (statement -> declaration NEWLINE .)
    WOOD            reduce using rule 15 (statement -> declaration NEWLINE .)
    STEEL           reduce using rule 15 (statement -> declaration NEWLINE .)
    GLASS           reduce using rule 15 (statement -> declaration NEWLINE .)
    CONCRETE        reduce using rule 15 (statement -> declaration NEWLINE .)
    PLASTIC         reduce using rule 15 (statement -> declaration NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 15 (statement -> declaration NEWLINE .)
    QUOTE           reduce using rule 15 (statement -> declaration NEWLINE .)
    MINUS           reduce using rule 15 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 15 (statement -> declaration NEWLINE .)
    $end            reduce using rule 15 (statement -> declaration NEWLINE .)
    END             reduce using rule 15 (statement -> declaration NEWLINE .)


state 54

    (16) statement -> assignment NEWLINE .

    RETURN          reduce using rule 16 (statement -> assignment NEWLINE .)
    DO              reduce using rule 16 (statement -> assignment NEWLINE .)
    IF              reduce using rule 16 (statement -> assignment NEWLINE .)
    FUNCTION        reduce using rule 16 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 16 (statement -> assignment NEWLINE .)
    INTEGER         reduce using rule 16 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 16 (statement -> assignment NEWLINE .)
    BOOL            reduce using rule 16 (statement -> assignment NEWLINE .)
    VECTOR          reduce using rule 16 (statement -> assignment NEWLINE .)
    LEFT            reduce using rule 16 (statement -> assignment NEWLINE .)
    RIGHT           reduce using rule 16 (statement -> assignment NEWLINE .)
    FORWARD         reduce using rule 16 (statement -> assignment NEWLINE .)
    BACK            reduce using rule 16 (statement -> assignment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 16 (statement -> assignment NEWLINE .)
    ROTATE_LEFT     reduce using rule 16 (statement -> assignment NEWLINE .)
    LMS             reduce using rule 16 (statement -> assignment NEWLINE .)
    REFLECT         reduce using rule 16 (statement -> assignment NEWLINE .)
    DRILL           reduce using rule 16 (statement -> assignment NEWLINE .)
    TRUE            reduce using rule 16 (statement -> assignment NEWLINE .)
    FALSE           reduce using rule 16 (statement -> assignment NEWLINE .)
    UNDEFINED       reduce using rule 16 (statement -> assignment NEWLINE .)
    DECIMAL         reduce using rule 16 (statement -> assignment NEWLINE .)
    EXIT            reduce using rule 16 (statement -> assignment NEWLINE .)
    WOOD            reduce using rule 16 (statement -> assignment NEWLINE .)
    STEEL           reduce using rule 16 (statement -> assignment NEWLINE .)
    GLASS           reduce using rule 16 (statement -> assignment NEWLINE .)
    CONCRETE        reduce using rule 16 (statement -> assignment NEWLINE .)
    PLASTIC         reduce using rule 16 (statement -> assignment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 16 (statement -> assignment NEWLINE .)
    QUOTE           reduce using rule 16 (statement -> assignment NEWLINE .)
    MINUS           reduce using rule 16 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 16 (statement -> assignment NEWLINE .)
    $end            reduce using rule 16 (statement -> assignment NEWLINE .)
    END             reduce using rule 16 (statement -> assignment NEWLINE .)


state 55

    (17) statement -> while NEWLINE .

    RETURN          reduce using rule 17 (statement -> while NEWLINE .)
    DO              reduce using rule 17 (statement -> while NEWLINE .)
    IF              reduce using rule 17 (statement -> while NEWLINE .)
    FUNCTION        reduce using rule 17 (statement -> while NEWLINE .)
    VARIABLE        reduce using rule 17 (statement -> while NEWLINE .)
    INTEGER         reduce using rule 17 (statement -> while NEWLINE .)
    STRING          reduce using rule 17 (statement -> while NEWLINE .)
    BOOL            reduce using rule 17 (statement -> while NEWLINE .)
    VECTOR          reduce using rule 17 (statement -> while NEWLINE .)
    LEFT            reduce using rule 17 (statement -> while NEWLINE .)
    RIGHT           reduce using rule 17 (statement -> while NEWLINE .)
    FORWARD         reduce using rule 17 (statement -> while NEWLINE .)
    BACK            reduce using rule 17 (statement -> while NEWLINE .)
    ROTATE_RIGHT    reduce using rule 17 (statement -> while NEWLINE .)
    ROTATE_LEFT     reduce using rule 17 (statement -> while NEWLINE .)
    LMS             reduce using rule 17 (statement -> while NEWLINE .)
    REFLECT         reduce using rule 17 (statement -> while NEWLINE .)
    DRILL           reduce using rule 17 (statement -> while NEWLINE .)
    TRUE            reduce using rule 17 (statement -> while NEWLINE .)
    FALSE           reduce using rule 17 (statement -> while NEWLINE .)
    UNDEFINED       reduce using rule 17 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 17 (statement -> while NEWLINE .)
    EXIT            reduce using rule 17 (statement -> while NEWLINE .)
    WOOD            reduce using rule 17 (statement -> while NEWLINE .)
    STEEL           reduce using rule 17 (statement -> while NEWLINE .)
    GLASS           reduce using rule 17 (statement -> while NEWLINE .)
    CONCRETE        reduce using rule 17 (statement -> while NEWLINE .)
    PLASTIC         reduce using rule 17 (statement -> while NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 17 (statement -> while NEWLINE .)
    QUOTE           reduce using rule 17 (statement -> while NEWLINE .)
    MINUS           reduce using rule 17 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 17 (statement -> while NEWLINE .)
    $end            reduce using rule 17 (statement -> while NEWLINE .)
    END             reduce using rule 17 (statement -> while NEWLINE .)


state 56

    (18) statement -> if NEWLINE .

    RETURN          reduce using rule 18 (statement -> if NEWLINE .)
    DO              reduce using rule 18 (statement -> if NEWLINE .)
    IF              reduce using rule 18 (statement -> if NEWLINE .)
    FUNCTION        reduce using rule 18 (statement -> if NEWLINE .)
    VARIABLE        reduce using rule 18 (statement -> if NEWLINE .)
    INTEGER         reduce using rule 18 (statement -> if NEWLINE .)
    STRING          reduce using rule 18 (statement -> if NEWLINE .)
    BOOL            reduce using rule 18 (statement -> if NEWLINE .)
    VECTOR          reduce using rule 18 (statement -> if NEWLINE .)
    LEFT            reduce using rule 18 (statement -> if NEWLINE .)
    RIGHT           reduce using rule 18 (statement -> if NEWLINE .)
    FORWARD         reduce using rule 18 (statement -> if NEWLINE .)
    BACK            reduce using rule 18 (statement -> if NEWLINE .)
    ROTATE_RIGHT    reduce using rule 18 (statement -> if NEWLINE .)
    ROTATE_LEFT     reduce using rule 18 (statement -> if NEWLINE .)
    LMS             reduce using rule 18 (statement -> if NEWLINE .)
    REFLECT         reduce using rule 18 (statement -> if NEWLINE .)
    DRILL           reduce using rule 18 (statement -> if NEWLINE .)
    TRUE            reduce using rule 18 (statement -> if NEWLINE .)
    FALSE           reduce using rule 18 (statement -> if NEWLINE .)
    UNDEFINED       reduce using rule 18 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 18 (statement -> if NEWLINE .)
    EXIT            reduce using rule 18 (statement -> if NEWLINE .)
    WOOD            reduce using rule 18 (statement -> if NEWLINE .)
    STEEL           reduce using rule 18 (statement -> if NEWLINE .)
    GLASS           reduce using rule 18 (statement -> if NEWLINE .)
    CONCRETE        reduce using rule 18 (statement -> if NEWLINE .)
    PLASTIC         reduce using rule 18 (statement -> if NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 18 (statement -> if NEWLINE .)
    QUOTE           reduce using rule 18 (statement -> if NEWLINE .)
    MINUS           reduce using rule 18 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 18 (statement -> if NEWLINE .)
    $end            reduce using rule 18 (statement -> if NEWLINE .)
    END             reduce using rule 18 (statement -> if NEWLINE .)


state 57

    (19) statement -> command NEWLINE .

    RETURN          reduce using rule 19 (statement -> command NEWLINE .)
    DO              reduce using rule 19 (statement -> command NEWLINE .)
    IF              reduce using rule 19 (statement -> command NEWLINE .)
    FUNCTION        reduce using rule 19 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 19 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 19 (statement -> command NEWLINE .)
    STRING          reduce using rule 19 (statement -> command NEWLINE .)
    BOOL            reduce using rule 19 (statement -> command NEWLINE .)
    VECTOR          reduce using rule 19 (statement -> command NEWLINE .)
    LEFT            reduce using rule 19 (statement -> command NEWLINE .)
    RIGHT           reduce using rule 19 (statement -> command NEWLINE .)
    FORWARD         reduce using rule 19 (statement -> command NEWLINE .)
    BACK            reduce using rule 19 (statement -> command NEWLINE .)
    ROTATE_RIGHT    reduce using rule 19 (statement -> command NEWLINE .)
    ROTATE_LEFT     reduce using rule 19 (statement -> command NEWLINE .)
    LMS             reduce using rule 19 (statement -> command NEWLINE .)
    REFLECT         reduce using rule 19 (statement -> command NEWLINE .)
    DRILL           reduce using rule 19 (statement -> command NEWLINE .)
    TRUE            reduce using rule 19 (statement -> command NEWLINE .)
    FALSE           reduce using rule 19 (statement -> command NEWLINE .)
    UNDEFINED       reduce using rule 19 (statement -> command NEWLINE .)
    DECIMAL         reduce using rule 19 (statement -> command NEWLINE .)
    EXIT            reduce using rule 19 (statement -> command NEWLINE .)
    WOOD            reduce using rule 19 (statement -> command NEWLINE .)
    STEEL           reduce using rule 19 (statement -> command NEWLINE .)
    GLASS           reduce using rule 19 (statement -> command NEWLINE .)
    CONCRETE        reduce using rule 19 (statement -> command NEWLINE .)
    PLASTIC         reduce using rule 19 (statement -> command NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 19 (statement -> command NEWLINE .)
    QUOTE           reduce using rule 19 (statement -> command NEWLINE .)
    MINUS           reduce using rule 19 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 19 (statement -> command NEWLINE .)
    $end            reduce using rule 19 (statement -> command NEWLINE .)
    END             reduce using rule 19 (statement -> command NEWLINE .)


state 58

    (20) statement -> function NEWLINE .

    RETURN          reduce using rule 20 (statement -> function NEWLINE .)
    DO              reduce using rule 20 (statement -> function NEWLINE .)
    IF              reduce using rule 20 (statement -> function NEWLINE .)
    FUNCTION        reduce using rule 20 (statement -> function NEWLINE .)
    VARIABLE        reduce using rule 20 (statement -> function NEWLINE .)
    INTEGER         reduce using rule 20 (statement -> function NEWLINE .)
    STRING          reduce using rule 20 (statement -> function NEWLINE .)
    BOOL            reduce using rule 20 (statement -> function NEWLINE .)
    VECTOR          reduce using rule 20 (statement -> function NEWLINE .)
    LEFT            reduce using rule 20 (statement -> function NEWLINE .)
    RIGHT           reduce using rule 20 (statement -> function NEWLINE .)
    FORWARD         reduce using rule 20 (statement -> function NEWLINE .)
    BACK            reduce using rule 20 (statement -> function NEWLINE .)
    ROTATE_RIGHT    reduce using rule 20 (statement -> function NEWLINE .)
    ROTATE_LEFT     reduce using rule 20 (statement -> function NEWLINE .)
    LMS             reduce using rule 20 (statement -> function NEWLINE .)
    REFLECT         reduce using rule 20 (statement -> function NEWLINE .)
    DRILL           reduce using rule 20 (statement -> function NEWLINE .)
    TRUE            reduce using rule 20 (statement -> function NEWLINE .)
    FALSE           reduce using rule 20 (statement -> function NEWLINE .)
    UNDEFINED       reduce using rule 20 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 20 (statement -> function NEWLINE .)
    EXIT            reduce using rule 20 (statement -> function NEWLINE .)
    WOOD            reduce using rule 20 (statement -> function NEWLINE .)
    STEEL           reduce using rule 20 (statement -> function NEWLINE .)
    GLASS           reduce using rule 20 (statement -> function NEWLINE .)
    CONCRETE        reduce using rule 20 (statement -> function NEWLINE .)
    PLASTIC         reduce using rule 20 (statement -> function NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 20 (statement -> function NEWLINE .)
    QUOTE           reduce using rule 20 (statement -> function NEWLINE .)
    MINUS           reduce using rule 20 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 20 (statement -> function NEWLINE .)
    $end            reduce using rule 20 (statement -> function NEWLINE .)
    END             reduce using rule 20 (statement -> function NEWLINE .)


state 59

    (21) statement -> call NEWLINE .

    RETURN          reduce using rule 21 (statement -> call NEWLINE .)
    DO              reduce using rule 21 (statement -> call NEWLINE .)
    IF              reduce using rule 21 (statement -> call NEWLINE .)
    FUNCTION        reduce using rule 21 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 21 (statement -> call NEWLINE .)
    INTEGER         reduce using rule 21 (statement -> call NEWLINE .)
    STRING          reduce using rule 21 (statement -> call NEWLINE .)
    BOOL            reduce using rule 21 (statement -> call NEWLINE .)
    VECTOR          reduce using rule 21 (statement -> call NEWLINE .)
    LEFT            reduce using rule 21 (statement -> call NEWLINE .)
    RIGHT           reduce using rule 21 (statement -> call NEWLINE .)
    FORWARD         reduce using rule 21 (statement -> call NEWLINE .)
    BACK            reduce using rule 21 (statement -> call NEWLINE .)
    ROTATE_RIGHT    reduce using rule 21 (statement -> call NEWLINE .)
    ROTATE_LEFT     reduce using rule 21 (statement -> call NEWLINE .)
    LMS             reduce using rule 21 (statement -> call NEWLINE .)
    REFLECT         reduce using rule 21 (statement -> call NEWLINE .)
    DRILL           reduce using rule 21 (statement -> call NEWLINE .)
    TRUE            reduce using rule 21 (statement -> call NEWLINE .)
    FALSE           reduce using rule 21 (statement -> call NEWLINE .)
    UNDEFINED       reduce using rule 21 (statement -> call NEWLINE .)
    DECIMAL         reduce using rule 21 (statement -> call NEWLINE .)
    EXIT            reduce using rule 21 (statement -> call NEWLINE .)
    WOOD            reduce using rule 21 (statement -> call NEWLINE .)
    STEEL           reduce using rule 21 (statement -> call NEWLINE .)
    GLASS           reduce using rule 21 (statement -> call NEWLINE .)
    CONCRETE        reduce using rule 21 (statement -> call NEWLINE .)
    PLASTIC         reduce using rule 21 (statement -> call NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 21 (statement -> call NEWLINE .)
    QUOTE           reduce using rule 21 (statement -> call NEWLINE .)
    MINUS           reduce using rule 21 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 21 (statement -> call NEWLINE .)
    $end            reduce using rule 21 (statement -> call NEWLINE .)
    END             reduce using rule 21 (statement -> call NEWLINE .)


state 60

    (22) statement -> RETURN expression . NEWLINE
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    NEWLINE         shift and go to state 101
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 61

    (36) expression -> variable .

    NEWLINE         reduce using rule 36 (expression -> variable .)
    PLUS            reduce using rule 36 (expression -> variable .)
    MINUS           reduce using rule 36 (expression -> variable .)
    LESS            reduce using rule 36 (expression -> variable .)
    GREATER         reduce using rule 36 (expression -> variable .)
    EQ              reduce using rule 36 (expression -> variable .)
    NOTEQ           reduce using rule 36 (expression -> variable .)
    THEN            reduce using rule 36 (expression -> variable .)
    TO              reduce using rule 36 (expression -> variable .)
    UNTIL           reduce using rule 36 (expression -> variable .)
    ELSE            reduce using rule 36 (expression -> variable .)
    COMMA           reduce using rule 36 (expression -> variable .)
    RBRACKET        reduce using rule 36 (expression -> variable .)
    CONTINUE        reduce using rule 36 (expression -> variable .)
    L_QBRACKET      reduce using rule 36 (expression -> variable .)


state 62

    (40) expression -> call .

    NEWLINE         reduce using rule 40 (expression -> call .)
    PLUS            reduce using rule 40 (expression -> call .)
    MINUS           reduce using rule 40 (expression -> call .)
    LESS            reduce using rule 40 (expression -> call .)
    GREATER         reduce using rule 40 (expression -> call .)
    EQ              reduce using rule 40 (expression -> call .)
    NOTEQ           reduce using rule 40 (expression -> call .)
    THEN            reduce using rule 40 (expression -> call .)
    TO              reduce using rule 40 (expression -> call .)
    UNTIL           reduce using rule 40 (expression -> call .)
    ELSE            reduce using rule 40 (expression -> call .)
    COMMA           reduce using rule 40 (expression -> call .)
    RBRACKET        reduce using rule 40 (expression -> call .)
    CONTINUE        reduce using rule 40 (expression -> call .)
    L_QBRACKET      reduce using rule 40 (expression -> call .)


state 63

    (34) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (35) variable -> VARIABLE .
    (85) call -> VARIABLE . LBRACKET parameters RBRACKET
    (86) call -> VARIABLE . BRACKETS

    R_QBRACKET      shift and go to state 93
    NEWLINE         reduce using rule 35 (variable -> VARIABLE .)
    PLUS            reduce using rule 35 (variable -> VARIABLE .)
    MINUS           reduce using rule 35 (variable -> VARIABLE .)
    LESS            reduce using rule 35 (variable -> VARIABLE .)
    GREATER         reduce using rule 35 (variable -> VARIABLE .)
    EQ              reduce using rule 35 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 35 (variable -> VARIABLE .)
    THEN            reduce using rule 35 (variable -> VARIABLE .)
    TO              reduce using rule 35 (variable -> VARIABLE .)
    UNTIL           reduce using rule 35 (variable -> VARIABLE .)
    ELSE            reduce using rule 35 (variable -> VARIABLE .)
    COMMA           reduce using rule 35 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 35 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 35 (variable -> VARIABLE .)
    L_QBRACKET      reduce using rule 35 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 91
    BRACKETS        shift and go to state 92


state 64

    (70) converting_command -> expression TO . type
    (71) converting_command -> expression TO . expression
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 102
    type                           shift and go to state 103
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 65

    (55) math_expression -> expression PLUS . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 104
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 66

    (56) math_expression -> expression MINUS . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 105
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 67

    (58) math_expression -> expression LESS . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 106
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 68

    (59) math_expression -> expression GREATER . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 107
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 69

    (60) math_expression -> expression EQ . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 108
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 70

    (61) math_expression -> expression NOTEQ . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 109
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 71

    (23) statement -> empty NEWLINE .

    RETURN          reduce using rule 23 (statement -> empty NEWLINE .)
    DO              reduce using rule 23 (statement -> empty NEWLINE .)
    IF              reduce using rule 23 (statement -> empty NEWLINE .)
    FUNCTION        reduce using rule 23 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 23 (statement -> empty NEWLINE .)
    INTEGER         reduce using rule 23 (statement -> empty NEWLINE .)
    STRING          reduce using rule 23 (statement -> empty NEWLINE .)
    BOOL            reduce using rule 23 (statement -> empty NEWLINE .)
    VECTOR          reduce using rule 23 (statement -> empty NEWLINE .)
    LEFT            reduce using rule 23 (statement -> empty NEWLINE .)
    RIGHT           reduce using rule 23 (statement -> empty NEWLINE .)
    FORWARD         reduce using rule 23 (statement -> empty NEWLINE .)
    BACK            reduce using rule 23 (statement -> empty NEWLINE .)
    ROTATE_RIGHT    reduce using rule 23 (statement -> empty NEWLINE .)
    ROTATE_LEFT     reduce using rule 23 (statement -> empty NEWLINE .)
    LMS             reduce using rule 23 (statement -> empty NEWLINE .)
    REFLECT         reduce using rule 23 (statement -> empty NEWLINE .)
    DRILL           reduce using rule 23 (statement -> empty NEWLINE .)
    TRUE            reduce using rule 23 (statement -> empty NEWLINE .)
    FALSE           reduce using rule 23 (statement -> empty NEWLINE .)
    UNDEFINED       reduce using rule 23 (statement -> empty NEWLINE .)
    DECIMAL         reduce using rule 23 (statement -> empty NEWLINE .)
    EXIT            reduce using rule 23 (statement -> empty NEWLINE .)
    WOOD            reduce using rule 23 (statement -> empty NEWLINE .)
    STEEL           reduce using rule 23 (statement -> empty NEWLINE .)
    GLASS           reduce using rule 23 (statement -> empty NEWLINE .)
    CONCRETE        reduce using rule 23 (statement -> empty NEWLINE .)
    PLASTIC         reduce using rule 23 (statement -> empty NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 23 (statement -> empty NEWLINE .)
    QUOTE           reduce using rule 23 (statement -> empty NEWLINE .)
    MINUS           reduce using rule 23 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 23 (statement -> empty NEWLINE .)
    $end            reduce using rule 23 (statement -> empty NEWLINE .)
    END             reduce using rule 23 (statement -> empty NEWLINE .)


state 72

    (24) declaration -> type variables .

    NEWLINE         reduce using rule 24 (declaration -> type variables .)
    UNTIL           reduce using rule 24 (declaration -> type variables .)
    ELSE            reduce using rule 24 (declaration -> type variables .)


state 73

    (29) variables -> variable . COMMA variables
    (31) variables -> variable .
    (33) assignment -> variable . ASSIGNMENT expression

    COMMA           shift and go to state 110
    NEWLINE         reduce using rule 31 (variables -> variable .)
    UNTIL           reduce using rule 31 (variables -> variable .)
    ELSE            reduce using rule 31 (variables -> variable .)
    ASSIGNMENT      shift and go to state 76


state 74

    (30) variables -> assignment . COMMA variables
    (32) variables -> assignment .

    COMMA           shift and go to state 111
    NEWLINE         reduce using rule 32 (variables -> assignment .)
    UNTIL           reduce using rule 32 (variables -> assignment .)
    ELSE            reduce using rule 32 (variables -> assignment .)


state 75

    (34) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (35) variable -> VARIABLE .

    R_QBRACKET      shift and go to state 93
    COMMA           reduce using rule 35 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 35 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 35 (variable -> VARIABLE .)
    UNTIL           reduce using rule 35 (variable -> VARIABLE .)
    ELSE            reduce using rule 35 (variable -> VARIABLE .)


state 76

    (33) assignment -> variable ASSIGNMENT . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    variable                       shift and go to state 61
    expression                     shift and go to state 112
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 77

    (62) while -> DO statements_group . UNTIL expression

    UNTIL           shift and go to state 113


state 78

    (2) statements_group -> BEGIN . statements END
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . assignment NEWLINE
    (17) statement -> . while NEWLINE
    (18) statement -> . if NEWLINE
    (19) statement -> . command NEWLINE
    (20) statement -> . function NEWLINE
    (21) statement -> . call NEWLINE
    (22) statement -> . RETURN expression NEWLINE
    (23) statement -> . empty NEWLINE
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    statements                     shift and go to state 114
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    expression                     shift and go to state 12
    empty                          shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 79

    (3) statements_group -> inner_statement .

    UNTIL           reduce using rule 3 (statements_group -> inner_statement .)
    ELSE            reduce using rule 3 (statements_group -> inner_statement .)
    NEWLINE         reduce using rule 3 (statements_group -> inner_statement .)


state 80

    (4) inner_statement -> declaration .

    UNTIL           reduce using rule 4 (inner_statement -> declaration .)
    ELSE            reduce using rule 4 (inner_statement -> declaration .)
    NEWLINE         reduce using rule 4 (inner_statement -> declaration .)


state 81

    (5) inner_statement -> assignment .

    UNTIL           reduce using rule 5 (inner_statement -> assignment .)
    ELSE            reduce using rule 5 (inner_statement -> assignment .)
    NEWLINE         reduce using rule 5 (inner_statement -> assignment .)


state 82

    (6) inner_statement -> while .

    UNTIL           reduce using rule 6 (inner_statement -> while .)
    ELSE            reduce using rule 6 (inner_statement -> while .)
    NEWLINE         reduce using rule 6 (inner_statement -> while .)


state 83

    (7) inner_statement -> if .

    UNTIL           reduce using rule 7 (inner_statement -> if .)
    ELSE            reduce using rule 7 (inner_statement -> if .)
    NEWLINE         reduce using rule 7 (inner_statement -> if .)


state 84

    (8) inner_statement -> command .

    UNTIL           reduce using rule 8 (inner_statement -> command .)
    ELSE            reduce using rule 8 (inner_statement -> command .)
    NEWLINE         reduce using rule 8 (inner_statement -> command .)


state 85

    (9) inner_statement -> function .

    UNTIL           reduce using rule 9 (inner_statement -> function .)
    ELSE            reduce using rule 9 (inner_statement -> function .)
    NEWLINE         reduce using rule 9 (inner_statement -> function .)


state 86

    (10) inner_statement -> call .
    (40) expression -> call .

    UNTIL           reduce using rule 10 (inner_statement -> call .)
    ELSE            reduce using rule 10 (inner_statement -> call .)
    NEWLINE         reduce using rule 10 (inner_statement -> call .)
    TO              reduce using rule 40 (expression -> call .)
    PLUS            reduce using rule 40 (expression -> call .)
    MINUS           reduce using rule 40 (expression -> call .)
    LESS            reduce using rule 40 (expression -> call .)
    GREATER         reduce using rule 40 (expression -> call .)
    EQ              reduce using rule 40 (expression -> call .)
    NOTEQ           reduce using rule 40 (expression -> call .)


state 87

    (11) inner_statement -> RETURN . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 115
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 88

    (12) inner_statement -> empty .

    UNTIL           reduce using rule 12 (inner_statement -> empty .)
    ELSE            reduce using rule 12 (inner_statement -> empty .)
    NEWLINE         reduce using rule 12 (inner_statement -> empty .)


state 89

    (63) if -> IF expression . THEN statements_group
    (64) if -> IF expression . THEN statements_group ELSE statements_group
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    THEN            shift and go to state 116
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 90

    (65) function -> FUNCTION OF . type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> FUNCTION OF . type VARIABLE BRACKETS statements_group
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type

    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26

    type                           shift and go to state 117

state 91

    (85) call -> VARIABLE LBRACKET . parameters RBRACKET
    (88) parameters -> . parameters COMMA parameter
    (89) parameters -> . parameter
    (90) parameters -> . parameters CONTINUE
    (91) parameter -> . expression
    (92) parameter -> . VARIABLE EQ expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 118
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    parameters                     shift and go to state 119
    parameter                      shift and go to state 120
    expression                     shift and go to state 121
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 92

    (86) call -> VARIABLE BRACKETS .

    NEWLINE         reduce using rule 86 (call -> VARIABLE BRACKETS .)
    TO              reduce using rule 86 (call -> VARIABLE BRACKETS .)
    PLUS            reduce using rule 86 (call -> VARIABLE BRACKETS .)
    MINUS           reduce using rule 86 (call -> VARIABLE BRACKETS .)
    LESS            reduce using rule 86 (call -> VARIABLE BRACKETS .)
    GREATER         reduce using rule 86 (call -> VARIABLE BRACKETS .)
    EQ              reduce using rule 86 (call -> VARIABLE BRACKETS .)
    NOTEQ           reduce using rule 86 (call -> VARIABLE BRACKETS .)
    UNTIL           reduce using rule 86 (call -> VARIABLE BRACKETS .)
    THEN            reduce using rule 86 (call -> VARIABLE BRACKETS .)
    ELSE            reduce using rule 86 (call -> VARIABLE BRACKETS .)
    COMMA           reduce using rule 86 (call -> VARIABLE BRACKETS .)
    RBRACKET        reduce using rule 86 (call -> VARIABLE BRACKETS .)
    CONTINUE        reduce using rule 86 (call -> VARIABLE BRACKETS .)
    L_QBRACKET      reduce using rule 86 (call -> VARIABLE BRACKETS .)


state 93

    (34) variable -> VARIABLE R_QBRACKET . expression L_QBRACKET
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 122
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 94

    (72) vector_command -> VARIABLE PUSH . BACK expression
    (74) vector_command -> VARIABLE PUSH . FRONT expression

    BACK            shift and go to state 123
    FRONT           shift and go to state 124


state 95

    (73) vector_command -> VARIABLE POP . BACK
    (75) vector_command -> VARIABLE POP . FRONT

    BACK            shift and go to state 125
    FRONT           shift and go to state 126


state 96

    (28) type -> VECTOR OF . type
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type

    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26

    type                           shift and go to state 127

state 97

    (41) qstring -> DOUBLE_QUOTE string . DOUBLE_QUOTE
    (43) string -> string . VARIABLE

    DOUBLE_QUOTE    shift and go to state 128
    VARIABLE        shift and go to state 129


state 98

    (44) string -> VARIABLE .

    DOUBLE_QUOTE    reduce using rule 44 (string -> VARIABLE .)
    VARIABLE        reduce using rule 44 (string -> VARIABLE .)
    QUOTE           reduce using rule 44 (string -> VARIABLE .)


state 99

    (42) qstring -> QUOTE string . QUOTE
    (43) string -> string . VARIABLE

    QUOTE           shift and go to state 130
    VARIABLE        shift and go to state 129


state 100

    (57) math_expression -> MINUS expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 57 (math_expression -> MINUS expression .)
    NEWLINE         reduce using rule 57 (math_expression -> MINUS expression .)
    THEN            reduce using rule 57 (math_expression -> MINUS expression .)
    UNTIL           reduce using rule 57 (math_expression -> MINUS expression .)
    ELSE            reduce using rule 57 (math_expression -> MINUS expression .)
    COMMA           reduce using rule 57 (math_expression -> MINUS expression .)
    RBRACKET        reduce using rule 57 (math_expression -> MINUS expression .)
    CONTINUE        reduce using rule 57 (math_expression -> MINUS expression .)
    L_QBRACKET      reduce using rule 57 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70

  ! PLUS            [ reduce using rule 57 (math_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 57 (math_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 57 (math_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 57 (math_expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 57 (math_expression -> MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 57 (math_expression -> MINUS expression .) ]


state 101

    (22) statement -> RETURN expression NEWLINE .

    RETURN          reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    DO              reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    IF              reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    FUNCTION        reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    VARIABLE        reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    INTEGER         reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    STRING          reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    BOOL            reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    VECTOR          reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    LEFT            reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    RIGHT           reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    FORWARD         reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    BACK            reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    ROTATE_RIGHT    reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    ROTATE_LEFT     reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    LMS             reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    REFLECT         reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    DRILL           reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    TRUE            reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    FALSE           reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    UNDEFINED       reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    DECIMAL         reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    EXIT            reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    WOOD            reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    STEEL           reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    GLASS           reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    CONCRETE        reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    PLASTIC         reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    QUOTE           reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    MINUS           reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    NEWLINE         reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 22 (statement -> RETURN expression NEWLINE .)
    END             reduce using rule 22 (statement -> RETURN expression NEWLINE .)


state 102

    (71) converting_command -> expression TO expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 71 (converting_command -> expression TO expression .)
    UNTIL           reduce using rule 71 (converting_command -> expression TO expression .)
    ELSE            reduce using rule 71 (converting_command -> expression TO expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 103

    (70) converting_command -> expression TO type .

    NEWLINE         reduce using rule 70 (converting_command -> expression TO type .)
    UNTIL           reduce using rule 70 (converting_command -> expression TO type .)
    ELSE            reduce using rule 70 (converting_command -> expression TO type .)


state 104

    (55) math_expression -> expression PLUS expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 55 (math_expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 55 (math_expression -> expression PLUS expression .)
    THEN            reduce using rule 55 (math_expression -> expression PLUS expression .)
    UNTIL           reduce using rule 55 (math_expression -> expression PLUS expression .)
    ELSE            reduce using rule 55 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 55 (math_expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 55 (math_expression -> expression PLUS expression .)
    L_QBRACKET      reduce using rule 55 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70

  ! PLUS            [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]


state 105

    (56) math_expression -> expression MINUS expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 56 (math_expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 56 (math_expression -> expression MINUS expression .)
    THEN            reduce using rule 56 (math_expression -> expression MINUS expression .)
    UNTIL           reduce using rule 56 (math_expression -> expression MINUS expression .)
    ELSE            reduce using rule 56 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 56 (math_expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 56 (math_expression -> expression MINUS expression .)
    L_QBRACKET      reduce using rule 56 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70

  ! PLUS            [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]


state 106

    (58) math_expression -> expression LESS expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 58 (math_expression -> expression LESS expression .)
    NEWLINE         reduce using rule 58 (math_expression -> expression LESS expression .)
    THEN            reduce using rule 58 (math_expression -> expression LESS expression .)
    UNTIL           reduce using rule 58 (math_expression -> expression LESS expression .)
    ELSE            reduce using rule 58 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 58 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 58 (math_expression -> expression LESS expression .)
    CONTINUE        reduce using rule 58 (math_expression -> expression LESS expression .)
    L_QBRACKET      reduce using rule 58 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70

  ! PLUS            [ reduce using rule 58 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 58 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 58 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 58 (math_expression -> expression LESS expression .) ]
  ! EQ              [ reduce using rule 58 (math_expression -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 58 (math_expression -> expression LESS expression .) ]


state 107

    (59) math_expression -> expression GREATER expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 59 (math_expression -> expression GREATER expression .)
    NEWLINE         reduce using rule 59 (math_expression -> expression GREATER expression .)
    THEN            reduce using rule 59 (math_expression -> expression GREATER expression .)
    UNTIL           reduce using rule 59 (math_expression -> expression GREATER expression .)
    ELSE            reduce using rule 59 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 59 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 59 (math_expression -> expression GREATER expression .)
    CONTINUE        reduce using rule 59 (math_expression -> expression GREATER expression .)
    L_QBRACKET      reduce using rule 59 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70

  ! PLUS            [ reduce using rule 59 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 59 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 59 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 59 (math_expression -> expression GREATER expression .) ]
  ! EQ              [ reduce using rule 59 (math_expression -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 59 (math_expression -> expression GREATER expression .) ]


state 108

    (60) math_expression -> expression EQ expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 60 (math_expression -> expression EQ expression .)
    NEWLINE         reduce using rule 60 (math_expression -> expression EQ expression .)
    THEN            reduce using rule 60 (math_expression -> expression EQ expression .)
    UNTIL           reduce using rule 60 (math_expression -> expression EQ expression .)
    ELSE            reduce using rule 60 (math_expression -> expression EQ expression .)
    COMMA           reduce using rule 60 (math_expression -> expression EQ expression .)
    RBRACKET        reduce using rule 60 (math_expression -> expression EQ expression .)
    CONTINUE        reduce using rule 60 (math_expression -> expression EQ expression .)
    L_QBRACKET      reduce using rule 60 (math_expression -> expression EQ expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70

  ! PLUS            [ reduce using rule 60 (math_expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 60 (math_expression -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 60 (math_expression -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 60 (math_expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 60 (math_expression -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 60 (math_expression -> expression EQ expression .) ]


state 109

    (61) math_expression -> expression NOTEQ expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    NEWLINE         reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    THEN            reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    UNTIL           reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    ELSE            reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    COMMA           reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    CONTINUE        reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    L_QBRACKET      reduce using rule 61 (math_expression -> expression NOTEQ expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70

  ! PLUS            [ reduce using rule 61 (math_expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 61 (math_expression -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 61 (math_expression -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 61 (math_expression -> expression NOTEQ expression .) ]
  ! EQ              [ reduce using rule 61 (math_expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 61 (math_expression -> expression NOTEQ expression .) ]


state 110

    (29) variables -> variable COMMA . variables
    (29) variables -> . variable COMMA variables
    (30) variables -> . assignment COMMA variables
    (31) variables -> . variable
    (32) variables -> . assignment
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (33) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 75

    variable                       shift and go to state 73
    variables                      shift and go to state 131
    assignment                     shift and go to state 74

state 111

    (30) variables -> assignment COMMA . variables
    (29) variables -> . variable COMMA variables
    (30) variables -> . assignment COMMA variables
    (31) variables -> . variable
    (32) variables -> . assignment
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (33) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 75

    assignment                     shift and go to state 74
    variables                      shift and go to state 132
    variable                       shift and go to state 73

state 112

    (33) assignment -> variable ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 33 (assignment -> variable ASSIGNMENT expression .)
    COMMA           reduce using rule 33 (assignment -> variable ASSIGNMENT expression .)
    UNTIL           reduce using rule 33 (assignment -> variable ASSIGNMENT expression .)
    ELSE            reduce using rule 33 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 113

    (62) while -> DO statements_group UNTIL . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 133
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 114

    (2) statements_group -> BEGIN statements . END
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . assignment NEWLINE
    (17) statement -> . while NEWLINE
    (18) statement -> . if NEWLINE
    (19) statement -> . command NEWLINE
    (20) statement -> . function NEWLINE
    (21) statement -> . call NEWLINE
    (22) statement -> . RETURN expression NEWLINE
    (23) statement -> . empty NEWLINE
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    END             shift and go to state 134
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    statement                      shift and go to state 52
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    expression                     shift and go to state 12
    empty                          shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 115

    (11) inner_statement -> RETURN expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    UNTIL           reduce using rule 11 (inner_statement -> RETURN expression .)
    ELSE            reduce using rule 11 (inner_statement -> RETURN expression .)
    NEWLINE         reduce using rule 11 (inner_statement -> RETURN expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 116

    (63) if -> IF expression THEN . statements_group
    (64) if -> IF expression THEN . statements_group ELSE statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 78
    RETURN          shift and go to state 87
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    ELSE            reduce using rule 87 (empty -> .)
    NEWLINE         reduce using rule 87 (empty -> .)
    UNTIL           reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 12
    statements_group               shift and go to state 135
    inner_statement                shift and go to state 79
    declaration                    shift and go to state 80
    assignment                     shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    command                        shift and go to state 84
    function                       shift and go to state 85
    call                           shift and go to state 86
    empty                          shift and go to state 88
    type                           shift and go to state 14
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 117

    (65) function -> FUNCTION OF type . VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> FUNCTION OF type . VARIABLE BRACKETS statements_group

    VARIABLE        shift and go to state 136


state 118

    (92) parameter -> VARIABLE . EQ expression
    (34) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (35) variable -> VARIABLE .
    (85) call -> VARIABLE . LBRACKET parameters RBRACKET
    (86) call -> VARIABLE . BRACKETS

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 137
    R_QBRACKET      shift and go to state 93
    PLUS            reduce using rule 35 (variable -> VARIABLE .)
    MINUS           reduce using rule 35 (variable -> VARIABLE .)
    LESS            reduce using rule 35 (variable -> VARIABLE .)
    GREATER         reduce using rule 35 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 35 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 35 (variable -> VARIABLE .)
    COMMA           reduce using rule 35 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 35 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 91
    BRACKETS        shift and go to state 92

  ! EQ              [ reduce using rule 35 (variable -> VARIABLE .) ]


state 119

    (85) call -> VARIABLE LBRACKET parameters . RBRACKET
    (88) parameters -> parameters . COMMA parameter
    (90) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 138
    COMMA           shift and go to state 139
    CONTINUE        shift and go to state 140


state 120

    (89) parameters -> parameter .

    RBRACKET        reduce using rule 89 (parameters -> parameter .)
    COMMA           reduce using rule 89 (parameters -> parameter .)
    CONTINUE        reduce using rule 89 (parameters -> parameter .)


state 121

    (91) parameter -> expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 91 (parameter -> expression .)
    COMMA           reduce using rule 91 (parameter -> expression .)
    CONTINUE        reduce using rule 91 (parameter -> expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 122

    (34) variable -> VARIABLE R_QBRACKET expression . L_QBRACKET
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    L_QBRACKET      shift and go to state 141
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 123

    (72) vector_command -> VARIABLE PUSH BACK . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 142
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 124

    (74) vector_command -> VARIABLE PUSH FRONT . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 143
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 125

    (73) vector_command -> VARIABLE POP BACK .

    NEWLINE         reduce using rule 73 (vector_command -> VARIABLE POP BACK .)
    UNTIL           reduce using rule 73 (vector_command -> VARIABLE POP BACK .)
    ELSE            reduce using rule 73 (vector_command -> VARIABLE POP BACK .)


state 126

    (75) vector_command -> VARIABLE POP FRONT .

    NEWLINE         reduce using rule 75 (vector_command -> VARIABLE POP FRONT .)
    UNTIL           reduce using rule 75 (vector_command -> VARIABLE POP FRONT .)
    ELSE            reduce using rule 75 (vector_command -> VARIABLE POP FRONT .)


state 127

    (28) type -> VECTOR OF type .

    VARIABLE        reduce using rule 28 (type -> VECTOR OF type .)
    NEWLINE         reduce using rule 28 (type -> VECTOR OF type .)
    UNTIL           reduce using rule 28 (type -> VECTOR OF type .)
    ELSE            reduce using rule 28 (type -> VECTOR OF type .)


state 128

    (41) qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .

    TO              reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    PLUS            reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    MINUS           reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    LESS            reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    GREATER         reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    EQ              reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NOTEQ           reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NEWLINE         reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    THEN            reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    UNTIL           reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    ELSE            reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    COMMA           reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    RBRACKET        reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    CONTINUE        reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    L_QBRACKET      reduce using rule 41 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)


state 129

    (43) string -> string VARIABLE .

    DOUBLE_QUOTE    reduce using rule 43 (string -> string VARIABLE .)
    VARIABLE        reduce using rule 43 (string -> string VARIABLE .)
    QUOTE           reduce using rule 43 (string -> string VARIABLE .)


state 130

    (42) qstring -> QUOTE string QUOTE .

    TO              reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    PLUS            reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    MINUS           reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    LESS            reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    GREATER         reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    EQ              reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    NOTEQ           reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    NEWLINE         reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    THEN            reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    UNTIL           reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    ELSE            reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    COMMA           reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    RBRACKET        reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    CONTINUE        reduce using rule 42 (qstring -> QUOTE string QUOTE .)
    L_QBRACKET      reduce using rule 42 (qstring -> QUOTE string QUOTE .)


state 131

    (29) variables -> variable COMMA variables .

    NEWLINE         reduce using rule 29 (variables -> variable COMMA variables .)
    UNTIL           reduce using rule 29 (variables -> variable COMMA variables .)
    ELSE            reduce using rule 29 (variables -> variable COMMA variables .)


state 132

    (30) variables -> assignment COMMA variables .

    NEWLINE         reduce using rule 30 (variables -> assignment COMMA variables .)
    UNTIL           reduce using rule 30 (variables -> assignment COMMA variables .)
    ELSE            reduce using rule 30 (variables -> assignment COMMA variables .)


state 133

    (62) while -> DO statements_group UNTIL expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 62 (while -> DO statements_group UNTIL expression .)
    UNTIL           reduce using rule 62 (while -> DO statements_group UNTIL expression .)
    ELSE            reduce using rule 62 (while -> DO statements_group UNTIL expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 134

    (2) statements_group -> BEGIN statements END .

    UNTIL           reduce using rule 2 (statements_group -> BEGIN statements END .)
    ELSE            reduce using rule 2 (statements_group -> BEGIN statements END .)
    NEWLINE         reduce using rule 2 (statements_group -> BEGIN statements END .)


state 135

    (63) if -> IF expression THEN statements_group .
    (64) if -> IF expression THEN statements_group . ELSE statements_group

  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 63 (if -> IF expression THEN statements_group .)
    UNTIL           reduce using rule 63 (if -> IF expression THEN statements_group .)
    ELSE            shift and go to state 144

  ! ELSE            [ reduce using rule 63 (if -> IF expression THEN statements_group .) ]


state 136

    (65) function -> FUNCTION OF type VARIABLE . LBRACKET parameters RBRACKET statements_group
    (66) function -> FUNCTION OF type VARIABLE . BRACKETS statements_group

    LBRACKET        shift and go to state 145
    BRACKETS        shift and go to state 146


state 137

    (92) parameter -> VARIABLE EQ . expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 63
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 147
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 138

    (85) call -> VARIABLE LBRACKET parameters RBRACKET .

    NEWLINE         reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    TO              reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    PLUS            reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    MINUS           reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    LESS            reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    GREATER         reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    EQ              reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    NOTEQ           reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    UNTIL           reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    THEN            reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    ELSE            reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    COMMA           reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    RBRACKET        reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    CONTINUE        reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    L_QBRACKET      reduce using rule 85 (call -> VARIABLE LBRACKET parameters RBRACKET .)


state 139

    (88) parameters -> parameters COMMA . parameter
    (91) parameter -> . expression
    (92) parameter -> . VARIABLE EQ expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 118
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    parameter                      shift and go to state 148
    expression                     shift and go to state 121
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 140

    (90) parameters -> parameters CONTINUE .

    RBRACKET        reduce using rule 90 (parameters -> parameters CONTINUE .)
    COMMA           reduce using rule 90 (parameters -> parameters CONTINUE .)
    CONTINUE        reduce using rule 90 (parameters -> parameters CONTINUE .)


state 141

    (34) variable -> VARIABLE R_QBRACKET expression L_QBRACKET .

    ASSIGNMENT      reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    TO              reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    PLUS            reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    MINUS           reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    LESS            reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    GREATER         reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    EQ              reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    NOTEQ           reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    NEWLINE         reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    COMMA           reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    UNTIL           reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    ELSE            reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    THEN            reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    RBRACKET        reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    CONTINUE        reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    L_QBRACKET      reduce using rule 34 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)


state 142

    (72) vector_command -> VARIABLE PUSH BACK expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 72 (vector_command -> VARIABLE PUSH BACK expression .)
    UNTIL           reduce using rule 72 (vector_command -> VARIABLE PUSH BACK expression .)
    ELSE            reduce using rule 72 (vector_command -> VARIABLE PUSH BACK expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 143

    (74) vector_command -> VARIABLE PUSH FRONT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 74 (vector_command -> VARIABLE PUSH FRONT expression .)
    UNTIL           reduce using rule 74 (vector_command -> VARIABLE PUSH FRONT expression .)
    ELSE            reduce using rule 74 (vector_command -> VARIABLE PUSH FRONT expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 144

    (64) if -> IF expression THEN statements_group ELSE . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 78
    RETURN          shift and go to state 87
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    ELSE            reduce using rule 87 (empty -> .)
    NEWLINE         reduce using rule 87 (empty -> .)
    UNTIL           reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    expression                     shift and go to state 12
    statements_group               shift and go to state 149
    inner_statement                shift and go to state 79
    declaration                    shift and go to state 80
    assignment                     shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    command                        shift and go to state 84
    function                       shift and go to state 85
    call                           shift and go to state 86
    empty                          shift and go to state 88
    type                           shift and go to state 14
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 145

    (65) function -> FUNCTION OF type VARIABLE LBRACKET . parameters RBRACKET statements_group
    (88) parameters -> . parameters COMMA parameter
    (89) parameters -> . parameter
    (90) parameters -> . parameters CONTINUE
    (91) parameter -> . expression
    (92) parameter -> . VARIABLE EQ expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 118
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    parameters                     shift and go to state 150
    parameter                      shift and go to state 120
    expression                     shift and go to state 121
    variable                       shift and go to state 61
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38
    call                           shift and go to state 62

state 146

    (66) function -> FUNCTION OF type VARIABLE BRACKETS . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 78
    RETURN          shift and go to state 87
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    ELSE            reduce using rule 87 (empty -> .)
    NEWLINE         reduce using rule 87 (empty -> .)
    UNTIL           reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    type                           shift and go to state 14
    statements_group               shift and go to state 151
    inner_statement                shift and go to state 79
    declaration                    shift and go to state 80
    assignment                     shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    command                        shift and go to state 84
    function                       shift and go to state 85
    call                           shift and go to state 86
    expression                     shift and go to state 12
    empty                          shift and go to state 88
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 147

    (92) parameter -> VARIABLE EQ expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (58) math_expression -> expression . LESS expression
    (59) math_expression -> expression . GREATER expression
    (60) math_expression -> expression . EQ expression
    (61) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 92 (parameter -> VARIABLE EQ expression .)
    COMMA           reduce using rule 92 (parameter -> VARIABLE EQ expression .)
    CONTINUE        reduce using rule 92 (parameter -> VARIABLE EQ expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    LESS            shift and go to state 67
    GREATER         shift and go to state 68
    EQ              shift and go to state 69
    NOTEQ           shift and go to state 70


state 148

    (88) parameters -> parameters COMMA parameter .

    RBRACKET        reduce using rule 88 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 88 (parameters -> parameters COMMA parameter .)
    CONTINUE        reduce using rule 88 (parameters -> parameters COMMA parameter .)


state 149

    (64) if -> IF expression THEN statements_group ELSE statements_group .

    NEWLINE         reduce using rule 64 (if -> IF expression THEN statements_group ELSE statements_group .)
    UNTIL           reduce using rule 64 (if -> IF expression THEN statements_group ELSE statements_group .)
    ELSE            reduce using rule 64 (if -> IF expression THEN statements_group ELSE statements_group .)


state 150

    (65) function -> FUNCTION OF type VARIABLE LBRACKET parameters . RBRACKET statements_group
    (88) parameters -> parameters . COMMA parameter
    (90) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 152
    COMMA           shift and go to state 139
    CONTINUE        shift and go to state 140


state 151

    (66) function -> FUNCTION OF type VARIABLE BRACKETS statements_group .

    NEWLINE         reduce using rule 66 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    UNTIL           reduce using rule 66 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    ELSE            reduce using rule 66 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)


state 152

    (65) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (24) declaration -> . type variables
    (33) assignment -> . variable ASSIGNMENT expression
    (62) while -> . DO statements_group UNTIL expression
    (63) if -> . IF expression THEN statements_group
    (64) if -> . IF expression THEN statements_group ELSE statements_group
    (67) command -> . vector_command
    (68) command -> . robot_command
    (69) command -> . converting_command
    (65) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (66) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (85) call -> . VARIABLE LBRACKET parameters RBRACKET
    (86) call -> . VARIABLE BRACKETS
    (87) empty -> .
    (25) type -> . INTEGER
    (26) type -> . STRING
    (27) type -> . BOOL
    (28) type -> . VECTOR OF type
    (34) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (35) variable -> . VARIABLE
    (72) vector_command -> . VARIABLE PUSH BACK expression
    (73) vector_command -> . VARIABLE POP BACK
    (74) vector_command -> . VARIABLE PUSH FRONT expression
    (75) vector_command -> . VARIABLE POP FRONT
    (76) robot_command -> . LEFT
    (77) robot_command -> . RIGHT
    (78) robot_command -> . FORWARD
    (79) robot_command -> . BACK
    (80) robot_command -> . ROTATE_RIGHT
    (81) robot_command -> . ROTATE_LEFT
    (82) robot_command -> . LMS
    (83) robot_command -> . REFLECT
    (84) robot_command -> . DRILL
    (70) converting_command -> . expression TO type
    (71) converting_command -> . expression TO expression
    (36) expression -> . variable
    (37) expression -> . const
    (38) expression -> . qstring
    (39) expression -> . math_expression
    (40) expression -> . call
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . UNDEFINED
    (48) const -> . DECIMAL
    (49) const -> . EXIT
    (50) const -> . WOOD
    (51) const -> . STEEL
    (52) const -> . GLASS
    (53) const -> . CONCRETE
    (54) const -> . PLASTIC
    (41) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (42) qstring -> . QUOTE string QUOTE
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . MINUS expression
    (58) math_expression -> . expression LESS expression
    (59) math_expression -> . expression GREATER expression
    (60) math_expression -> . expression EQ expression
    (61) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 78
    RETURN          shift and go to state 87
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    ELSE            reduce using rule 87 (empty -> .)
    NEWLINE         reduce using rule 87 (empty -> .)
    UNTIL           reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    FORWARD         shift and go to state 30
    BACK            shift and go to state 27
    ROTATE_RIGHT    shift and go to state 31
    ROTATE_LEFT     shift and go to state 32
    LMS             shift and go to state 33
    REFLECT         shift and go to state 34
    DRILL           shift and go to state 35
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    UNDEFINED       shift and go to state 41
    DECIMAL         shift and go to state 42
    EXIT            shift and go to state 43
    WOOD            shift and go to state 44
    STEEL           shift and go to state 45
    GLASS           shift and go to state 46
    CONCRETE        shift and go to state 47
    PLASTIC         shift and go to state 48
    DOUBLE_QUOTE    shift and go to state 49
    QUOTE           shift and go to state 50
    MINUS           shift and go to state 51

    type                           shift and go to state 14
    statements_group               shift and go to state 153
    inner_statement                shift and go to state 79
    declaration                    shift and go to state 80
    assignment                     shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    command                        shift and go to state 84
    function                       shift and go to state 85
    call                           shift and go to state 86
    expression                     shift and go to state 12
    empty                          shift and go to state 88
    variable                       shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 36
    qstring                        shift and go to state 37
    math_expression                shift and go to state 38

state 153

    (65) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .

    NEWLINE         reduce using rule 65 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    UNTIL           reduce using rule 65 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    ELSE            reduce using rule 65 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 135 resolved as shift
