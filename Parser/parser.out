Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements_group -> BEGIN statements END
Rule 3     statements_group -> inner_statement
Rule 4     inner_statement -> declaration
Rule 5     inner_statement -> assignment
Rule 6     inner_statement -> while
Rule 7     inner_statement -> if
Rule 8     inner_statement -> command
Rule 9     inner_statement -> function
Rule 10    inner_statement -> call
Rule 11    inner_statement -> RETURN expression
Rule 12    inner_statement -> empty
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> declaration NEWLINE
Rule 16    statement -> comment NEWLINE
Rule 17    statement -> assignment NEWLINE
Rule 18    statement -> while NEWLINE
Rule 19    statement -> if NEWLINE
Rule 20    statement -> command NEWLINE
Rule 21    statement -> function NEWLINE
Rule 22    statement -> call NEWLINE
Rule 23    statement -> RETURN expression NEWLINE
Rule 24    statement -> empty NEWLINE
Rule 25    statement -> errors NEWLINE
Rule 26    statement -> errors
Rule 27    declaration -> type variables
Rule 28    comment -> COMMENT any
Rule 29    any -> any VARIABLE
Rule 30    any -> VARIABLE
Rule 31    type -> INTEGER
Rule 32    type -> STRING
Rule 33    type -> BOOL
Rule 34    type -> VECTOR OF type
Rule 35    type -> errors
Rule 36    variables -> variable COMMA variables
Rule 37    variables -> assignment COMMA variables
Rule 38    variables -> variable
Rule 39    variables -> assignment
Rule 40    assignment -> variable ASSIGNMENT expression
Rule 41    variable -> VARIABLE indexing
Rule 42    variable -> VARIABLE
Rule 43    indexing -> L_QBRACKET expression R_QBRACKET indexing
Rule 44    indexing -> L_QBRACKET expression R_QBRACKET
Rule 45    expression -> variable
Rule 46    expression -> const
Rule 47    expression -> qstring
Rule 48    expression -> math_expression
Rule 49    expression -> robot_command
Rule 50    expression -> converting_command
Rule 51    expression -> vector_pop
Rule 52    expression -> call
Rule 53    qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE
Rule 54    qstring -> QUOTE string QUOTE
Rule 55    string -> VARIABLE string
Rule 56    string -> DECIMAL string
Rule 57    string -> FALSE string
Rule 58    string -> TRUE string
Rule 59    string -> FALSE
Rule 60    string -> TRUE
Rule 61    string -> DECIMAL
Rule 62    string -> VARIABLE
Rule 63    const -> TRUE
Rule 64    const -> FALSE
Rule 65    const -> UNDEFINED
Rule 66    const -> DECIMAL
Rule 67    const -> EXIT
Rule 68    const -> WOOD
Rule 69    const -> STEEL
Rule 70    const -> GLASS
Rule 71    const -> CONCRETE
Rule 72    const -> PLASTIC
Rule 73    math_expression -> expression LESS expression
Rule 74    math_expression -> expression GREATER expression
Rule 75    math_expression -> expression EQ expression
Rule 76    math_expression -> expression NOTEQ expression
Rule 77    math_expression -> expression PLUS expression
Rule 78    math_expression -> expression MINUS expression
Rule 79    while -> DO statements_group UNTIL expression
Rule 80    if -> IF expression THEN statements_group
Rule 81    if -> IF expression THEN statements_group ELSE statements_group
Rule 82    function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
Rule 83    function -> FUNCTION OF type VARIABLE BRACKETS statements_group
Rule 84    command -> vector_command
Rule 85    command -> robot_command
Rule 86    converting_command -> expression TO type
Rule 87    converting_command -> expression TO expression
Rule 88    converting_command -> expression TO vector_of
Rule 89    vector_of -> VECTOR OF vector_of
Rule 90    vector_of -> VECTOR
Rule 91    vector_command -> variable PUSH BACK expression
Rule 92    vector_command -> variable PUSH FRONT expression
Rule 93    vector_pop -> variable POP BACK
Rule 94    vector_pop -> variable POP FRONT
Rule 95    robot_command -> LEFT
Rule 96    robot_command -> RIGHT
Rule 97    robot_command -> FORWARD
Rule 98    robot_command -> BACK
Rule 99    robot_command -> ROTATE_RIGHT
Rule 100   robot_command -> ROTATE_LEFT
Rule 101   robot_command -> LMS
Rule 102   robot_command -> REFLECT
Rule 103   robot_command -> DRILL
Rule 104   call -> VARIABLE LBRACKET parameters RBRACKET
Rule 105   call -> VARIABLE BRACKETS
Rule 106   empty -> <empty>
Rule 107   parameters -> parameters COMMA parameter
Rule 108   parameters -> parameter
Rule 109   parameters -> CONTINUE
Rule 110   parameter -> expression
Rule 111   parameter -> VARIABLE EQ expression
Rule 112   errors -> errors error
Rule 113   errors -> error

Terminals, with rules where they appear

ASSIGNMENT           : 40
BACK                 : 91 93 98
BEGIN                : 2
BOOL                 : 33
BRACKETS             : 83 105
COMMA                : 36 37 107
COMMENT              : 28
CONCRETE             : 71
CONTINUE             : 109
DECIMAL              : 56 61 66
DO                   : 79
DOUBLE_QUOTE         : 53 53
DRILL                : 103
ELSE                 : 81
END                  : 2
EQ                   : 75 111
EXIT                 : 67
FALSE                : 57 59 64
FORWARD              : 97
FRONT                : 92 94
FUNCTION             : 82 83
GLASS                : 70
GREATER              : 74
IF                   : 80 81
INTEGER              : 31
LBRACKET             : 82 104
LEFT                 : 95
LESS                 : 73
LMS                  : 101
L_QBRACKET           : 43 44
MINUS                : 78
NEWLINE              : 15 16 17 18 19 20 21 22 23 24 25
NOTEQ                : 76
OF                   : 34 82 83 89
PLASTIC              : 72
PLUS                 : 77
POP                  : 93 94
PUSH                 : 91 92
QUOTE                : 54 54
RBRACKET             : 82 104
REFLECT              : 102
RETURN               : 11 23
RIGHT                : 96
ROTATE_LEFT          : 100
ROTATE_RIGHT         : 99
R_QBRACKET           : 43 44
STEEL                : 69
STRING               : 32
THEN                 : 80 81
TO                   : 86 87 88
TRUE                 : 58 60 63
UNDEFINED            : 65
UNTIL                : 79
VARIABLE             : 29 30 41 42 55 62 82 83 104 105 111
VECTOR               : 34 89 90
WOOD                 : 68
error                : 112 113

Nonterminals, with rules where they appear

any                  : 28 29
assignment           : 5 17 37 39
call                 : 10 22 52
command              : 8 20
comment              : 16
const                : 46
converting_command   : 50
declaration          : 4 15
empty                : 12 24
errors               : 25 26 35 112
expression           : 11 23 40 43 44 73 73 74 74 75 75 76 76 77 77 78 78 79 80 81 86 87 87 88 91 92 110 111
function             : 9 21
if                   : 7 19
indexing             : 41 43
inner_statement      : 3
math_expression      : 48
parameter            : 107 108
parameters           : 82 104 107
program              : 0
qstring              : 47
robot_command        : 49 85
statement            : 13 14
statements           : 1 2 13
statements_group     : 79 80 81 81 82 83
string               : 53 54 55 56 57 58
type                 : 27 34 82 83 86
variable             : 36 38 40 45 91 92 93 94
variables            : 27 36 37
vector_command       : 84
vector_of            : 88 89
vector_pop           : 51
while                : 6 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (112) errors -> . errors error
    (113) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    NEWLINE         reduce using rule 106 (empty -> .)
    error           shift and go to state 24
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    empty                          shift and go to state 13
    errors                         shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (112) errors -> . errors error
    (113) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL

    $end            reduce using rule 1 (program -> statements .)
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    NEWLINE         reduce using rule 106 (empty -> .)
    error           shift and go to state 24
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    empty                          shift and go to state 13
    errors                         shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21

state 3

    (14) statements -> statement .

    RETURN          reduce using rule 14 (statements -> statement .)
    COMMENT         reduce using rule 14 (statements -> statement .)
    DO              reduce using rule 14 (statements -> statement .)
    IF              reduce using rule 14 (statements -> statement .)
    FUNCTION        reduce using rule 14 (statements -> statement .)
    VARIABLE        reduce using rule 14 (statements -> statement .)
    error           reduce using rule 14 (statements -> statement .)
    INTEGER         reduce using rule 14 (statements -> statement .)
    STRING          reduce using rule 14 (statements -> statement .)
    BOOL            reduce using rule 14 (statements -> statement .)
    VECTOR          reduce using rule 14 (statements -> statement .)
    LEFT            reduce using rule 14 (statements -> statement .)
    RIGHT           reduce using rule 14 (statements -> statement .)
    FORWARD         reduce using rule 14 (statements -> statement .)
    BACK            reduce using rule 14 (statements -> statement .)
    ROTATE_RIGHT    reduce using rule 14 (statements -> statement .)
    ROTATE_LEFT     reduce using rule 14 (statements -> statement .)
    LMS             reduce using rule 14 (statements -> statement .)
    REFLECT         reduce using rule 14 (statements -> statement .)
    DRILL           reduce using rule 14 (statements -> statement .)
    NEWLINE         reduce using rule 14 (statements -> statement .)
    $end            reduce using rule 14 (statements -> statement .)
    END             reduce using rule 14 (statements -> statement .)


state 4

    (15) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 39


state 5

    (16) statement -> comment . NEWLINE

    NEWLINE         shift and go to state 40


state 6

    (17) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 41


state 7

    (18) statement -> while . NEWLINE

    NEWLINE         shift and go to state 42


state 8

    (19) statement -> if . NEWLINE

    NEWLINE         shift and go to state 43


state 9

    (20) statement -> command . NEWLINE

    NEWLINE         shift and go to state 44


state 10

    (21) statement -> function . NEWLINE

    NEWLINE         shift and go to state 45


state 11

    (22) statement -> call . NEWLINE

    NEWLINE         shift and go to state 46


state 12

    (23) statement -> RETURN . expression NEWLINE
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 47
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 13

    (24) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 69


state 14

    (25) statement -> errors . NEWLINE
    (26) statement -> errors .
    (112) errors -> errors . error
    (35) type -> errors .

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! reduce/reduce conflict for VARIABLE resolved using rule 26 (statement -> errors .)
    NEWLINE         shift and go to state 70
    RETURN          reduce using rule 26 (statement -> errors .)
    COMMENT         reduce using rule 26 (statement -> errors .)
    DO              reduce using rule 26 (statement -> errors .)
    IF              reduce using rule 26 (statement -> errors .)
    FUNCTION        reduce using rule 26 (statement -> errors .)
    VARIABLE        reduce using rule 26 (statement -> errors .)
    INTEGER         reduce using rule 26 (statement -> errors .)
    STRING          reduce using rule 26 (statement -> errors .)
    BOOL            reduce using rule 26 (statement -> errors .)
    VECTOR          reduce using rule 26 (statement -> errors .)
    LEFT            reduce using rule 26 (statement -> errors .)
    RIGHT           reduce using rule 26 (statement -> errors .)
    FORWARD         reduce using rule 26 (statement -> errors .)
    BACK            reduce using rule 26 (statement -> errors .)
    ROTATE_RIGHT    reduce using rule 26 (statement -> errors .)
    ROTATE_LEFT     reduce using rule 26 (statement -> errors .)
    LMS             reduce using rule 26 (statement -> errors .)
    REFLECT         reduce using rule 26 (statement -> errors .)
    DRILL           reduce using rule 26 (statement -> errors .)
    $end            reduce using rule 26 (statement -> errors .)
    END             reduce using rule 26 (statement -> errors .)
    error           shift and go to state 71

  ! error           [ reduce using rule 26 (statement -> errors .) ]
  ! NEWLINE         [ reduce using rule 26 (statement -> errors .) ]
  ! VARIABLE        [ reduce using rule 35 (type -> errors .) ]


state 15

    (27) declaration -> type . variables
    (36) variables -> . variable COMMA variables
    (37) variables -> . assignment COMMA variables
    (38) variables -> . variable
    (39) variables -> . assignment
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (40) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 75

    variables                      shift and go to state 72
    variable                       shift and go to state 73
    assignment                     shift and go to state 74

state 16

    (28) comment -> COMMENT . any
    (29) any -> . any VARIABLE
    (30) any -> . VARIABLE

    VARIABLE        shift and go to state 77

    any                            shift and go to state 76

state 17

    (40) assignment -> variable . ASSIGNMENT expression
    (91) vector_command -> variable . PUSH BACK expression
    (92) vector_command -> variable . PUSH FRONT expression

    ASSIGNMENT      shift and go to state 78
    PUSH            shift and go to state 79


state 18

    (79) while -> DO . statements_group UNTIL expression
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (112) errors -> . errors error
    (113) errors -> . error

    BEGIN           shift and go to state 81
    RETURN          shift and go to state 90
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    UNTIL           reduce using rule 106 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    error           shift and go to state 24

    statements_group               shift and go to state 80
    inner_statement                shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    while                          shift and go to state 85
    if                             shift and go to state 86
    command                        shift and go to state 87
    function                       shift and go to state 88
    call                           shift and go to state 89
    empty                          shift and go to state 91
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    errors                         shift and go to state 92

state 19

    (80) if -> IF . expression THEN statements_group
    (81) if -> IF . expression THEN statements_group ELSE statements_group
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 93
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 20

    (84) command -> vector_command .

    NEWLINE         reduce using rule 84 (command -> vector_command .)
    UNTIL           reduce using rule 84 (command -> vector_command .)
    ELSE            reduce using rule 84 (command -> vector_command .)


state 21

    (85) command -> robot_command .

    NEWLINE         reduce using rule 85 (command -> robot_command .)
    UNTIL           reduce using rule 85 (command -> robot_command .)
    ELSE            reduce using rule 85 (command -> robot_command .)


state 22

    (82) function -> FUNCTION . OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> FUNCTION . OF type VARIABLE BRACKETS statements_group

    OF              shift and go to state 94


state 23

    (104) call -> VARIABLE . LBRACKET parameters RBRACKET
    (105) call -> VARIABLE . BRACKETS
    (41) variable -> VARIABLE . indexing
    (42) variable -> VARIABLE .
    (43) indexing -> . L_QBRACKET expression R_QBRACKET indexing
    (44) indexing -> . L_QBRACKET expression R_QBRACKET

    LBRACKET        shift and go to state 95
    BRACKETS        shift and go to state 96
    ASSIGNMENT      reduce using rule 42 (variable -> VARIABLE .)
    PUSH            reduce using rule 42 (variable -> VARIABLE .)
    L_QBRACKET      shift and go to state 98

    indexing                       shift and go to state 97

state 24

    (113) errors -> error .

    NEWLINE         reduce using rule 113 (errors -> error .)
    error           reduce using rule 113 (errors -> error .)
    RETURN          reduce using rule 113 (errors -> error .)
    COMMENT         reduce using rule 113 (errors -> error .)
    DO              reduce using rule 113 (errors -> error .)
    IF              reduce using rule 113 (errors -> error .)
    FUNCTION        reduce using rule 113 (errors -> error .)
    VARIABLE        reduce using rule 113 (errors -> error .)
    INTEGER         reduce using rule 113 (errors -> error .)
    STRING          reduce using rule 113 (errors -> error .)
    BOOL            reduce using rule 113 (errors -> error .)
    VECTOR          reduce using rule 113 (errors -> error .)
    LEFT            reduce using rule 113 (errors -> error .)
    RIGHT           reduce using rule 113 (errors -> error .)
    FORWARD         reduce using rule 113 (errors -> error .)
    BACK            reduce using rule 113 (errors -> error .)
    ROTATE_RIGHT    reduce using rule 113 (errors -> error .)
    ROTATE_LEFT     reduce using rule 113 (errors -> error .)
    LMS             reduce using rule 113 (errors -> error .)
    REFLECT         reduce using rule 113 (errors -> error .)
    DRILL           reduce using rule 113 (errors -> error .)
    $end            reduce using rule 113 (errors -> error .)
    END             reduce using rule 113 (errors -> error .)
    LESS            reduce using rule 113 (errors -> error .)
    GREATER         reduce using rule 113 (errors -> error .)
    EQ              reduce using rule 113 (errors -> error .)
    NOTEQ           reduce using rule 113 (errors -> error .)
    PLUS            reduce using rule 113 (errors -> error .)
    MINUS           reduce using rule 113 (errors -> error .)
    TO              reduce using rule 113 (errors -> error .)
    THEN            reduce using rule 113 (errors -> error .)
    COMMA           reduce using rule 113 (errors -> error .)
    UNTIL           reduce using rule 113 (errors -> error .)
    ELSE            reduce using rule 113 (errors -> error .)
    RBRACKET        reduce using rule 113 (errors -> error .)
    R_QBRACKET      reduce using rule 113 (errors -> error .)


state 25

    (31) type -> INTEGER .

    VARIABLE        reduce using rule 31 (type -> INTEGER .)
    NEWLINE         reduce using rule 31 (type -> INTEGER .)
    LESS            reduce using rule 31 (type -> INTEGER .)
    GREATER         reduce using rule 31 (type -> INTEGER .)
    EQ              reduce using rule 31 (type -> INTEGER .)
    NOTEQ           reduce using rule 31 (type -> INTEGER .)
    PLUS            reduce using rule 31 (type -> INTEGER .)
    MINUS           reduce using rule 31 (type -> INTEGER .)
    TO              reduce using rule 31 (type -> INTEGER .)
    THEN            reduce using rule 31 (type -> INTEGER .)
    COMMA           reduce using rule 31 (type -> INTEGER .)
    UNTIL           reduce using rule 31 (type -> INTEGER .)
    ELSE            reduce using rule 31 (type -> INTEGER .)
    RBRACKET        reduce using rule 31 (type -> INTEGER .)
    R_QBRACKET      reduce using rule 31 (type -> INTEGER .)


state 26

    (32) type -> STRING .

    VARIABLE        reduce using rule 32 (type -> STRING .)
    NEWLINE         reduce using rule 32 (type -> STRING .)
    LESS            reduce using rule 32 (type -> STRING .)
    GREATER         reduce using rule 32 (type -> STRING .)
    EQ              reduce using rule 32 (type -> STRING .)
    NOTEQ           reduce using rule 32 (type -> STRING .)
    PLUS            reduce using rule 32 (type -> STRING .)
    MINUS           reduce using rule 32 (type -> STRING .)
    TO              reduce using rule 32 (type -> STRING .)
    THEN            reduce using rule 32 (type -> STRING .)
    COMMA           reduce using rule 32 (type -> STRING .)
    UNTIL           reduce using rule 32 (type -> STRING .)
    ELSE            reduce using rule 32 (type -> STRING .)
    RBRACKET        reduce using rule 32 (type -> STRING .)
    R_QBRACKET      reduce using rule 32 (type -> STRING .)


state 27

    (33) type -> BOOL .

    VARIABLE        reduce using rule 33 (type -> BOOL .)
    NEWLINE         reduce using rule 33 (type -> BOOL .)
    LESS            reduce using rule 33 (type -> BOOL .)
    GREATER         reduce using rule 33 (type -> BOOL .)
    EQ              reduce using rule 33 (type -> BOOL .)
    NOTEQ           reduce using rule 33 (type -> BOOL .)
    PLUS            reduce using rule 33 (type -> BOOL .)
    MINUS           reduce using rule 33 (type -> BOOL .)
    TO              reduce using rule 33 (type -> BOOL .)
    THEN            reduce using rule 33 (type -> BOOL .)
    COMMA           reduce using rule 33 (type -> BOOL .)
    UNTIL           reduce using rule 33 (type -> BOOL .)
    ELSE            reduce using rule 33 (type -> BOOL .)
    RBRACKET        reduce using rule 33 (type -> BOOL .)
    R_QBRACKET      reduce using rule 33 (type -> BOOL .)


state 28

    (34) type -> VECTOR . OF type

    OF              shift and go to state 99


state 29

    (98) robot_command -> BACK .

    NEWLINE         reduce using rule 98 (robot_command -> BACK .)
    LESS            reduce using rule 98 (robot_command -> BACK .)
    GREATER         reduce using rule 98 (robot_command -> BACK .)
    EQ              reduce using rule 98 (robot_command -> BACK .)
    NOTEQ           reduce using rule 98 (robot_command -> BACK .)
    PLUS            reduce using rule 98 (robot_command -> BACK .)
    MINUS           reduce using rule 98 (robot_command -> BACK .)
    TO              reduce using rule 98 (robot_command -> BACK .)
    UNTIL           reduce using rule 98 (robot_command -> BACK .)
    THEN            reduce using rule 98 (robot_command -> BACK .)
    COMMA           reduce using rule 98 (robot_command -> BACK .)
    ELSE            reduce using rule 98 (robot_command -> BACK .)
    RBRACKET        reduce using rule 98 (robot_command -> BACK .)
    R_QBRACKET      reduce using rule 98 (robot_command -> BACK .)


state 30

    (95) robot_command -> LEFT .

    NEWLINE         reduce using rule 95 (robot_command -> LEFT .)
    LESS            reduce using rule 95 (robot_command -> LEFT .)
    GREATER         reduce using rule 95 (robot_command -> LEFT .)
    EQ              reduce using rule 95 (robot_command -> LEFT .)
    NOTEQ           reduce using rule 95 (robot_command -> LEFT .)
    PLUS            reduce using rule 95 (robot_command -> LEFT .)
    MINUS           reduce using rule 95 (robot_command -> LEFT .)
    TO              reduce using rule 95 (robot_command -> LEFT .)
    UNTIL           reduce using rule 95 (robot_command -> LEFT .)
    THEN            reduce using rule 95 (robot_command -> LEFT .)
    COMMA           reduce using rule 95 (robot_command -> LEFT .)
    ELSE            reduce using rule 95 (robot_command -> LEFT .)
    RBRACKET        reduce using rule 95 (robot_command -> LEFT .)
    R_QBRACKET      reduce using rule 95 (robot_command -> LEFT .)


state 31

    (96) robot_command -> RIGHT .

    NEWLINE         reduce using rule 96 (robot_command -> RIGHT .)
    LESS            reduce using rule 96 (robot_command -> RIGHT .)
    GREATER         reduce using rule 96 (robot_command -> RIGHT .)
    EQ              reduce using rule 96 (robot_command -> RIGHT .)
    NOTEQ           reduce using rule 96 (robot_command -> RIGHT .)
    PLUS            reduce using rule 96 (robot_command -> RIGHT .)
    MINUS           reduce using rule 96 (robot_command -> RIGHT .)
    TO              reduce using rule 96 (robot_command -> RIGHT .)
    UNTIL           reduce using rule 96 (robot_command -> RIGHT .)
    THEN            reduce using rule 96 (robot_command -> RIGHT .)
    COMMA           reduce using rule 96 (robot_command -> RIGHT .)
    ELSE            reduce using rule 96 (robot_command -> RIGHT .)
    RBRACKET        reduce using rule 96 (robot_command -> RIGHT .)
    R_QBRACKET      reduce using rule 96 (robot_command -> RIGHT .)


state 32

    (97) robot_command -> FORWARD .

    NEWLINE         reduce using rule 97 (robot_command -> FORWARD .)
    LESS            reduce using rule 97 (robot_command -> FORWARD .)
    GREATER         reduce using rule 97 (robot_command -> FORWARD .)
    EQ              reduce using rule 97 (robot_command -> FORWARD .)
    NOTEQ           reduce using rule 97 (robot_command -> FORWARD .)
    PLUS            reduce using rule 97 (robot_command -> FORWARD .)
    MINUS           reduce using rule 97 (robot_command -> FORWARD .)
    TO              reduce using rule 97 (robot_command -> FORWARD .)
    UNTIL           reduce using rule 97 (robot_command -> FORWARD .)
    THEN            reduce using rule 97 (robot_command -> FORWARD .)
    COMMA           reduce using rule 97 (robot_command -> FORWARD .)
    ELSE            reduce using rule 97 (robot_command -> FORWARD .)
    RBRACKET        reduce using rule 97 (robot_command -> FORWARD .)
    R_QBRACKET      reduce using rule 97 (robot_command -> FORWARD .)


state 33

    (99) robot_command -> ROTATE_RIGHT .

    NEWLINE         reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    LESS            reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    GREATER         reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    EQ              reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    NOTEQ           reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    PLUS            reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    MINUS           reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    TO              reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    UNTIL           reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    THEN            reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    COMMA           reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    ELSE            reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    RBRACKET        reduce using rule 99 (robot_command -> ROTATE_RIGHT .)
    R_QBRACKET      reduce using rule 99 (robot_command -> ROTATE_RIGHT .)


state 34

    (100) robot_command -> ROTATE_LEFT .

    NEWLINE         reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    LESS            reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    GREATER         reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    EQ              reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    NOTEQ           reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    PLUS            reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    MINUS           reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    TO              reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    UNTIL           reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    THEN            reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    COMMA           reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    ELSE            reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    RBRACKET        reduce using rule 100 (robot_command -> ROTATE_LEFT .)
    R_QBRACKET      reduce using rule 100 (robot_command -> ROTATE_LEFT .)


state 35

    (101) robot_command -> LMS .

    NEWLINE         reduce using rule 101 (robot_command -> LMS .)
    LESS            reduce using rule 101 (robot_command -> LMS .)
    GREATER         reduce using rule 101 (robot_command -> LMS .)
    EQ              reduce using rule 101 (robot_command -> LMS .)
    NOTEQ           reduce using rule 101 (robot_command -> LMS .)
    PLUS            reduce using rule 101 (robot_command -> LMS .)
    MINUS           reduce using rule 101 (robot_command -> LMS .)
    TO              reduce using rule 101 (robot_command -> LMS .)
    UNTIL           reduce using rule 101 (robot_command -> LMS .)
    THEN            reduce using rule 101 (robot_command -> LMS .)
    COMMA           reduce using rule 101 (robot_command -> LMS .)
    ELSE            reduce using rule 101 (robot_command -> LMS .)
    RBRACKET        reduce using rule 101 (robot_command -> LMS .)
    R_QBRACKET      reduce using rule 101 (robot_command -> LMS .)


state 36

    (102) robot_command -> REFLECT .

    NEWLINE         reduce using rule 102 (robot_command -> REFLECT .)
    LESS            reduce using rule 102 (robot_command -> REFLECT .)
    GREATER         reduce using rule 102 (robot_command -> REFLECT .)
    EQ              reduce using rule 102 (robot_command -> REFLECT .)
    NOTEQ           reduce using rule 102 (robot_command -> REFLECT .)
    PLUS            reduce using rule 102 (robot_command -> REFLECT .)
    MINUS           reduce using rule 102 (robot_command -> REFLECT .)
    TO              reduce using rule 102 (robot_command -> REFLECT .)
    UNTIL           reduce using rule 102 (robot_command -> REFLECT .)
    THEN            reduce using rule 102 (robot_command -> REFLECT .)
    COMMA           reduce using rule 102 (robot_command -> REFLECT .)
    ELSE            reduce using rule 102 (robot_command -> REFLECT .)
    RBRACKET        reduce using rule 102 (robot_command -> REFLECT .)
    R_QBRACKET      reduce using rule 102 (robot_command -> REFLECT .)


state 37

    (103) robot_command -> DRILL .

    NEWLINE         reduce using rule 103 (robot_command -> DRILL .)
    LESS            reduce using rule 103 (robot_command -> DRILL .)
    GREATER         reduce using rule 103 (robot_command -> DRILL .)
    EQ              reduce using rule 103 (robot_command -> DRILL .)
    NOTEQ           reduce using rule 103 (robot_command -> DRILL .)
    PLUS            reduce using rule 103 (robot_command -> DRILL .)
    MINUS           reduce using rule 103 (robot_command -> DRILL .)
    TO              reduce using rule 103 (robot_command -> DRILL .)
    UNTIL           reduce using rule 103 (robot_command -> DRILL .)
    THEN            reduce using rule 103 (robot_command -> DRILL .)
    COMMA           reduce using rule 103 (robot_command -> DRILL .)
    ELSE            reduce using rule 103 (robot_command -> DRILL .)
    RBRACKET        reduce using rule 103 (robot_command -> DRILL .)
    R_QBRACKET      reduce using rule 103 (robot_command -> DRILL .)


state 38

    (13) statements -> statements statement .

    RETURN          reduce using rule 13 (statements -> statements statement .)
    COMMENT         reduce using rule 13 (statements -> statements statement .)
    DO              reduce using rule 13 (statements -> statements statement .)
    IF              reduce using rule 13 (statements -> statements statement .)
    FUNCTION        reduce using rule 13 (statements -> statements statement .)
    VARIABLE        reduce using rule 13 (statements -> statements statement .)
    error           reduce using rule 13 (statements -> statements statement .)
    INTEGER         reduce using rule 13 (statements -> statements statement .)
    STRING          reduce using rule 13 (statements -> statements statement .)
    BOOL            reduce using rule 13 (statements -> statements statement .)
    VECTOR          reduce using rule 13 (statements -> statements statement .)
    LEFT            reduce using rule 13 (statements -> statements statement .)
    RIGHT           reduce using rule 13 (statements -> statements statement .)
    FORWARD         reduce using rule 13 (statements -> statements statement .)
    BACK            reduce using rule 13 (statements -> statements statement .)
    ROTATE_RIGHT    reduce using rule 13 (statements -> statements statement .)
    ROTATE_LEFT     reduce using rule 13 (statements -> statements statement .)
    LMS             reduce using rule 13 (statements -> statements statement .)
    REFLECT         reduce using rule 13 (statements -> statements statement .)
    DRILL           reduce using rule 13 (statements -> statements statement .)
    NEWLINE         reduce using rule 13 (statements -> statements statement .)
    $end            reduce using rule 13 (statements -> statements statement .)
    END             reduce using rule 13 (statements -> statements statement .)


state 39

    (15) statement -> declaration NEWLINE .

    RETURN          reduce using rule 15 (statement -> declaration NEWLINE .)
    COMMENT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DO              reduce using rule 15 (statement -> declaration NEWLINE .)
    IF              reduce using rule 15 (statement -> declaration NEWLINE .)
    FUNCTION        reduce using rule 15 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 15 (statement -> declaration NEWLINE .)
    error           reduce using rule 15 (statement -> declaration NEWLINE .)
    INTEGER         reduce using rule 15 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 15 (statement -> declaration NEWLINE .)
    BOOL            reduce using rule 15 (statement -> declaration NEWLINE .)
    VECTOR          reduce using rule 15 (statement -> declaration NEWLINE .)
    LEFT            reduce using rule 15 (statement -> declaration NEWLINE .)
    RIGHT           reduce using rule 15 (statement -> declaration NEWLINE .)
    FORWARD         reduce using rule 15 (statement -> declaration NEWLINE .)
    BACK            reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_RIGHT    reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_LEFT     reduce using rule 15 (statement -> declaration NEWLINE .)
    LMS             reduce using rule 15 (statement -> declaration NEWLINE .)
    REFLECT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DRILL           reduce using rule 15 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 15 (statement -> declaration NEWLINE .)
    $end            reduce using rule 15 (statement -> declaration NEWLINE .)
    END             reduce using rule 15 (statement -> declaration NEWLINE .)


state 40

    (16) statement -> comment NEWLINE .

    RETURN          reduce using rule 16 (statement -> comment NEWLINE .)
    COMMENT         reduce using rule 16 (statement -> comment NEWLINE .)
    DO              reduce using rule 16 (statement -> comment NEWLINE .)
    IF              reduce using rule 16 (statement -> comment NEWLINE .)
    FUNCTION        reduce using rule 16 (statement -> comment NEWLINE .)
    VARIABLE        reduce using rule 16 (statement -> comment NEWLINE .)
    error           reduce using rule 16 (statement -> comment NEWLINE .)
    INTEGER         reduce using rule 16 (statement -> comment NEWLINE .)
    STRING          reduce using rule 16 (statement -> comment NEWLINE .)
    BOOL            reduce using rule 16 (statement -> comment NEWLINE .)
    VECTOR          reduce using rule 16 (statement -> comment NEWLINE .)
    LEFT            reduce using rule 16 (statement -> comment NEWLINE .)
    RIGHT           reduce using rule 16 (statement -> comment NEWLINE .)
    FORWARD         reduce using rule 16 (statement -> comment NEWLINE .)
    BACK            reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_LEFT     reduce using rule 16 (statement -> comment NEWLINE .)
    LMS             reduce using rule 16 (statement -> comment NEWLINE .)
    REFLECT         reduce using rule 16 (statement -> comment NEWLINE .)
    DRILL           reduce using rule 16 (statement -> comment NEWLINE .)
    NEWLINE         reduce using rule 16 (statement -> comment NEWLINE .)
    $end            reduce using rule 16 (statement -> comment NEWLINE .)
    END             reduce using rule 16 (statement -> comment NEWLINE .)


state 41

    (17) statement -> assignment NEWLINE .

    RETURN          reduce using rule 17 (statement -> assignment NEWLINE .)
    COMMENT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DO              reduce using rule 17 (statement -> assignment NEWLINE .)
    IF              reduce using rule 17 (statement -> assignment NEWLINE .)
    FUNCTION        reduce using rule 17 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 17 (statement -> assignment NEWLINE .)
    error           reduce using rule 17 (statement -> assignment NEWLINE .)
    INTEGER         reduce using rule 17 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 17 (statement -> assignment NEWLINE .)
    BOOL            reduce using rule 17 (statement -> assignment NEWLINE .)
    VECTOR          reduce using rule 17 (statement -> assignment NEWLINE .)
    LEFT            reduce using rule 17 (statement -> assignment NEWLINE .)
    RIGHT           reduce using rule 17 (statement -> assignment NEWLINE .)
    FORWARD         reduce using rule 17 (statement -> assignment NEWLINE .)
    BACK            reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_LEFT     reduce using rule 17 (statement -> assignment NEWLINE .)
    LMS             reduce using rule 17 (statement -> assignment NEWLINE .)
    REFLECT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DRILL           reduce using rule 17 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 17 (statement -> assignment NEWLINE .)
    $end            reduce using rule 17 (statement -> assignment NEWLINE .)
    END             reduce using rule 17 (statement -> assignment NEWLINE .)


state 42

    (18) statement -> while NEWLINE .

    RETURN          reduce using rule 18 (statement -> while NEWLINE .)
    COMMENT         reduce using rule 18 (statement -> while NEWLINE .)
    DO              reduce using rule 18 (statement -> while NEWLINE .)
    IF              reduce using rule 18 (statement -> while NEWLINE .)
    FUNCTION        reduce using rule 18 (statement -> while NEWLINE .)
    VARIABLE        reduce using rule 18 (statement -> while NEWLINE .)
    error           reduce using rule 18 (statement -> while NEWLINE .)
    INTEGER         reduce using rule 18 (statement -> while NEWLINE .)
    STRING          reduce using rule 18 (statement -> while NEWLINE .)
    BOOL            reduce using rule 18 (statement -> while NEWLINE .)
    VECTOR          reduce using rule 18 (statement -> while NEWLINE .)
    LEFT            reduce using rule 18 (statement -> while NEWLINE .)
    RIGHT           reduce using rule 18 (statement -> while NEWLINE .)
    FORWARD         reduce using rule 18 (statement -> while NEWLINE .)
    BACK            reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_RIGHT    reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_LEFT     reduce using rule 18 (statement -> while NEWLINE .)
    LMS             reduce using rule 18 (statement -> while NEWLINE .)
    REFLECT         reduce using rule 18 (statement -> while NEWLINE .)
    DRILL           reduce using rule 18 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 18 (statement -> while NEWLINE .)
    $end            reduce using rule 18 (statement -> while NEWLINE .)
    END             reduce using rule 18 (statement -> while NEWLINE .)


state 43

    (19) statement -> if NEWLINE .

    RETURN          reduce using rule 19 (statement -> if NEWLINE .)
    COMMENT         reduce using rule 19 (statement -> if NEWLINE .)
    DO              reduce using rule 19 (statement -> if NEWLINE .)
    IF              reduce using rule 19 (statement -> if NEWLINE .)
    FUNCTION        reduce using rule 19 (statement -> if NEWLINE .)
    VARIABLE        reduce using rule 19 (statement -> if NEWLINE .)
    error           reduce using rule 19 (statement -> if NEWLINE .)
    INTEGER         reduce using rule 19 (statement -> if NEWLINE .)
    STRING          reduce using rule 19 (statement -> if NEWLINE .)
    BOOL            reduce using rule 19 (statement -> if NEWLINE .)
    VECTOR          reduce using rule 19 (statement -> if NEWLINE .)
    LEFT            reduce using rule 19 (statement -> if NEWLINE .)
    RIGHT           reduce using rule 19 (statement -> if NEWLINE .)
    FORWARD         reduce using rule 19 (statement -> if NEWLINE .)
    BACK            reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_RIGHT    reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_LEFT     reduce using rule 19 (statement -> if NEWLINE .)
    LMS             reduce using rule 19 (statement -> if NEWLINE .)
    REFLECT         reduce using rule 19 (statement -> if NEWLINE .)
    DRILL           reduce using rule 19 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 19 (statement -> if NEWLINE .)
    $end            reduce using rule 19 (statement -> if NEWLINE .)
    END             reduce using rule 19 (statement -> if NEWLINE .)


state 44

    (20) statement -> command NEWLINE .

    RETURN          reduce using rule 20 (statement -> command NEWLINE .)
    COMMENT         reduce using rule 20 (statement -> command NEWLINE .)
    DO              reduce using rule 20 (statement -> command NEWLINE .)
    IF              reduce using rule 20 (statement -> command NEWLINE .)
    FUNCTION        reduce using rule 20 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 20 (statement -> command NEWLINE .)
    error           reduce using rule 20 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 20 (statement -> command NEWLINE .)
    STRING          reduce using rule 20 (statement -> command NEWLINE .)
    BOOL            reduce using rule 20 (statement -> command NEWLINE .)
    VECTOR          reduce using rule 20 (statement -> command NEWLINE .)
    LEFT            reduce using rule 20 (statement -> command NEWLINE .)
    RIGHT           reduce using rule 20 (statement -> command NEWLINE .)
    FORWARD         reduce using rule 20 (statement -> command NEWLINE .)
    BACK            reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_RIGHT    reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_LEFT     reduce using rule 20 (statement -> command NEWLINE .)
    LMS             reduce using rule 20 (statement -> command NEWLINE .)
    REFLECT         reduce using rule 20 (statement -> command NEWLINE .)
    DRILL           reduce using rule 20 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 20 (statement -> command NEWLINE .)
    $end            reduce using rule 20 (statement -> command NEWLINE .)
    END             reduce using rule 20 (statement -> command NEWLINE .)


state 45

    (21) statement -> function NEWLINE .

    RETURN          reduce using rule 21 (statement -> function NEWLINE .)
    COMMENT         reduce using rule 21 (statement -> function NEWLINE .)
    DO              reduce using rule 21 (statement -> function NEWLINE .)
    IF              reduce using rule 21 (statement -> function NEWLINE .)
    FUNCTION        reduce using rule 21 (statement -> function NEWLINE .)
    VARIABLE        reduce using rule 21 (statement -> function NEWLINE .)
    error           reduce using rule 21 (statement -> function NEWLINE .)
    INTEGER         reduce using rule 21 (statement -> function NEWLINE .)
    STRING          reduce using rule 21 (statement -> function NEWLINE .)
    BOOL            reduce using rule 21 (statement -> function NEWLINE .)
    VECTOR          reduce using rule 21 (statement -> function NEWLINE .)
    LEFT            reduce using rule 21 (statement -> function NEWLINE .)
    RIGHT           reduce using rule 21 (statement -> function NEWLINE .)
    FORWARD         reduce using rule 21 (statement -> function NEWLINE .)
    BACK            reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_RIGHT    reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_LEFT     reduce using rule 21 (statement -> function NEWLINE .)
    LMS             reduce using rule 21 (statement -> function NEWLINE .)
    REFLECT         reduce using rule 21 (statement -> function NEWLINE .)
    DRILL           reduce using rule 21 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 21 (statement -> function NEWLINE .)
    $end            reduce using rule 21 (statement -> function NEWLINE .)
    END             reduce using rule 21 (statement -> function NEWLINE .)


state 46

    (22) statement -> call NEWLINE .

    RETURN          reduce using rule 22 (statement -> call NEWLINE .)
    COMMENT         reduce using rule 22 (statement -> call NEWLINE .)
    DO              reduce using rule 22 (statement -> call NEWLINE .)
    IF              reduce using rule 22 (statement -> call NEWLINE .)
    FUNCTION        reduce using rule 22 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 22 (statement -> call NEWLINE .)
    error           reduce using rule 22 (statement -> call NEWLINE .)
    INTEGER         reduce using rule 22 (statement -> call NEWLINE .)
    STRING          reduce using rule 22 (statement -> call NEWLINE .)
    BOOL            reduce using rule 22 (statement -> call NEWLINE .)
    VECTOR          reduce using rule 22 (statement -> call NEWLINE .)
    LEFT            reduce using rule 22 (statement -> call NEWLINE .)
    RIGHT           reduce using rule 22 (statement -> call NEWLINE .)
    FORWARD         reduce using rule 22 (statement -> call NEWLINE .)
    BACK            reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_RIGHT    reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_LEFT     reduce using rule 22 (statement -> call NEWLINE .)
    LMS             reduce using rule 22 (statement -> call NEWLINE .)
    REFLECT         reduce using rule 22 (statement -> call NEWLINE .)
    DRILL           reduce using rule 22 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 22 (statement -> call NEWLINE .)
    $end            reduce using rule 22 (statement -> call NEWLINE .)
    END             reduce using rule 22 (statement -> call NEWLINE .)


state 47

    (23) statement -> RETURN expression . NEWLINE
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    NEWLINE         shift and go to state 100
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 48

    (45) expression -> variable .
    (93) vector_pop -> variable . POP BACK
    (94) vector_pop -> variable . POP FRONT

    NEWLINE         reduce using rule 45 (expression -> variable .)
    LESS            reduce using rule 45 (expression -> variable .)
    GREATER         reduce using rule 45 (expression -> variable .)
    EQ              reduce using rule 45 (expression -> variable .)
    NOTEQ           reduce using rule 45 (expression -> variable .)
    PLUS            reduce using rule 45 (expression -> variable .)
    MINUS           reduce using rule 45 (expression -> variable .)
    TO              reduce using rule 45 (expression -> variable .)
    THEN            reduce using rule 45 (expression -> variable .)
    COMMA           reduce using rule 45 (expression -> variable .)
    UNTIL           reduce using rule 45 (expression -> variable .)
    ELSE            reduce using rule 45 (expression -> variable .)
    RBRACKET        reduce using rule 45 (expression -> variable .)
    R_QBRACKET      reduce using rule 45 (expression -> variable .)
    POP             shift and go to state 108


state 49

    (46) expression -> const .

    NEWLINE         reduce using rule 46 (expression -> const .)
    LESS            reduce using rule 46 (expression -> const .)
    GREATER         reduce using rule 46 (expression -> const .)
    EQ              reduce using rule 46 (expression -> const .)
    NOTEQ           reduce using rule 46 (expression -> const .)
    PLUS            reduce using rule 46 (expression -> const .)
    MINUS           reduce using rule 46 (expression -> const .)
    TO              reduce using rule 46 (expression -> const .)
    THEN            reduce using rule 46 (expression -> const .)
    COMMA           reduce using rule 46 (expression -> const .)
    UNTIL           reduce using rule 46 (expression -> const .)
    ELSE            reduce using rule 46 (expression -> const .)
    RBRACKET        reduce using rule 46 (expression -> const .)
    R_QBRACKET      reduce using rule 46 (expression -> const .)


state 50

    (47) expression -> qstring .

    NEWLINE         reduce using rule 47 (expression -> qstring .)
    LESS            reduce using rule 47 (expression -> qstring .)
    GREATER         reduce using rule 47 (expression -> qstring .)
    EQ              reduce using rule 47 (expression -> qstring .)
    NOTEQ           reduce using rule 47 (expression -> qstring .)
    PLUS            reduce using rule 47 (expression -> qstring .)
    MINUS           reduce using rule 47 (expression -> qstring .)
    TO              reduce using rule 47 (expression -> qstring .)
    THEN            reduce using rule 47 (expression -> qstring .)
    COMMA           reduce using rule 47 (expression -> qstring .)
    UNTIL           reduce using rule 47 (expression -> qstring .)
    ELSE            reduce using rule 47 (expression -> qstring .)
    RBRACKET        reduce using rule 47 (expression -> qstring .)
    R_QBRACKET      reduce using rule 47 (expression -> qstring .)


state 51

    (48) expression -> math_expression .

    NEWLINE         reduce using rule 48 (expression -> math_expression .)
    LESS            reduce using rule 48 (expression -> math_expression .)
    GREATER         reduce using rule 48 (expression -> math_expression .)
    EQ              reduce using rule 48 (expression -> math_expression .)
    NOTEQ           reduce using rule 48 (expression -> math_expression .)
    PLUS            reduce using rule 48 (expression -> math_expression .)
    MINUS           reduce using rule 48 (expression -> math_expression .)
    TO              reduce using rule 48 (expression -> math_expression .)
    THEN            reduce using rule 48 (expression -> math_expression .)
    COMMA           reduce using rule 48 (expression -> math_expression .)
    UNTIL           reduce using rule 48 (expression -> math_expression .)
    ELSE            reduce using rule 48 (expression -> math_expression .)
    RBRACKET        reduce using rule 48 (expression -> math_expression .)
    R_QBRACKET      reduce using rule 48 (expression -> math_expression .)


state 52

    (49) expression -> robot_command .

    NEWLINE         reduce using rule 49 (expression -> robot_command .)
    LESS            reduce using rule 49 (expression -> robot_command .)
    GREATER         reduce using rule 49 (expression -> robot_command .)
    EQ              reduce using rule 49 (expression -> robot_command .)
    NOTEQ           reduce using rule 49 (expression -> robot_command .)
    PLUS            reduce using rule 49 (expression -> robot_command .)
    MINUS           reduce using rule 49 (expression -> robot_command .)
    TO              reduce using rule 49 (expression -> robot_command .)
    THEN            reduce using rule 49 (expression -> robot_command .)
    COMMA           reduce using rule 49 (expression -> robot_command .)
    UNTIL           reduce using rule 49 (expression -> robot_command .)
    ELSE            reduce using rule 49 (expression -> robot_command .)
    RBRACKET        reduce using rule 49 (expression -> robot_command .)
    R_QBRACKET      reduce using rule 49 (expression -> robot_command .)


state 53

    (50) expression -> converting_command .

    NEWLINE         reduce using rule 50 (expression -> converting_command .)
    LESS            reduce using rule 50 (expression -> converting_command .)
    GREATER         reduce using rule 50 (expression -> converting_command .)
    EQ              reduce using rule 50 (expression -> converting_command .)
    NOTEQ           reduce using rule 50 (expression -> converting_command .)
    PLUS            reduce using rule 50 (expression -> converting_command .)
    MINUS           reduce using rule 50 (expression -> converting_command .)
    TO              reduce using rule 50 (expression -> converting_command .)
    THEN            reduce using rule 50 (expression -> converting_command .)
    COMMA           reduce using rule 50 (expression -> converting_command .)
    UNTIL           reduce using rule 50 (expression -> converting_command .)
    ELSE            reduce using rule 50 (expression -> converting_command .)
    RBRACKET        reduce using rule 50 (expression -> converting_command .)
    R_QBRACKET      reduce using rule 50 (expression -> converting_command .)


state 54

    (51) expression -> vector_pop .

    NEWLINE         reduce using rule 51 (expression -> vector_pop .)
    LESS            reduce using rule 51 (expression -> vector_pop .)
    GREATER         reduce using rule 51 (expression -> vector_pop .)
    EQ              reduce using rule 51 (expression -> vector_pop .)
    NOTEQ           reduce using rule 51 (expression -> vector_pop .)
    PLUS            reduce using rule 51 (expression -> vector_pop .)
    MINUS           reduce using rule 51 (expression -> vector_pop .)
    TO              reduce using rule 51 (expression -> vector_pop .)
    THEN            reduce using rule 51 (expression -> vector_pop .)
    COMMA           reduce using rule 51 (expression -> vector_pop .)
    UNTIL           reduce using rule 51 (expression -> vector_pop .)
    ELSE            reduce using rule 51 (expression -> vector_pop .)
    RBRACKET        reduce using rule 51 (expression -> vector_pop .)
    R_QBRACKET      reduce using rule 51 (expression -> vector_pop .)


state 55

    (52) expression -> call .

    NEWLINE         reduce using rule 52 (expression -> call .)
    LESS            reduce using rule 52 (expression -> call .)
    GREATER         reduce using rule 52 (expression -> call .)
    EQ              reduce using rule 52 (expression -> call .)
    NOTEQ           reduce using rule 52 (expression -> call .)
    PLUS            reduce using rule 52 (expression -> call .)
    MINUS           reduce using rule 52 (expression -> call .)
    TO              reduce using rule 52 (expression -> call .)
    THEN            reduce using rule 52 (expression -> call .)
    COMMA           reduce using rule 52 (expression -> call .)
    UNTIL           reduce using rule 52 (expression -> call .)
    ELSE            reduce using rule 52 (expression -> call .)
    RBRACKET        reduce using rule 52 (expression -> call .)
    R_QBRACKET      reduce using rule 52 (expression -> call .)


state 56

    (41) variable -> VARIABLE . indexing
    (42) variable -> VARIABLE .
    (104) call -> VARIABLE . LBRACKET parameters RBRACKET
    (105) call -> VARIABLE . BRACKETS
    (43) indexing -> . L_QBRACKET expression R_QBRACKET indexing
    (44) indexing -> . L_QBRACKET expression R_QBRACKET

    POP             reduce using rule 42 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 42 (variable -> VARIABLE .)
    LESS            reduce using rule 42 (variable -> VARIABLE .)
    GREATER         reduce using rule 42 (variable -> VARIABLE .)
    EQ              reduce using rule 42 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 42 (variable -> VARIABLE .)
    PLUS            reduce using rule 42 (variable -> VARIABLE .)
    MINUS           reduce using rule 42 (variable -> VARIABLE .)
    TO              reduce using rule 42 (variable -> VARIABLE .)
    THEN            reduce using rule 42 (variable -> VARIABLE .)
    COMMA           reduce using rule 42 (variable -> VARIABLE .)
    UNTIL           reduce using rule 42 (variable -> VARIABLE .)
    ELSE            reduce using rule 42 (variable -> VARIABLE .)
    R_QBRACKET      reduce using rule 42 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 42 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 95
    BRACKETS        shift and go to state 96
    L_QBRACKET      shift and go to state 98

    indexing                       shift and go to state 97

state 57

    (63) const -> TRUE .

    NEWLINE         reduce using rule 63 (const -> TRUE .)
    LESS            reduce using rule 63 (const -> TRUE .)
    GREATER         reduce using rule 63 (const -> TRUE .)
    EQ              reduce using rule 63 (const -> TRUE .)
    NOTEQ           reduce using rule 63 (const -> TRUE .)
    PLUS            reduce using rule 63 (const -> TRUE .)
    MINUS           reduce using rule 63 (const -> TRUE .)
    TO              reduce using rule 63 (const -> TRUE .)
    THEN            reduce using rule 63 (const -> TRUE .)
    COMMA           reduce using rule 63 (const -> TRUE .)
    UNTIL           reduce using rule 63 (const -> TRUE .)
    ELSE            reduce using rule 63 (const -> TRUE .)
    RBRACKET        reduce using rule 63 (const -> TRUE .)
    R_QBRACKET      reduce using rule 63 (const -> TRUE .)


state 58

    (64) const -> FALSE .

    NEWLINE         reduce using rule 64 (const -> FALSE .)
    LESS            reduce using rule 64 (const -> FALSE .)
    GREATER         reduce using rule 64 (const -> FALSE .)
    EQ              reduce using rule 64 (const -> FALSE .)
    NOTEQ           reduce using rule 64 (const -> FALSE .)
    PLUS            reduce using rule 64 (const -> FALSE .)
    MINUS           reduce using rule 64 (const -> FALSE .)
    TO              reduce using rule 64 (const -> FALSE .)
    THEN            reduce using rule 64 (const -> FALSE .)
    COMMA           reduce using rule 64 (const -> FALSE .)
    UNTIL           reduce using rule 64 (const -> FALSE .)
    ELSE            reduce using rule 64 (const -> FALSE .)
    RBRACKET        reduce using rule 64 (const -> FALSE .)
    R_QBRACKET      reduce using rule 64 (const -> FALSE .)


state 59

    (65) const -> UNDEFINED .

    NEWLINE         reduce using rule 65 (const -> UNDEFINED .)
    LESS            reduce using rule 65 (const -> UNDEFINED .)
    GREATER         reduce using rule 65 (const -> UNDEFINED .)
    EQ              reduce using rule 65 (const -> UNDEFINED .)
    NOTEQ           reduce using rule 65 (const -> UNDEFINED .)
    PLUS            reduce using rule 65 (const -> UNDEFINED .)
    MINUS           reduce using rule 65 (const -> UNDEFINED .)
    TO              reduce using rule 65 (const -> UNDEFINED .)
    THEN            reduce using rule 65 (const -> UNDEFINED .)
    COMMA           reduce using rule 65 (const -> UNDEFINED .)
    UNTIL           reduce using rule 65 (const -> UNDEFINED .)
    ELSE            reduce using rule 65 (const -> UNDEFINED .)
    RBRACKET        reduce using rule 65 (const -> UNDEFINED .)
    R_QBRACKET      reduce using rule 65 (const -> UNDEFINED .)


state 60

    (66) const -> DECIMAL .

    NEWLINE         reduce using rule 66 (const -> DECIMAL .)
    LESS            reduce using rule 66 (const -> DECIMAL .)
    GREATER         reduce using rule 66 (const -> DECIMAL .)
    EQ              reduce using rule 66 (const -> DECIMAL .)
    NOTEQ           reduce using rule 66 (const -> DECIMAL .)
    PLUS            reduce using rule 66 (const -> DECIMAL .)
    MINUS           reduce using rule 66 (const -> DECIMAL .)
    TO              reduce using rule 66 (const -> DECIMAL .)
    THEN            reduce using rule 66 (const -> DECIMAL .)
    COMMA           reduce using rule 66 (const -> DECIMAL .)
    UNTIL           reduce using rule 66 (const -> DECIMAL .)
    ELSE            reduce using rule 66 (const -> DECIMAL .)
    RBRACKET        reduce using rule 66 (const -> DECIMAL .)
    R_QBRACKET      reduce using rule 66 (const -> DECIMAL .)


state 61

    (67) const -> EXIT .

    NEWLINE         reduce using rule 67 (const -> EXIT .)
    LESS            reduce using rule 67 (const -> EXIT .)
    GREATER         reduce using rule 67 (const -> EXIT .)
    EQ              reduce using rule 67 (const -> EXIT .)
    NOTEQ           reduce using rule 67 (const -> EXIT .)
    PLUS            reduce using rule 67 (const -> EXIT .)
    MINUS           reduce using rule 67 (const -> EXIT .)
    TO              reduce using rule 67 (const -> EXIT .)
    THEN            reduce using rule 67 (const -> EXIT .)
    COMMA           reduce using rule 67 (const -> EXIT .)
    UNTIL           reduce using rule 67 (const -> EXIT .)
    ELSE            reduce using rule 67 (const -> EXIT .)
    RBRACKET        reduce using rule 67 (const -> EXIT .)
    R_QBRACKET      reduce using rule 67 (const -> EXIT .)


state 62

    (68) const -> WOOD .

    NEWLINE         reduce using rule 68 (const -> WOOD .)
    LESS            reduce using rule 68 (const -> WOOD .)
    GREATER         reduce using rule 68 (const -> WOOD .)
    EQ              reduce using rule 68 (const -> WOOD .)
    NOTEQ           reduce using rule 68 (const -> WOOD .)
    PLUS            reduce using rule 68 (const -> WOOD .)
    MINUS           reduce using rule 68 (const -> WOOD .)
    TO              reduce using rule 68 (const -> WOOD .)
    THEN            reduce using rule 68 (const -> WOOD .)
    COMMA           reduce using rule 68 (const -> WOOD .)
    UNTIL           reduce using rule 68 (const -> WOOD .)
    ELSE            reduce using rule 68 (const -> WOOD .)
    RBRACKET        reduce using rule 68 (const -> WOOD .)
    R_QBRACKET      reduce using rule 68 (const -> WOOD .)


state 63

    (69) const -> STEEL .

    NEWLINE         reduce using rule 69 (const -> STEEL .)
    LESS            reduce using rule 69 (const -> STEEL .)
    GREATER         reduce using rule 69 (const -> STEEL .)
    EQ              reduce using rule 69 (const -> STEEL .)
    NOTEQ           reduce using rule 69 (const -> STEEL .)
    PLUS            reduce using rule 69 (const -> STEEL .)
    MINUS           reduce using rule 69 (const -> STEEL .)
    TO              reduce using rule 69 (const -> STEEL .)
    THEN            reduce using rule 69 (const -> STEEL .)
    COMMA           reduce using rule 69 (const -> STEEL .)
    UNTIL           reduce using rule 69 (const -> STEEL .)
    ELSE            reduce using rule 69 (const -> STEEL .)
    RBRACKET        reduce using rule 69 (const -> STEEL .)
    R_QBRACKET      reduce using rule 69 (const -> STEEL .)


state 64

    (70) const -> GLASS .

    NEWLINE         reduce using rule 70 (const -> GLASS .)
    LESS            reduce using rule 70 (const -> GLASS .)
    GREATER         reduce using rule 70 (const -> GLASS .)
    EQ              reduce using rule 70 (const -> GLASS .)
    NOTEQ           reduce using rule 70 (const -> GLASS .)
    PLUS            reduce using rule 70 (const -> GLASS .)
    MINUS           reduce using rule 70 (const -> GLASS .)
    TO              reduce using rule 70 (const -> GLASS .)
    THEN            reduce using rule 70 (const -> GLASS .)
    COMMA           reduce using rule 70 (const -> GLASS .)
    UNTIL           reduce using rule 70 (const -> GLASS .)
    ELSE            reduce using rule 70 (const -> GLASS .)
    RBRACKET        reduce using rule 70 (const -> GLASS .)
    R_QBRACKET      reduce using rule 70 (const -> GLASS .)


state 65

    (71) const -> CONCRETE .

    NEWLINE         reduce using rule 71 (const -> CONCRETE .)
    LESS            reduce using rule 71 (const -> CONCRETE .)
    GREATER         reduce using rule 71 (const -> CONCRETE .)
    EQ              reduce using rule 71 (const -> CONCRETE .)
    NOTEQ           reduce using rule 71 (const -> CONCRETE .)
    PLUS            reduce using rule 71 (const -> CONCRETE .)
    MINUS           reduce using rule 71 (const -> CONCRETE .)
    TO              reduce using rule 71 (const -> CONCRETE .)
    THEN            reduce using rule 71 (const -> CONCRETE .)
    COMMA           reduce using rule 71 (const -> CONCRETE .)
    UNTIL           reduce using rule 71 (const -> CONCRETE .)
    ELSE            reduce using rule 71 (const -> CONCRETE .)
    RBRACKET        reduce using rule 71 (const -> CONCRETE .)
    R_QBRACKET      reduce using rule 71 (const -> CONCRETE .)


state 66

    (72) const -> PLASTIC .

    NEWLINE         reduce using rule 72 (const -> PLASTIC .)
    LESS            reduce using rule 72 (const -> PLASTIC .)
    GREATER         reduce using rule 72 (const -> PLASTIC .)
    EQ              reduce using rule 72 (const -> PLASTIC .)
    NOTEQ           reduce using rule 72 (const -> PLASTIC .)
    PLUS            reduce using rule 72 (const -> PLASTIC .)
    MINUS           reduce using rule 72 (const -> PLASTIC .)
    TO              reduce using rule 72 (const -> PLASTIC .)
    THEN            reduce using rule 72 (const -> PLASTIC .)
    COMMA           reduce using rule 72 (const -> PLASTIC .)
    UNTIL           reduce using rule 72 (const -> PLASTIC .)
    ELSE            reduce using rule 72 (const -> PLASTIC .)
    RBRACKET        reduce using rule 72 (const -> PLASTIC .)
    R_QBRACKET      reduce using rule 72 (const -> PLASTIC .)


state 67

    (53) qstring -> DOUBLE_QUOTE . string DOUBLE_QUOTE
    (55) string -> . VARIABLE string
    (56) string -> . DECIMAL string
    (57) string -> . FALSE string
    (58) string -> . TRUE string
    (59) string -> . FALSE
    (60) string -> . TRUE
    (61) string -> . DECIMAL
    (62) string -> . VARIABLE

    VARIABLE        shift and go to state 110
    DECIMAL         shift and go to state 111
    FALSE           shift and go to state 112
    TRUE            shift and go to state 113

    string                         shift and go to state 109

state 68

    (54) qstring -> QUOTE . string QUOTE
    (55) string -> . VARIABLE string
    (56) string -> . DECIMAL string
    (57) string -> . FALSE string
    (58) string -> . TRUE string
    (59) string -> . FALSE
    (60) string -> . TRUE
    (61) string -> . DECIMAL
    (62) string -> . VARIABLE

    VARIABLE        shift and go to state 110
    DECIMAL         shift and go to state 111
    FALSE           shift and go to state 112
    TRUE            shift and go to state 113

    string                         shift and go to state 114

state 69

    (24) statement -> empty NEWLINE .

    RETURN          reduce using rule 24 (statement -> empty NEWLINE .)
    COMMENT         reduce using rule 24 (statement -> empty NEWLINE .)
    DO              reduce using rule 24 (statement -> empty NEWLINE .)
    IF              reduce using rule 24 (statement -> empty NEWLINE .)
    FUNCTION        reduce using rule 24 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 24 (statement -> empty NEWLINE .)
    error           reduce using rule 24 (statement -> empty NEWLINE .)
    INTEGER         reduce using rule 24 (statement -> empty NEWLINE .)
    STRING          reduce using rule 24 (statement -> empty NEWLINE .)
    BOOL            reduce using rule 24 (statement -> empty NEWLINE .)
    VECTOR          reduce using rule 24 (statement -> empty NEWLINE .)
    LEFT            reduce using rule 24 (statement -> empty NEWLINE .)
    RIGHT           reduce using rule 24 (statement -> empty NEWLINE .)
    FORWARD         reduce using rule 24 (statement -> empty NEWLINE .)
    BACK            reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_RIGHT    reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_LEFT     reduce using rule 24 (statement -> empty NEWLINE .)
    LMS             reduce using rule 24 (statement -> empty NEWLINE .)
    REFLECT         reduce using rule 24 (statement -> empty NEWLINE .)
    DRILL           reduce using rule 24 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 24 (statement -> empty NEWLINE .)
    $end            reduce using rule 24 (statement -> empty NEWLINE .)
    END             reduce using rule 24 (statement -> empty NEWLINE .)


state 70

    (25) statement -> errors NEWLINE .

    RETURN          reduce using rule 25 (statement -> errors NEWLINE .)
    COMMENT         reduce using rule 25 (statement -> errors NEWLINE .)
    DO              reduce using rule 25 (statement -> errors NEWLINE .)
    IF              reduce using rule 25 (statement -> errors NEWLINE .)
    FUNCTION        reduce using rule 25 (statement -> errors NEWLINE .)
    VARIABLE        reduce using rule 25 (statement -> errors NEWLINE .)
    error           reduce using rule 25 (statement -> errors NEWLINE .)
    INTEGER         reduce using rule 25 (statement -> errors NEWLINE .)
    STRING          reduce using rule 25 (statement -> errors NEWLINE .)
    BOOL            reduce using rule 25 (statement -> errors NEWLINE .)
    VECTOR          reduce using rule 25 (statement -> errors NEWLINE .)
    LEFT            reduce using rule 25 (statement -> errors NEWLINE .)
    RIGHT           reduce using rule 25 (statement -> errors NEWLINE .)
    FORWARD         reduce using rule 25 (statement -> errors NEWLINE .)
    BACK            reduce using rule 25 (statement -> errors NEWLINE .)
    ROTATE_RIGHT    reduce using rule 25 (statement -> errors NEWLINE .)
    ROTATE_LEFT     reduce using rule 25 (statement -> errors NEWLINE .)
    LMS             reduce using rule 25 (statement -> errors NEWLINE .)
    REFLECT         reduce using rule 25 (statement -> errors NEWLINE .)
    DRILL           reduce using rule 25 (statement -> errors NEWLINE .)
    NEWLINE         reduce using rule 25 (statement -> errors NEWLINE .)
    $end            reduce using rule 25 (statement -> errors NEWLINE .)
    END             reduce using rule 25 (statement -> errors NEWLINE .)


state 71

    (112) errors -> errors error .

    NEWLINE         reduce using rule 112 (errors -> errors error .)
    error           reduce using rule 112 (errors -> errors error .)
    RETURN          reduce using rule 112 (errors -> errors error .)
    COMMENT         reduce using rule 112 (errors -> errors error .)
    DO              reduce using rule 112 (errors -> errors error .)
    IF              reduce using rule 112 (errors -> errors error .)
    FUNCTION        reduce using rule 112 (errors -> errors error .)
    VARIABLE        reduce using rule 112 (errors -> errors error .)
    INTEGER         reduce using rule 112 (errors -> errors error .)
    STRING          reduce using rule 112 (errors -> errors error .)
    BOOL            reduce using rule 112 (errors -> errors error .)
    VECTOR          reduce using rule 112 (errors -> errors error .)
    LEFT            reduce using rule 112 (errors -> errors error .)
    RIGHT           reduce using rule 112 (errors -> errors error .)
    FORWARD         reduce using rule 112 (errors -> errors error .)
    BACK            reduce using rule 112 (errors -> errors error .)
    ROTATE_RIGHT    reduce using rule 112 (errors -> errors error .)
    ROTATE_LEFT     reduce using rule 112 (errors -> errors error .)
    LMS             reduce using rule 112 (errors -> errors error .)
    REFLECT         reduce using rule 112 (errors -> errors error .)
    DRILL           reduce using rule 112 (errors -> errors error .)
    $end            reduce using rule 112 (errors -> errors error .)
    END             reduce using rule 112 (errors -> errors error .)
    LESS            reduce using rule 112 (errors -> errors error .)
    GREATER         reduce using rule 112 (errors -> errors error .)
    EQ              reduce using rule 112 (errors -> errors error .)
    NOTEQ           reduce using rule 112 (errors -> errors error .)
    PLUS            reduce using rule 112 (errors -> errors error .)
    MINUS           reduce using rule 112 (errors -> errors error .)
    TO              reduce using rule 112 (errors -> errors error .)
    THEN            reduce using rule 112 (errors -> errors error .)
    COMMA           reduce using rule 112 (errors -> errors error .)
    UNTIL           reduce using rule 112 (errors -> errors error .)
    ELSE            reduce using rule 112 (errors -> errors error .)
    RBRACKET        reduce using rule 112 (errors -> errors error .)
    R_QBRACKET      reduce using rule 112 (errors -> errors error .)


state 72

    (27) declaration -> type variables .

    NEWLINE         reduce using rule 27 (declaration -> type variables .)
    UNTIL           reduce using rule 27 (declaration -> type variables .)
    ELSE            reduce using rule 27 (declaration -> type variables .)


state 73

    (36) variables -> variable . COMMA variables
    (38) variables -> variable .
    (40) assignment -> variable . ASSIGNMENT expression

    COMMA           shift and go to state 115
    NEWLINE         reduce using rule 38 (variables -> variable .)
    UNTIL           reduce using rule 38 (variables -> variable .)
    ELSE            reduce using rule 38 (variables -> variable .)
    ASSIGNMENT      shift and go to state 78


state 74

    (37) variables -> assignment . COMMA variables
    (39) variables -> assignment .

    COMMA           shift and go to state 116
    NEWLINE         reduce using rule 39 (variables -> assignment .)
    UNTIL           reduce using rule 39 (variables -> assignment .)
    ELSE            reduce using rule 39 (variables -> assignment .)


state 75

    (41) variable -> VARIABLE . indexing
    (42) variable -> VARIABLE .
    (43) indexing -> . L_QBRACKET expression R_QBRACKET indexing
    (44) indexing -> . L_QBRACKET expression R_QBRACKET

    COMMA           reduce using rule 42 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 42 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 42 (variable -> VARIABLE .)
    UNTIL           reduce using rule 42 (variable -> VARIABLE .)
    ELSE            reduce using rule 42 (variable -> VARIABLE .)
    L_QBRACKET      shift and go to state 98

    indexing                       shift and go to state 97

state 76

    (28) comment -> COMMENT any .
    (29) any -> any . VARIABLE

    NEWLINE         reduce using rule 28 (comment -> COMMENT any .)
    VARIABLE        shift and go to state 117


state 77

    (30) any -> VARIABLE .

    VARIABLE        reduce using rule 30 (any -> VARIABLE .)
    NEWLINE         reduce using rule 30 (any -> VARIABLE .)


state 78

    (40) assignment -> variable ASSIGNMENT . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    variable                       shift and go to state 48
    expression                     shift and go to state 118
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 79

    (91) vector_command -> variable PUSH . BACK expression
    (92) vector_command -> variable PUSH . FRONT expression

    BACK            shift and go to state 119
    FRONT           shift and go to state 120


state 80

    (79) while -> DO statements_group . UNTIL expression

    UNTIL           shift and go to state 121


state 81

    (2) statements_group -> BEGIN . statements END
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (112) errors -> . errors error
    (113) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    NEWLINE         reduce using rule 106 (empty -> .)
    error           shift and go to state 24
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    statements                     shift and go to state 122
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    empty                          shift and go to state 13
    errors                         shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21

state 82

    (3) statements_group -> inner_statement .

    UNTIL           reduce using rule 3 (statements_group -> inner_statement .)
    ELSE            reduce using rule 3 (statements_group -> inner_statement .)
    NEWLINE         reduce using rule 3 (statements_group -> inner_statement .)


state 83

    (4) inner_statement -> declaration .

    UNTIL           reduce using rule 4 (inner_statement -> declaration .)
    ELSE            reduce using rule 4 (inner_statement -> declaration .)
    NEWLINE         reduce using rule 4 (inner_statement -> declaration .)


state 84

    (5) inner_statement -> assignment .

    UNTIL           reduce using rule 5 (inner_statement -> assignment .)
    ELSE            reduce using rule 5 (inner_statement -> assignment .)
    NEWLINE         reduce using rule 5 (inner_statement -> assignment .)


state 85

    (6) inner_statement -> while .

    UNTIL           reduce using rule 6 (inner_statement -> while .)
    ELSE            reduce using rule 6 (inner_statement -> while .)
    NEWLINE         reduce using rule 6 (inner_statement -> while .)


state 86

    (7) inner_statement -> if .

    UNTIL           reduce using rule 7 (inner_statement -> if .)
    ELSE            reduce using rule 7 (inner_statement -> if .)
    NEWLINE         reduce using rule 7 (inner_statement -> if .)


state 87

    (8) inner_statement -> command .

    UNTIL           reduce using rule 8 (inner_statement -> command .)
    ELSE            reduce using rule 8 (inner_statement -> command .)
    NEWLINE         reduce using rule 8 (inner_statement -> command .)


state 88

    (9) inner_statement -> function .

    UNTIL           reduce using rule 9 (inner_statement -> function .)
    ELSE            reduce using rule 9 (inner_statement -> function .)
    NEWLINE         reduce using rule 9 (inner_statement -> function .)


state 89

    (10) inner_statement -> call .

    UNTIL           reduce using rule 10 (inner_statement -> call .)
    ELSE            reduce using rule 10 (inner_statement -> call .)
    NEWLINE         reduce using rule 10 (inner_statement -> call .)


state 90

    (11) inner_statement -> RETURN . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 123
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 91

    (12) inner_statement -> empty .

    UNTIL           reduce using rule 12 (inner_statement -> empty .)
    ELSE            reduce using rule 12 (inner_statement -> empty .)
    NEWLINE         reduce using rule 12 (inner_statement -> empty .)


state 92

    (35) type -> errors .
    (112) errors -> errors . error

    VARIABLE        reduce using rule 35 (type -> errors .)
    NEWLINE         reduce using rule 35 (type -> errors .)
    LESS            reduce using rule 35 (type -> errors .)
    GREATER         reduce using rule 35 (type -> errors .)
    EQ              reduce using rule 35 (type -> errors .)
    NOTEQ           reduce using rule 35 (type -> errors .)
    PLUS            reduce using rule 35 (type -> errors .)
    MINUS           reduce using rule 35 (type -> errors .)
    TO              reduce using rule 35 (type -> errors .)
    THEN            reduce using rule 35 (type -> errors .)
    COMMA           reduce using rule 35 (type -> errors .)
    UNTIL           reduce using rule 35 (type -> errors .)
    ELSE            reduce using rule 35 (type -> errors .)
    RBRACKET        reduce using rule 35 (type -> errors .)
    R_QBRACKET      reduce using rule 35 (type -> errors .)
    error           shift and go to state 71


state 93

    (80) if -> IF expression . THEN statements_group
    (81) if -> IF expression . THEN statements_group ELSE statements_group
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    THEN            shift and go to state 124
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 94

    (82) function -> FUNCTION OF . type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> FUNCTION OF . type VARIABLE BRACKETS statements_group
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (112) errors -> . errors error
    (113) errors -> . error

    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    error           shift and go to state 24

    type                           shift and go to state 125
    errors                         shift and go to state 92

state 95

    (104) call -> VARIABLE LBRACKET . parameters RBRACKET
    (107) parameters -> . parameters COMMA parameter
    (108) parameters -> . parameter
    (109) parameters -> . CONTINUE
    (110) parameter -> . expression
    (111) parameter -> . VARIABLE EQ expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    CONTINUE        shift and go to state 129
    VARIABLE        shift and go to state 126
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    parameters                     shift and go to state 127
    parameter                      shift and go to state 128
    expression                     shift and go to state 130
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 96

    (105) call -> VARIABLE BRACKETS .

    NEWLINE         reduce using rule 105 (call -> VARIABLE BRACKETS .)
    LESS            reduce using rule 105 (call -> VARIABLE BRACKETS .)
    GREATER         reduce using rule 105 (call -> VARIABLE BRACKETS .)
    EQ              reduce using rule 105 (call -> VARIABLE BRACKETS .)
    NOTEQ           reduce using rule 105 (call -> VARIABLE BRACKETS .)
    PLUS            reduce using rule 105 (call -> VARIABLE BRACKETS .)
    MINUS           reduce using rule 105 (call -> VARIABLE BRACKETS .)
    TO              reduce using rule 105 (call -> VARIABLE BRACKETS .)
    UNTIL           reduce using rule 105 (call -> VARIABLE BRACKETS .)
    THEN            reduce using rule 105 (call -> VARIABLE BRACKETS .)
    COMMA           reduce using rule 105 (call -> VARIABLE BRACKETS .)
    ELSE            reduce using rule 105 (call -> VARIABLE BRACKETS .)
    RBRACKET        reduce using rule 105 (call -> VARIABLE BRACKETS .)
    R_QBRACKET      reduce using rule 105 (call -> VARIABLE BRACKETS .)


state 97

    (41) variable -> VARIABLE indexing .

    ASSIGNMENT      reduce using rule 41 (variable -> VARIABLE indexing .)
    PUSH            reduce using rule 41 (variable -> VARIABLE indexing .)
    POP             reduce using rule 41 (variable -> VARIABLE indexing .)
    NEWLINE         reduce using rule 41 (variable -> VARIABLE indexing .)
    LESS            reduce using rule 41 (variable -> VARIABLE indexing .)
    GREATER         reduce using rule 41 (variable -> VARIABLE indexing .)
    EQ              reduce using rule 41 (variable -> VARIABLE indexing .)
    NOTEQ           reduce using rule 41 (variable -> VARIABLE indexing .)
    PLUS            reduce using rule 41 (variable -> VARIABLE indexing .)
    MINUS           reduce using rule 41 (variable -> VARIABLE indexing .)
    TO              reduce using rule 41 (variable -> VARIABLE indexing .)
    COMMA           reduce using rule 41 (variable -> VARIABLE indexing .)
    UNTIL           reduce using rule 41 (variable -> VARIABLE indexing .)
    ELSE            reduce using rule 41 (variable -> VARIABLE indexing .)
    THEN            reduce using rule 41 (variable -> VARIABLE indexing .)
    RBRACKET        reduce using rule 41 (variable -> VARIABLE indexing .)
    R_QBRACKET      reduce using rule 41 (variable -> VARIABLE indexing .)


state 98

    (43) indexing -> L_QBRACKET . expression R_QBRACKET indexing
    (44) indexing -> L_QBRACKET . expression R_QBRACKET
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 131
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 99

    (34) type -> VECTOR OF . type
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (112) errors -> . errors error
    (113) errors -> . error

    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    error           shift and go to state 24

    type                           shift and go to state 132
    errors                         shift and go to state 92

state 100

    (23) statement -> RETURN expression NEWLINE .

    RETURN          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    COMMENT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DO              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    IF              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FUNCTION        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VARIABLE        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    error           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    INTEGER         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    STRING          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BOOL            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VECTOR          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LEFT            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    RIGHT           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FORWARD         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BACK            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_RIGHT    reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_LEFT     reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LMS             reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    REFLECT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DRILL           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    NEWLINE         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    END             reduce using rule 23 (statement -> RETURN expression NEWLINE .)


state 101

    (73) math_expression -> expression LESS . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 133
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 102

    (74) math_expression -> expression GREATER . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 134
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 103

    (75) math_expression -> expression EQ . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 135
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 104

    (76) math_expression -> expression NOTEQ . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 136
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 105

    (77) math_expression -> expression PLUS . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 137
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 106

    (78) math_expression -> expression MINUS . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 138
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 107

    (86) converting_command -> expression TO . type
    (87) converting_command -> expression TO . expression
    (88) converting_command -> expression TO . vector_of
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (89) vector_of -> . VECTOR OF vector_of
    (90) vector_of -> . VECTOR
    (112) errors -> . errors error
    (113) errors -> . error
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 142
    error           shift and go to state 24
    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 139
    type                           shift and go to state 140
    vector_of                      shift and go to state 141
    errors                         shift and go to state 92
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 108

    (93) vector_pop -> variable POP . BACK
    (94) vector_pop -> variable POP . FRONT

    BACK            shift and go to state 143
    FRONT           shift and go to state 144


state 109

    (53) qstring -> DOUBLE_QUOTE string . DOUBLE_QUOTE

    DOUBLE_QUOTE    shift and go to state 145


state 110

    (55) string -> VARIABLE . string
    (62) string -> VARIABLE .
    (55) string -> . VARIABLE string
    (56) string -> . DECIMAL string
    (57) string -> . FALSE string
    (58) string -> . TRUE string
    (59) string -> . FALSE
    (60) string -> . TRUE
    (61) string -> . DECIMAL
    (62) string -> . VARIABLE

    DOUBLE_QUOTE    reduce using rule 62 (string -> VARIABLE .)
    QUOTE           reduce using rule 62 (string -> VARIABLE .)
    VARIABLE        shift and go to state 110
    DECIMAL         shift and go to state 111
    FALSE           shift and go to state 112
    TRUE            shift and go to state 113

    string                         shift and go to state 146

state 111

    (56) string -> DECIMAL . string
    (61) string -> DECIMAL .
    (55) string -> . VARIABLE string
    (56) string -> . DECIMAL string
    (57) string -> . FALSE string
    (58) string -> . TRUE string
    (59) string -> . FALSE
    (60) string -> . TRUE
    (61) string -> . DECIMAL
    (62) string -> . VARIABLE

    DOUBLE_QUOTE    reduce using rule 61 (string -> DECIMAL .)
    QUOTE           reduce using rule 61 (string -> DECIMAL .)
    VARIABLE        shift and go to state 110
    DECIMAL         shift and go to state 111
    FALSE           shift and go to state 112
    TRUE            shift and go to state 113

    string                         shift and go to state 147

state 112

    (57) string -> FALSE . string
    (59) string -> FALSE .
    (55) string -> . VARIABLE string
    (56) string -> . DECIMAL string
    (57) string -> . FALSE string
    (58) string -> . TRUE string
    (59) string -> . FALSE
    (60) string -> . TRUE
    (61) string -> . DECIMAL
    (62) string -> . VARIABLE

    DOUBLE_QUOTE    reduce using rule 59 (string -> FALSE .)
    QUOTE           reduce using rule 59 (string -> FALSE .)
    VARIABLE        shift and go to state 110
    DECIMAL         shift and go to state 111
    FALSE           shift and go to state 112
    TRUE            shift and go to state 113

    string                         shift and go to state 148

state 113

    (58) string -> TRUE . string
    (60) string -> TRUE .
    (55) string -> . VARIABLE string
    (56) string -> . DECIMAL string
    (57) string -> . FALSE string
    (58) string -> . TRUE string
    (59) string -> . FALSE
    (60) string -> . TRUE
    (61) string -> . DECIMAL
    (62) string -> . VARIABLE

    DOUBLE_QUOTE    reduce using rule 60 (string -> TRUE .)
    QUOTE           reduce using rule 60 (string -> TRUE .)
    VARIABLE        shift and go to state 110
    DECIMAL         shift and go to state 111
    FALSE           shift and go to state 112
    TRUE            shift and go to state 113

    string                         shift and go to state 149

state 114

    (54) qstring -> QUOTE string . QUOTE

    QUOTE           shift and go to state 150


state 115

    (36) variables -> variable COMMA . variables
    (36) variables -> . variable COMMA variables
    (37) variables -> . assignment COMMA variables
    (38) variables -> . variable
    (39) variables -> . assignment
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (40) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 75

    variable                       shift and go to state 73
    variables                      shift and go to state 151
    assignment                     shift and go to state 74

state 116

    (37) variables -> assignment COMMA . variables
    (36) variables -> . variable COMMA variables
    (37) variables -> . assignment COMMA variables
    (38) variables -> . variable
    (39) variables -> . assignment
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (40) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 75

    assignment                     shift and go to state 74
    variables                      shift and go to state 152
    variable                       shift and go to state 73

state 117

    (29) any -> any VARIABLE .

    VARIABLE        reduce using rule 29 (any -> any VARIABLE .)
    NEWLINE         reduce using rule 29 (any -> any VARIABLE .)


state 118

    (40) assignment -> variable ASSIGNMENT expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    NEWLINE         reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    COMMA           reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    UNTIL           reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    ELSE            reduce using rule 40 (assignment -> variable ASSIGNMENT expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 119

    (91) vector_command -> variable PUSH BACK . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    variable                       shift and go to state 48
    expression                     shift and go to state 153
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 120

    (92) vector_command -> variable PUSH FRONT . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    variable                       shift and go to state 48
    expression                     shift and go to state 154
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 121

    (79) while -> DO statements_group UNTIL . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 155
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 122

    (2) statements_group -> BEGIN statements . END
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (112) errors -> . errors error
    (113) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL

    END             shift and go to state 156
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    NEWLINE         reduce using rule 106 (empty -> .)
    error           shift and go to state 24
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    empty                          shift and go to state 13
    errors                         shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21

state 123

    (11) inner_statement -> RETURN expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    UNTIL           reduce using rule 11 (inner_statement -> RETURN expression .)
    ELSE            reduce using rule 11 (inner_statement -> RETURN expression .)
    NEWLINE         reduce using rule 11 (inner_statement -> RETURN expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 124

    (80) if -> IF expression THEN . statements_group
    (81) if -> IF expression THEN . statements_group ELSE statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (112) errors -> . errors error
    (113) errors -> . error

    BEGIN           shift and go to state 81
    RETURN          shift and go to state 90
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    ELSE            reduce using rule 106 (empty -> .)
    NEWLINE         reduce using rule 106 (empty -> .)
    UNTIL           reduce using rule 106 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    error           shift and go to state 24

    statements_group               shift and go to state 157
    inner_statement                shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    while                          shift and go to state 85
    if                             shift and go to state 86
    command                        shift and go to state 87
    function                       shift and go to state 88
    call                           shift and go to state 89
    empty                          shift and go to state 91
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    errors                         shift and go to state 92

state 125

    (82) function -> FUNCTION OF type . VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> FUNCTION OF type . VARIABLE BRACKETS statements_group

    VARIABLE        shift and go to state 158


state 126

    (111) parameter -> VARIABLE . EQ expression
    (41) variable -> VARIABLE . indexing
    (42) variable -> VARIABLE .
    (104) call -> VARIABLE . LBRACKET parameters RBRACKET
    (105) call -> VARIABLE . BRACKETS
    (43) indexing -> . L_QBRACKET expression R_QBRACKET indexing
    (44) indexing -> . L_QBRACKET expression R_QBRACKET

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 159
    POP             reduce using rule 42 (variable -> VARIABLE .)
    LESS            reduce using rule 42 (variable -> VARIABLE .)
    GREATER         reduce using rule 42 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 42 (variable -> VARIABLE .)
    PLUS            reduce using rule 42 (variable -> VARIABLE .)
    MINUS           reduce using rule 42 (variable -> VARIABLE .)
    TO              reduce using rule 42 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 42 (variable -> VARIABLE .)
    COMMA           reduce using rule 42 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 95
    BRACKETS        shift and go to state 96
    L_QBRACKET      shift and go to state 98

  ! EQ              [ reduce using rule 42 (variable -> VARIABLE .) ]

    indexing                       shift and go to state 97

state 127

    (104) call -> VARIABLE LBRACKET parameters . RBRACKET
    (107) parameters -> parameters . COMMA parameter

    RBRACKET        shift and go to state 160
    COMMA           shift and go to state 161


state 128

    (108) parameters -> parameter .

    RBRACKET        reduce using rule 108 (parameters -> parameter .)
    COMMA           reduce using rule 108 (parameters -> parameter .)


state 129

    (109) parameters -> CONTINUE .

    RBRACKET        reduce using rule 109 (parameters -> CONTINUE .)
    COMMA           reduce using rule 109 (parameters -> CONTINUE .)


state 130

    (110) parameter -> expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    RBRACKET        reduce using rule 110 (parameter -> expression .)
    COMMA           reduce using rule 110 (parameter -> expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 131

    (43) indexing -> L_QBRACKET expression . R_QBRACKET indexing
    (44) indexing -> L_QBRACKET expression . R_QBRACKET
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    R_QBRACKET      shift and go to state 162
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 132

    (34) type -> VECTOR OF type .

    VARIABLE        reduce using rule 34 (type -> VECTOR OF type .)
    NEWLINE         reduce using rule 34 (type -> VECTOR OF type .)
    LESS            reduce using rule 34 (type -> VECTOR OF type .)
    GREATER         reduce using rule 34 (type -> VECTOR OF type .)
    EQ              reduce using rule 34 (type -> VECTOR OF type .)
    NOTEQ           reduce using rule 34 (type -> VECTOR OF type .)
    PLUS            reduce using rule 34 (type -> VECTOR OF type .)
    MINUS           reduce using rule 34 (type -> VECTOR OF type .)
    TO              reduce using rule 34 (type -> VECTOR OF type .)
    THEN            reduce using rule 34 (type -> VECTOR OF type .)
    COMMA           reduce using rule 34 (type -> VECTOR OF type .)
    UNTIL           reduce using rule 34 (type -> VECTOR OF type .)
    ELSE            reduce using rule 34 (type -> VECTOR OF type .)
    RBRACKET        reduce using rule 34 (type -> VECTOR OF type .)
    R_QBRACKET      reduce using rule 34 (type -> VECTOR OF type .)


state 133

    (73) math_expression -> expression LESS expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TO resolved as shift
    NEWLINE         reduce using rule 73 (math_expression -> expression LESS expression .)
    THEN            reduce using rule 73 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 73 (math_expression -> expression LESS expression .)
    UNTIL           reduce using rule 73 (math_expression -> expression LESS expression .)
    ELSE            reduce using rule 73 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 73 (math_expression -> expression LESS expression .)
    R_QBRACKET      reduce using rule 73 (math_expression -> expression LESS expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107

  ! LESS            [ reduce using rule 73 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 73 (math_expression -> expression LESS expression .) ]
  ! EQ              [ reduce using rule 73 (math_expression -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 73 (math_expression -> expression LESS expression .) ]
  ! PLUS            [ reduce using rule 73 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 73 (math_expression -> expression LESS expression .) ]
  ! TO              [ reduce using rule 73 (math_expression -> expression LESS expression .) ]


state 134

    (74) math_expression -> expression GREATER expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TO resolved as shift
    NEWLINE         reduce using rule 74 (math_expression -> expression GREATER expression .)
    THEN            reduce using rule 74 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 74 (math_expression -> expression GREATER expression .)
    UNTIL           reduce using rule 74 (math_expression -> expression GREATER expression .)
    ELSE            reduce using rule 74 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 74 (math_expression -> expression GREATER expression .)
    R_QBRACKET      reduce using rule 74 (math_expression -> expression GREATER expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107

  ! LESS            [ reduce using rule 74 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 74 (math_expression -> expression GREATER expression .) ]
  ! EQ              [ reduce using rule 74 (math_expression -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 74 (math_expression -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 74 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 74 (math_expression -> expression GREATER expression .) ]
  ! TO              [ reduce using rule 74 (math_expression -> expression GREATER expression .) ]


state 135

    (75) math_expression -> expression EQ expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TO resolved as shift
    NEWLINE         reduce using rule 75 (math_expression -> expression EQ expression .)
    THEN            reduce using rule 75 (math_expression -> expression EQ expression .)
    COMMA           reduce using rule 75 (math_expression -> expression EQ expression .)
    UNTIL           reduce using rule 75 (math_expression -> expression EQ expression .)
    ELSE            reduce using rule 75 (math_expression -> expression EQ expression .)
    RBRACKET        reduce using rule 75 (math_expression -> expression EQ expression .)
    R_QBRACKET      reduce using rule 75 (math_expression -> expression EQ expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107

  ! LESS            [ reduce using rule 75 (math_expression -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 75 (math_expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 75 (math_expression -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 75 (math_expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 75 (math_expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 75 (math_expression -> expression EQ expression .) ]
  ! TO              [ reduce using rule 75 (math_expression -> expression EQ expression .) ]


state 136

    (76) math_expression -> expression NOTEQ expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TO resolved as shift
    NEWLINE         reduce using rule 76 (math_expression -> expression NOTEQ expression .)
    THEN            reduce using rule 76 (math_expression -> expression NOTEQ expression .)
    COMMA           reduce using rule 76 (math_expression -> expression NOTEQ expression .)
    UNTIL           reduce using rule 76 (math_expression -> expression NOTEQ expression .)
    ELSE            reduce using rule 76 (math_expression -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 76 (math_expression -> expression NOTEQ expression .)
    R_QBRACKET      reduce using rule 76 (math_expression -> expression NOTEQ expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107

  ! LESS            [ reduce using rule 76 (math_expression -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 76 (math_expression -> expression NOTEQ expression .) ]
  ! EQ              [ reduce using rule 76 (math_expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 76 (math_expression -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 76 (math_expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 76 (math_expression -> expression NOTEQ expression .) ]
  ! TO              [ reduce using rule 76 (math_expression -> expression NOTEQ expression .) ]


state 137

    (77) math_expression -> expression PLUS expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TO resolved as shift
    NEWLINE         reduce using rule 77 (math_expression -> expression PLUS expression .)
    THEN            reduce using rule 77 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 77 (math_expression -> expression PLUS expression .)
    UNTIL           reduce using rule 77 (math_expression -> expression PLUS expression .)
    ELSE            reduce using rule 77 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 77 (math_expression -> expression PLUS expression .)
    R_QBRACKET      reduce using rule 77 (math_expression -> expression PLUS expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107

  ! LESS            [ reduce using rule 77 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 77 (math_expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 77 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 77 (math_expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 77 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 77 (math_expression -> expression PLUS expression .) ]
  ! TO              [ reduce using rule 77 (math_expression -> expression PLUS expression .) ]


state 138

    (78) math_expression -> expression MINUS expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TO resolved as shift
    NEWLINE         reduce using rule 78 (math_expression -> expression MINUS expression .)
    THEN            reduce using rule 78 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 78 (math_expression -> expression MINUS expression .)
    UNTIL           reduce using rule 78 (math_expression -> expression MINUS expression .)
    ELSE            reduce using rule 78 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 78 (math_expression -> expression MINUS expression .)
    R_QBRACKET      reduce using rule 78 (math_expression -> expression MINUS expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107

  ! LESS            [ reduce using rule 78 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 78 (math_expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 78 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 78 (math_expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 78 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 78 (math_expression -> expression MINUS expression .) ]
  ! TO              [ reduce using rule 78 (math_expression -> expression MINUS expression .) ]


state 139

    (87) converting_command -> expression TO expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TO resolved as shift
    NEWLINE         reduce using rule 87 (converting_command -> expression TO expression .)
    THEN            reduce using rule 87 (converting_command -> expression TO expression .)
    COMMA           reduce using rule 87 (converting_command -> expression TO expression .)
    UNTIL           reduce using rule 87 (converting_command -> expression TO expression .)
    ELSE            reduce using rule 87 (converting_command -> expression TO expression .)
    RBRACKET        reduce using rule 87 (converting_command -> expression TO expression .)
    R_QBRACKET      reduce using rule 87 (converting_command -> expression TO expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107

  ! LESS            [ reduce using rule 87 (converting_command -> expression TO expression .) ]
  ! GREATER         [ reduce using rule 87 (converting_command -> expression TO expression .) ]
  ! EQ              [ reduce using rule 87 (converting_command -> expression TO expression .) ]
  ! NOTEQ           [ reduce using rule 87 (converting_command -> expression TO expression .) ]
  ! PLUS            [ reduce using rule 87 (converting_command -> expression TO expression .) ]
  ! MINUS           [ reduce using rule 87 (converting_command -> expression TO expression .) ]
  ! TO              [ reduce using rule 87 (converting_command -> expression TO expression .) ]


state 140

    (86) converting_command -> expression TO type .

    NEWLINE         reduce using rule 86 (converting_command -> expression TO type .)
    LESS            reduce using rule 86 (converting_command -> expression TO type .)
    GREATER         reduce using rule 86 (converting_command -> expression TO type .)
    EQ              reduce using rule 86 (converting_command -> expression TO type .)
    NOTEQ           reduce using rule 86 (converting_command -> expression TO type .)
    PLUS            reduce using rule 86 (converting_command -> expression TO type .)
    MINUS           reduce using rule 86 (converting_command -> expression TO type .)
    TO              reduce using rule 86 (converting_command -> expression TO type .)
    THEN            reduce using rule 86 (converting_command -> expression TO type .)
    COMMA           reduce using rule 86 (converting_command -> expression TO type .)
    UNTIL           reduce using rule 86 (converting_command -> expression TO type .)
    ELSE            reduce using rule 86 (converting_command -> expression TO type .)
    RBRACKET        reduce using rule 86 (converting_command -> expression TO type .)
    R_QBRACKET      reduce using rule 86 (converting_command -> expression TO type .)


state 141

    (88) converting_command -> expression TO vector_of .

    NEWLINE         reduce using rule 88 (converting_command -> expression TO vector_of .)
    LESS            reduce using rule 88 (converting_command -> expression TO vector_of .)
    GREATER         reduce using rule 88 (converting_command -> expression TO vector_of .)
    EQ              reduce using rule 88 (converting_command -> expression TO vector_of .)
    NOTEQ           reduce using rule 88 (converting_command -> expression TO vector_of .)
    PLUS            reduce using rule 88 (converting_command -> expression TO vector_of .)
    MINUS           reduce using rule 88 (converting_command -> expression TO vector_of .)
    TO              reduce using rule 88 (converting_command -> expression TO vector_of .)
    THEN            reduce using rule 88 (converting_command -> expression TO vector_of .)
    COMMA           reduce using rule 88 (converting_command -> expression TO vector_of .)
    UNTIL           reduce using rule 88 (converting_command -> expression TO vector_of .)
    ELSE            reduce using rule 88 (converting_command -> expression TO vector_of .)
    RBRACKET        reduce using rule 88 (converting_command -> expression TO vector_of .)
    R_QBRACKET      reduce using rule 88 (converting_command -> expression TO vector_of .)


state 142

    (34) type -> VECTOR . OF type
    (89) vector_of -> VECTOR . OF vector_of
    (90) vector_of -> VECTOR .

    OF              shift and go to state 163
    NEWLINE         reduce using rule 90 (vector_of -> VECTOR .)
    LESS            reduce using rule 90 (vector_of -> VECTOR .)
    GREATER         reduce using rule 90 (vector_of -> VECTOR .)
    EQ              reduce using rule 90 (vector_of -> VECTOR .)
    NOTEQ           reduce using rule 90 (vector_of -> VECTOR .)
    PLUS            reduce using rule 90 (vector_of -> VECTOR .)
    MINUS           reduce using rule 90 (vector_of -> VECTOR .)
    TO              reduce using rule 90 (vector_of -> VECTOR .)
    THEN            reduce using rule 90 (vector_of -> VECTOR .)
    COMMA           reduce using rule 90 (vector_of -> VECTOR .)
    UNTIL           reduce using rule 90 (vector_of -> VECTOR .)
    ELSE            reduce using rule 90 (vector_of -> VECTOR .)
    RBRACKET        reduce using rule 90 (vector_of -> VECTOR .)
    R_QBRACKET      reduce using rule 90 (vector_of -> VECTOR .)


state 143

    (93) vector_pop -> variable POP BACK .

    NEWLINE         reduce using rule 93 (vector_pop -> variable POP BACK .)
    LESS            reduce using rule 93 (vector_pop -> variable POP BACK .)
    GREATER         reduce using rule 93 (vector_pop -> variable POP BACK .)
    EQ              reduce using rule 93 (vector_pop -> variable POP BACK .)
    NOTEQ           reduce using rule 93 (vector_pop -> variable POP BACK .)
    PLUS            reduce using rule 93 (vector_pop -> variable POP BACK .)
    MINUS           reduce using rule 93 (vector_pop -> variable POP BACK .)
    TO              reduce using rule 93 (vector_pop -> variable POP BACK .)
    THEN            reduce using rule 93 (vector_pop -> variable POP BACK .)
    COMMA           reduce using rule 93 (vector_pop -> variable POP BACK .)
    UNTIL           reduce using rule 93 (vector_pop -> variable POP BACK .)
    ELSE            reduce using rule 93 (vector_pop -> variable POP BACK .)
    RBRACKET        reduce using rule 93 (vector_pop -> variable POP BACK .)
    R_QBRACKET      reduce using rule 93 (vector_pop -> variable POP BACK .)


state 144

    (94) vector_pop -> variable POP FRONT .

    NEWLINE         reduce using rule 94 (vector_pop -> variable POP FRONT .)
    LESS            reduce using rule 94 (vector_pop -> variable POP FRONT .)
    GREATER         reduce using rule 94 (vector_pop -> variable POP FRONT .)
    EQ              reduce using rule 94 (vector_pop -> variable POP FRONT .)
    NOTEQ           reduce using rule 94 (vector_pop -> variable POP FRONT .)
    PLUS            reduce using rule 94 (vector_pop -> variable POP FRONT .)
    MINUS           reduce using rule 94 (vector_pop -> variable POP FRONT .)
    TO              reduce using rule 94 (vector_pop -> variable POP FRONT .)
    THEN            reduce using rule 94 (vector_pop -> variable POP FRONT .)
    COMMA           reduce using rule 94 (vector_pop -> variable POP FRONT .)
    UNTIL           reduce using rule 94 (vector_pop -> variable POP FRONT .)
    ELSE            reduce using rule 94 (vector_pop -> variable POP FRONT .)
    RBRACKET        reduce using rule 94 (vector_pop -> variable POP FRONT .)
    R_QBRACKET      reduce using rule 94 (vector_pop -> variable POP FRONT .)


state 145

    (53) qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .

    NEWLINE         reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    LESS            reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    GREATER         reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    EQ              reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NOTEQ           reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    PLUS            reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    MINUS           reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    TO              reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    THEN            reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    COMMA           reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    UNTIL           reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    ELSE            reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    RBRACKET        reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    R_QBRACKET      reduce using rule 53 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)


state 146

    (55) string -> VARIABLE string .

    DOUBLE_QUOTE    reduce using rule 55 (string -> VARIABLE string .)
    QUOTE           reduce using rule 55 (string -> VARIABLE string .)


state 147

    (56) string -> DECIMAL string .

    DOUBLE_QUOTE    reduce using rule 56 (string -> DECIMAL string .)
    QUOTE           reduce using rule 56 (string -> DECIMAL string .)


state 148

    (57) string -> FALSE string .

    DOUBLE_QUOTE    reduce using rule 57 (string -> FALSE string .)
    QUOTE           reduce using rule 57 (string -> FALSE string .)


state 149

    (58) string -> TRUE string .

    DOUBLE_QUOTE    reduce using rule 58 (string -> TRUE string .)
    QUOTE           reduce using rule 58 (string -> TRUE string .)


state 150

    (54) qstring -> QUOTE string QUOTE .

    NEWLINE         reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    LESS            reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    GREATER         reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    EQ              reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    NOTEQ           reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    PLUS            reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    MINUS           reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    TO              reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    THEN            reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    COMMA           reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    UNTIL           reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    ELSE            reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    RBRACKET        reduce using rule 54 (qstring -> QUOTE string QUOTE .)
    R_QBRACKET      reduce using rule 54 (qstring -> QUOTE string QUOTE .)


state 151

    (36) variables -> variable COMMA variables .

    NEWLINE         reduce using rule 36 (variables -> variable COMMA variables .)
    UNTIL           reduce using rule 36 (variables -> variable COMMA variables .)
    ELSE            reduce using rule 36 (variables -> variable COMMA variables .)


state 152

    (37) variables -> assignment COMMA variables .

    NEWLINE         reduce using rule 37 (variables -> assignment COMMA variables .)
    UNTIL           reduce using rule 37 (variables -> assignment COMMA variables .)
    ELSE            reduce using rule 37 (variables -> assignment COMMA variables .)


state 153

    (91) vector_command -> variable PUSH BACK expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    NEWLINE         reduce using rule 91 (vector_command -> variable PUSH BACK expression .)
    UNTIL           reduce using rule 91 (vector_command -> variable PUSH BACK expression .)
    ELSE            reduce using rule 91 (vector_command -> variable PUSH BACK expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 154

    (92) vector_command -> variable PUSH FRONT expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    NEWLINE         reduce using rule 92 (vector_command -> variable PUSH FRONT expression .)
    UNTIL           reduce using rule 92 (vector_command -> variable PUSH FRONT expression .)
    ELSE            reduce using rule 92 (vector_command -> variable PUSH FRONT expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 155

    (79) while -> DO statements_group UNTIL expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    NEWLINE         reduce using rule 79 (while -> DO statements_group UNTIL expression .)
    UNTIL           reduce using rule 79 (while -> DO statements_group UNTIL expression .)
    ELSE            reduce using rule 79 (while -> DO statements_group UNTIL expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 156

    (2) statements_group -> BEGIN statements END .

    UNTIL           reduce using rule 2 (statements_group -> BEGIN statements END .)
    ELSE            reduce using rule 2 (statements_group -> BEGIN statements END .)
    NEWLINE         reduce using rule 2 (statements_group -> BEGIN statements END .)


state 157

    (80) if -> IF expression THEN statements_group .
    (81) if -> IF expression THEN statements_group . ELSE statements_group

  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 80 (if -> IF expression THEN statements_group .)
    UNTIL           reduce using rule 80 (if -> IF expression THEN statements_group .)
    ELSE            shift and go to state 164

  ! ELSE            [ reduce using rule 80 (if -> IF expression THEN statements_group .) ]


state 158

    (82) function -> FUNCTION OF type VARIABLE . LBRACKET parameters RBRACKET statements_group
    (83) function -> FUNCTION OF type VARIABLE . BRACKETS statements_group

    LBRACKET        shift and go to state 165
    BRACKETS        shift and go to state 166


state 159

    (111) parameter -> VARIABLE EQ . expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    expression                     shift and go to state 167
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 160

    (104) call -> VARIABLE LBRACKET parameters RBRACKET .

    NEWLINE         reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    LESS            reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    GREATER         reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    EQ              reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    NOTEQ           reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    PLUS            reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    MINUS           reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    TO              reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    UNTIL           reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    THEN            reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    COMMA           reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    ELSE            reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    RBRACKET        reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    R_QBRACKET      reduce using rule 104 (call -> VARIABLE LBRACKET parameters RBRACKET .)


state 161

    (107) parameters -> parameters COMMA . parameter
    (110) parameter -> . expression
    (111) parameter -> . VARIABLE EQ expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 126
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    parameter                      shift and go to state 168
    expression                     shift and go to state 130
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 162

    (43) indexing -> L_QBRACKET expression R_QBRACKET . indexing
    (44) indexing -> L_QBRACKET expression R_QBRACKET .
    (43) indexing -> . L_QBRACKET expression R_QBRACKET indexing
    (44) indexing -> . L_QBRACKET expression R_QBRACKET

    ASSIGNMENT      reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    PUSH            reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    POP             reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    NEWLINE         reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    LESS            reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    GREATER         reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    EQ              reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    NOTEQ           reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    PLUS            reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    MINUS           reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    TO              reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    THEN            reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    COMMA           reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    UNTIL           reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    ELSE            reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    R_QBRACKET      reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    RBRACKET        reduce using rule 44 (indexing -> L_QBRACKET expression R_QBRACKET .)
    L_QBRACKET      shift and go to state 98

    indexing                       shift and go to state 169

state 163

    (34) type -> VECTOR OF . type
    (89) vector_of -> VECTOR OF . vector_of
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (89) vector_of -> . VECTOR OF vector_of
    (90) vector_of -> . VECTOR
    (112) errors -> . errors error
    (113) errors -> . error

    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 142
    error           shift and go to state 24

    type                           shift and go to state 132
    vector_of                      shift and go to state 170
    errors                         shift and go to state 92

state 164

    (81) if -> IF expression THEN statements_group ELSE . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (112) errors -> . errors error
    (113) errors -> . error

    BEGIN           shift and go to state 81
    RETURN          shift and go to state 90
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    ELSE            reduce using rule 106 (empty -> .)
    NEWLINE         reduce using rule 106 (empty -> .)
    UNTIL           reduce using rule 106 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    error           shift and go to state 24

    statements_group               shift and go to state 171
    inner_statement                shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    while                          shift and go to state 85
    if                             shift and go to state 86
    command                        shift and go to state 87
    function                       shift and go to state 88
    call                           shift and go to state 89
    empty                          shift and go to state 91
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    errors                         shift and go to state 92

state 165

    (82) function -> FUNCTION OF type VARIABLE LBRACKET . parameters RBRACKET statements_group
    (107) parameters -> . parameters COMMA parameter
    (108) parameters -> . parameter
    (109) parameters -> . CONTINUE
    (110) parameter -> . expression
    (111) parameter -> . VARIABLE EQ expression
    (45) expression -> . variable
    (46) expression -> . const
    (47) expression -> . qstring
    (48) expression -> . math_expression
    (49) expression -> . robot_command
    (50) expression -> . converting_command
    (51) expression -> . vector_pop
    (52) expression -> . call
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (63) const -> . TRUE
    (64) const -> . FALSE
    (65) const -> . UNDEFINED
    (66) const -> . DECIMAL
    (67) const -> . EXIT
    (68) const -> . WOOD
    (69) const -> . STEEL
    (70) const -> . GLASS
    (71) const -> . CONCRETE
    (72) const -> . PLASTIC
    (53) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (54) qstring -> . QUOTE string QUOTE
    (73) math_expression -> . expression LESS expression
    (74) math_expression -> . expression GREATER expression
    (75) math_expression -> . expression EQ expression
    (76) math_expression -> . expression NOTEQ expression
    (77) math_expression -> . expression PLUS expression
    (78) math_expression -> . expression MINUS expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (86) converting_command -> . expression TO type
    (87) converting_command -> . expression TO expression
    (88) converting_command -> . expression TO vector_of
    (93) vector_pop -> . variable POP BACK
    (94) vector_pop -> . variable POP FRONT
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS

    CONTINUE        shift and go to state 129
    VARIABLE        shift and go to state 126
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    UNDEFINED       shift and go to state 59
    DECIMAL         shift and go to state 60
    EXIT            shift and go to state 61
    WOOD            shift and go to state 62
    STEEL           shift and go to state 63
    GLASS           shift and go to state 64
    CONCRETE        shift and go to state 65
    PLASTIC         shift and go to state 66
    DOUBLE_QUOTE    shift and go to state 67
    QUOTE           shift and go to state 68
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37

    parameters                     shift and go to state 172
    parameter                      shift and go to state 128
    expression                     shift and go to state 130
    variable                       shift and go to state 48
    const                          shift and go to state 49
    qstring                        shift and go to state 50
    math_expression                shift and go to state 51
    robot_command                  shift and go to state 52
    converting_command             shift and go to state 53
    vector_pop                     shift and go to state 54
    call                           shift and go to state 55

state 166

    (83) function -> FUNCTION OF type VARIABLE BRACKETS . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (112) errors -> . errors error
    (113) errors -> . error

    BEGIN           shift and go to state 81
    RETURN          shift and go to state 90
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    ELSE            reduce using rule 106 (empty -> .)
    NEWLINE         reduce using rule 106 (empty -> .)
    UNTIL           reduce using rule 106 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    error           shift and go to state 24

    type                           shift and go to state 15
    statements_group               shift and go to state 173
    inner_statement                shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    while                          shift and go to state 85
    if                             shift and go to state 86
    command                        shift and go to state 87
    function                       shift and go to state 88
    call                           shift and go to state 89
    empty                          shift and go to state 91
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    errors                         shift and go to state 92

state 167

    (111) parameter -> VARIABLE EQ expression .
    (73) math_expression -> expression . LESS expression
    (74) math_expression -> expression . GREATER expression
    (75) math_expression -> expression . EQ expression
    (76) math_expression -> expression . NOTEQ expression
    (77) math_expression -> expression . PLUS expression
    (78) math_expression -> expression . MINUS expression
    (86) converting_command -> expression . TO type
    (87) converting_command -> expression . TO expression
    (88) converting_command -> expression . TO vector_of

    RBRACKET        reduce using rule 111 (parameter -> VARIABLE EQ expression .)
    COMMA           reduce using rule 111 (parameter -> VARIABLE EQ expression .)
    LESS            shift and go to state 101
    GREATER         shift and go to state 102
    EQ              shift and go to state 103
    NOTEQ           shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TO              shift and go to state 107


state 168

    (107) parameters -> parameters COMMA parameter .

    RBRACKET        reduce using rule 107 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 107 (parameters -> parameters COMMA parameter .)


state 169

    (43) indexing -> L_QBRACKET expression R_QBRACKET indexing .

    ASSIGNMENT      reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    PUSH            reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    POP             reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    NEWLINE         reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    LESS            reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    GREATER         reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    EQ              reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    NOTEQ           reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    PLUS            reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    MINUS           reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    TO              reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    THEN            reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    COMMA           reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    UNTIL           reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    ELSE            reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    R_QBRACKET      reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)
    RBRACKET        reduce using rule 43 (indexing -> L_QBRACKET expression R_QBRACKET indexing .)


state 170

    (89) vector_of -> VECTOR OF vector_of .

    NEWLINE         reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    LESS            reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    GREATER         reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    EQ              reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    NOTEQ           reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    PLUS            reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    MINUS           reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    TO              reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    THEN            reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    COMMA           reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    UNTIL           reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    ELSE            reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    RBRACKET        reduce using rule 89 (vector_of -> VECTOR OF vector_of .)
    R_QBRACKET      reduce using rule 89 (vector_of -> VECTOR OF vector_of .)


state 171

    (81) if -> IF expression THEN statements_group ELSE statements_group .

    NEWLINE         reduce using rule 81 (if -> IF expression THEN statements_group ELSE statements_group .)
    UNTIL           reduce using rule 81 (if -> IF expression THEN statements_group ELSE statements_group .)
    ELSE            reduce using rule 81 (if -> IF expression THEN statements_group ELSE statements_group .)


state 172

    (82) function -> FUNCTION OF type VARIABLE LBRACKET parameters . RBRACKET statements_group
    (107) parameters -> parameters . COMMA parameter

    RBRACKET        shift and go to state 174
    COMMA           shift and go to state 161


state 173

    (83) function -> FUNCTION OF type VARIABLE BRACKETS statements_group .

    NEWLINE         reduce using rule 83 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    UNTIL           reduce using rule 83 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    ELSE            reduce using rule 83 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)


state 174

    (82) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (40) assignment -> . variable ASSIGNMENT expression
    (79) while -> . DO statements_group UNTIL expression
    (80) if -> . IF expression THEN statements_group
    (81) if -> . IF expression THEN statements_group ELSE statements_group
    (84) command -> . vector_command
    (85) command -> . robot_command
    (82) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (83) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (104) call -> . VARIABLE LBRACKET parameters RBRACKET
    (105) call -> . VARIABLE BRACKETS
    (106) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (35) type -> . errors
    (41) variable -> . VARIABLE indexing
    (42) variable -> . VARIABLE
    (91) vector_command -> . variable PUSH BACK expression
    (92) vector_command -> . variable PUSH FRONT expression
    (95) robot_command -> . LEFT
    (96) robot_command -> . RIGHT
    (97) robot_command -> . FORWARD
    (98) robot_command -> . BACK
    (99) robot_command -> . ROTATE_RIGHT
    (100) robot_command -> . ROTATE_LEFT
    (101) robot_command -> . LMS
    (102) robot_command -> . REFLECT
    (103) robot_command -> . DRILL
    (112) errors -> . errors error
    (113) errors -> . error

    BEGIN           shift and go to state 81
    RETURN          shift and go to state 90
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    ELSE            reduce using rule 106 (empty -> .)
    NEWLINE         reduce using rule 106 (empty -> .)
    UNTIL           reduce using rule 106 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    error           shift and go to state 24

    type                           shift and go to state 15
    statements_group               shift and go to state 175
    inner_statement                shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    while                          shift and go to state 85
    if                             shift and go to state 86
    command                        shift and go to state 87
    function                       shift and go to state 88
    call                           shift and go to state 89
    empty                          shift and go to state 91
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    errors                         shift and go to state 92

state 175

    (82) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .

    NEWLINE         reduce using rule 82 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    UNTIL           reduce using rule 82 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    ELSE            reduce using rule 82 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 14 resolved as shift
WARNING: shift/reduce conflict for error in state 14 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS in state 133 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 133 resolved as shift
WARNING: shift/reduce conflict for EQ in state 133 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TO in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS in state 134 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 134 resolved as shift
WARNING: shift/reduce conflict for EQ in state 134 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for TO in state 134 resolved as shift
WARNING: shift/reduce conflict for LESS in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 135 resolved as shift
WARNING: shift/reduce conflict for EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for TO in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 136 resolved as shift
WARNING: shift/reduce conflict for EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for TO in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS in state 137 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 137 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for TO in state 137 resolved as shift
WARNING: shift/reduce conflict for LESS in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 138 resolved as shift
WARNING: shift/reduce conflict for EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for TO in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS in state 139 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 139 resolved as shift
WARNING: shift/reduce conflict for EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for TO in state 139 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 157 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (statement -> errors)
WARNING: rejected rule (type -> errors) in state 14
