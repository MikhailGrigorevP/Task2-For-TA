Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> application
Rule 1     application -> statements
Rule 2     statements_group -> BEGIN statements END
Rule 3     statements_group -> inner_statement
Rule 4     inner_statement -> declaration
Rule 5     inner_statement -> assignment
Rule 6     inner_statement -> while
Rule 7     inner_statement -> if
Rule 8     inner_statement -> command
Rule 9     inner_statement -> function
Rule 10    inner_statement -> call
Rule 11    inner_statement -> RETURN expression
Rule 12    inner_statement -> empty
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> declaration NEWLINE
Rule 16    statement -> comment NEWLINE
Rule 17    statement -> assignment NEWLINE
Rule 18    statement -> while NEWLINE
Rule 19    statement -> if NEWLINE
Rule 20    statement -> command NEWLINE
Rule 21    statement -> function NEWLINE
Rule 22    statement -> call NEWLINE
Rule 23    statement -> RETURN expression NEWLINE
Rule 24    statement -> empty NEWLINE
Rule 25    declaration -> type variables
Rule 26    comment -> COMMENT any
Rule 27    any -> any VARIABLE
Rule 28    any -> VARIABLE
Rule 29    type -> INTEGER
Rule 30    type -> STRING
Rule 31    type -> BOOL
Rule 32    type -> VECTOR OF type
Rule 33    variables -> variable COMMA variables
Rule 34    variables -> assignment COMMA variables
Rule 35    variables -> variable
Rule 36    variables -> assignment
Rule 37    assignment -> variable ASSIGNMENT expression
Rule 38    variable -> VARIABLE L_QBRACKET expression R_QBRACKET
Rule 39    variable -> VARIABLE
Rule 40    expression -> variable
Rule 41    expression -> const
Rule 42    expression -> qstring
Rule 43    expression -> math_expression
Rule 44    expression -> call
Rule 45    qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE
Rule 46    qstring -> QUOTE string QUOTE
Rule 47    string -> string VARIABLE
Rule 48    string -> VARIABLE
Rule 49    const -> TRUE
Rule 50    const -> FALSE
Rule 51    const -> UNDEFINED
Rule 52    const -> DECIMAL
Rule 53    const -> EXIT
Rule 54    const -> WOOD
Rule 55    const -> STEEL
Rule 56    const -> GLASS
Rule 57    const -> CONCRETE
Rule 58    const -> PLASTIC
Rule 59    math_expression -> expression PLUS expression
Rule 60    math_expression -> expression MINUS expression
Rule 61    math_expression -> MINUS expression
Rule 62    math_expression -> expression LESS expression
Rule 63    math_expression -> expression GREATER expression
Rule 64    math_expression -> expression EQ expression
Rule 65    math_expression -> expression NOTEQ expression
Rule 66    while -> DO statements_group UNTIL expression
Rule 67    if -> IF expression THEN statements_group
Rule 68    if -> IF expression THEN statements_group ELSE statements_group
Rule 69    function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
Rule 70    function -> FUNCTION OF type VARIABLE BRACKETS statements_group
Rule 71    command -> vector_command
Rule 72    command -> robot_command
Rule 73    command -> converting_command
Rule 74    converting_command -> expression TO type
Rule 75    converting_command -> expression TO expression
Rule 76    vector_command -> VARIABLE PUSH BACK expression
Rule 77    vector_command -> VARIABLE POP BACK
Rule 78    vector_command -> VARIABLE PUSH FRONT expression
Rule 79    vector_command -> VARIABLE POP FRONT
Rule 80    robot_command -> LEFT
Rule 81    robot_command -> RIGHT
Rule 82    robot_command -> FORWARD
Rule 83    robot_command -> BACK
Rule 84    robot_command -> ROTATE_RIGHT
Rule 85    robot_command -> ROTATE_LEFT
Rule 86    robot_command -> LMS
Rule 87    robot_command -> REFLECT
Rule 88    robot_command -> DRILL
Rule 89    call -> VARIABLE LBRACKET parameters RBRACKET
Rule 90    call -> VARIABLE BRACKETS
Rule 91    empty -> <empty>
Rule 92    parameters -> parameters COMMA parameter
Rule 93    parameters -> parameter
Rule 94    parameters -> parameters CONTINUE
Rule 95    parameter -> expression
Rule 96    parameter -> VARIABLE EQ expression

Terminals, with rules where they appear

ASSIGNMENT           : 37
BACK                 : 76 77 83
BEGIN                : 2
BOOL                 : 31
BRACKETS             : 70 90
COMMA                : 33 34 92
COMMENT              : 26
CONCRETE             : 57
CONTINUE             : 94
DECIMAL              : 52
DO                   : 66
DOUBLE_QUOTE         : 45 45
DRILL                : 88
ELSE                 : 68
END                  : 2
EQ                   : 64 96
EXIT                 : 53
FALSE                : 50
FORWARD              : 82
FRONT                : 78 79
FUNCTION             : 69 70
GLASS                : 56
GREATER              : 63
IF                   : 67 68
INTEGER              : 29
LBRACKET             : 69 89
LEFT                 : 80
LESS                 : 62
LMS                  : 86
L_QBRACKET           : 38
MINUS                : 60 61
NEWLINE              : 15 16 17 18 19 20 21 22 23 24
NOTEQ                : 65
OF                   : 32 69 70
PLASTIC              : 58
PLUS                 : 59
POP                  : 77 79
PUSH                 : 76 78
QUOTE                : 46 46
RBRACKET             : 69 89
REFLECT              : 87
RETURN               : 11 23
RIGHT                : 81
ROTATE_LEFT          : 85
ROTATE_RIGHT         : 84
R_QBRACKET           : 38
STEEL                : 55
STRING               : 30
THEN                 : 67 68
TO                   : 74 75
TRUE                 : 49
UNDEFINED            : 51
UNTIL                : 66
VARIABLE             : 27 28 38 39 47 48 69 70 76 77 78 79 89 90 96
VECTOR               : 32
WOOD                 : 54
error                : 

Nonterminals, with rules where they appear

any                  : 26 27
application          : 0
assignment           : 5 17 34 36
call                 : 10 22 44
command              : 8 20
comment              : 16
const                : 41
converting_command   : 73
declaration          : 4 15
empty                : 12 24
expression           : 11 23 37 38 59 59 60 60 61 62 62 63 63 64 64 65 65 66 67 68 74 75 75 76 78 95 96
function             : 9 21
if                   : 7 19
inner_statement      : 3
math_expression      : 43
parameter            : 92 93
parameters           : 69 89 92 94
qstring              : 42
robot_command        : 72
statement            : 13 14
statements           : 1 2 13
statements_group     : 66 67 68 68 69 70
string               : 45 46 47
type                 : 25 32 69 70 74
variable             : 33 35 37 40
variables            : 25 33 34
vector_command       : 71
while                : 6 18

Parsing method: LALR

state 0

    (0) S' -> . application
    (1) application -> . statements
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) declaration -> . type variables
    (26) comment -> . COMMENT any
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    NEWLINE         reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    application                    shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 1

    (0) S' -> application .



state 2

    (1) application -> statements .
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) declaration -> . type variables
    (26) comment -> . COMMENT any
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    $end            reduce using rule 1 (application -> statements .)
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    NEWLINE         reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statement                      shift and go to state 54
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 3

    (14) statements -> statement .

    RETURN          reduce using rule 14 (statements -> statement .)
    COMMENT         reduce using rule 14 (statements -> statement .)
    DO              reduce using rule 14 (statements -> statement .)
    IF              reduce using rule 14 (statements -> statement .)
    FUNCTION        reduce using rule 14 (statements -> statement .)
    VARIABLE        reduce using rule 14 (statements -> statement .)
    INTEGER         reduce using rule 14 (statements -> statement .)
    STRING          reduce using rule 14 (statements -> statement .)
    BOOL            reduce using rule 14 (statements -> statement .)
    VECTOR          reduce using rule 14 (statements -> statement .)
    LEFT            reduce using rule 14 (statements -> statement .)
    RIGHT           reduce using rule 14 (statements -> statement .)
    FORWARD         reduce using rule 14 (statements -> statement .)
    BACK            reduce using rule 14 (statements -> statement .)
    ROTATE_RIGHT    reduce using rule 14 (statements -> statement .)
    ROTATE_LEFT     reduce using rule 14 (statements -> statement .)
    LMS             reduce using rule 14 (statements -> statement .)
    REFLECT         reduce using rule 14 (statements -> statement .)
    DRILL           reduce using rule 14 (statements -> statement .)
    TRUE            reduce using rule 14 (statements -> statement .)
    FALSE           reduce using rule 14 (statements -> statement .)
    UNDEFINED       reduce using rule 14 (statements -> statement .)
    DECIMAL         reduce using rule 14 (statements -> statement .)
    EXIT            reduce using rule 14 (statements -> statement .)
    WOOD            reduce using rule 14 (statements -> statement .)
    STEEL           reduce using rule 14 (statements -> statement .)
    GLASS           reduce using rule 14 (statements -> statement .)
    CONCRETE        reduce using rule 14 (statements -> statement .)
    PLASTIC         reduce using rule 14 (statements -> statement .)
    DOUBLE_QUOTE    reduce using rule 14 (statements -> statement .)
    QUOTE           reduce using rule 14 (statements -> statement .)
    MINUS           reduce using rule 14 (statements -> statement .)
    NEWLINE         reduce using rule 14 (statements -> statement .)
    $end            reduce using rule 14 (statements -> statement .)
    END             reduce using rule 14 (statements -> statement .)


state 4

    (15) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 55


state 5

    (16) statement -> comment . NEWLINE

    NEWLINE         shift and go to state 56


state 6

    (17) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 57


state 7

    (18) statement -> while . NEWLINE

    NEWLINE         shift and go to state 58


state 8

    (19) statement -> if . NEWLINE

    NEWLINE         shift and go to state 59


state 9

    (20) statement -> command . NEWLINE

    NEWLINE         shift and go to state 60


state 10

    (21) statement -> function . NEWLINE

    NEWLINE         shift and go to state 61


state 11

    (22) statement -> call . NEWLINE
    (44) expression -> call .

    NEWLINE         shift and go to state 62
    TO              reduce using rule 44 (expression -> call .)
    PLUS            reduce using rule 44 (expression -> call .)
    MINUS           reduce using rule 44 (expression -> call .)
    LESS            reduce using rule 44 (expression -> call .)
    GREATER         reduce using rule 44 (expression -> call .)
    EQ              reduce using rule 44 (expression -> call .)
    NOTEQ           reduce using rule 44 (expression -> call .)


state 12

    (23) statement -> RETURN . expression NEWLINE
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 63
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 13

    (74) converting_command -> expression . TO type
    (75) converting_command -> expression . TO expression
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    TO              shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 14

    (24) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 74


state 15

    (25) declaration -> type . variables
    (33) variables -> . variable COMMA variables
    (34) variables -> . assignment COMMA variables
    (35) variables -> . variable
    (36) variables -> . assignment
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (37) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 78

    variables                      shift and go to state 75
    variable                       shift and go to state 76
    assignment                     shift and go to state 77

state 16

    (26) comment -> COMMENT . any
    (27) any -> . any VARIABLE
    (28) any -> . VARIABLE

    VARIABLE        shift and go to state 80

    any                            shift and go to state 79

state 17

    (37) assignment -> variable . ASSIGNMENT expression
    (40) expression -> variable .

    ASSIGNMENT      shift and go to state 81
    TO              reduce using rule 40 (expression -> variable .)
    PLUS            reduce using rule 40 (expression -> variable .)
    MINUS           reduce using rule 40 (expression -> variable .)
    LESS            reduce using rule 40 (expression -> variable .)
    GREATER         reduce using rule 40 (expression -> variable .)
    EQ              reduce using rule 40 (expression -> variable .)
    NOTEQ           reduce using rule 40 (expression -> variable .)


state 18

    (66) while -> DO . statements_group UNTIL expression
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (25) declaration -> . type variables
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 83
    RETURN          shift and go to state 92
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    UNTIL           reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statements_group               shift and go to state 82
    expression                     shift and go to state 13
    inner_statement                shift and go to state 84
    declaration                    shift and go to state 85
    assignment                     shift and go to state 86
    while                          shift and go to state 87
    if                             shift and go to state 88
    command                        shift and go to state 89
    function                       shift and go to state 90
    call                           shift and go to state 91
    empty                          shift and go to state 93
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 19

    (67) if -> IF . expression THEN statements_group
    (68) if -> IF . expression THEN statements_group ELSE statements_group
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 94
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 20

    (71) command -> vector_command .

    NEWLINE         reduce using rule 71 (command -> vector_command .)
    UNTIL           reduce using rule 71 (command -> vector_command .)
    ELSE            reduce using rule 71 (command -> vector_command .)


state 21

    (72) command -> robot_command .

    NEWLINE         reduce using rule 72 (command -> robot_command .)
    UNTIL           reduce using rule 72 (command -> robot_command .)
    ELSE            reduce using rule 72 (command -> robot_command .)


state 22

    (73) command -> converting_command .

    NEWLINE         reduce using rule 73 (command -> converting_command .)
    UNTIL           reduce using rule 73 (command -> converting_command .)
    ELSE            reduce using rule 73 (command -> converting_command .)


state 23

    (69) function -> FUNCTION . OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> FUNCTION . OF type VARIABLE BRACKETS statements_group

    OF              shift and go to state 95


state 24

    (89) call -> VARIABLE . LBRACKET parameters RBRACKET
    (90) call -> VARIABLE . BRACKETS
    (38) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (39) variable -> VARIABLE .
    (76) vector_command -> VARIABLE . PUSH BACK expression
    (77) vector_command -> VARIABLE . POP BACK
    (78) vector_command -> VARIABLE . PUSH FRONT expression
    (79) vector_command -> VARIABLE . POP FRONT

    LBRACKET        shift and go to state 96
    BRACKETS        shift and go to state 97
    L_QBRACKET      shift and go to state 98
    ASSIGNMENT      reduce using rule 39 (variable -> VARIABLE .)
    TO              reduce using rule 39 (variable -> VARIABLE .)
    PLUS            reduce using rule 39 (variable -> VARIABLE .)
    MINUS           reduce using rule 39 (variable -> VARIABLE .)
    LESS            reduce using rule 39 (variable -> VARIABLE .)
    GREATER         reduce using rule 39 (variable -> VARIABLE .)
    EQ              reduce using rule 39 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 39 (variable -> VARIABLE .)
    PUSH            shift and go to state 99
    POP             shift and go to state 100


state 25

    (29) type -> INTEGER .

    VARIABLE        reduce using rule 29 (type -> INTEGER .)
    NEWLINE         reduce using rule 29 (type -> INTEGER .)
    UNTIL           reduce using rule 29 (type -> INTEGER .)
    ELSE            reduce using rule 29 (type -> INTEGER .)


state 26

    (30) type -> STRING .

    VARIABLE        reduce using rule 30 (type -> STRING .)
    NEWLINE         reduce using rule 30 (type -> STRING .)
    UNTIL           reduce using rule 30 (type -> STRING .)
    ELSE            reduce using rule 30 (type -> STRING .)


state 27

    (31) type -> BOOL .

    VARIABLE        reduce using rule 31 (type -> BOOL .)
    NEWLINE         reduce using rule 31 (type -> BOOL .)
    UNTIL           reduce using rule 31 (type -> BOOL .)
    ELSE            reduce using rule 31 (type -> BOOL .)


state 28

    (32) type -> VECTOR . OF type

    OF              shift and go to state 101


state 29

    (83) robot_command -> BACK .

    NEWLINE         reduce using rule 83 (robot_command -> BACK .)
    UNTIL           reduce using rule 83 (robot_command -> BACK .)
    ELSE            reduce using rule 83 (robot_command -> BACK .)


state 30

    (80) robot_command -> LEFT .

    NEWLINE         reduce using rule 80 (robot_command -> LEFT .)
    UNTIL           reduce using rule 80 (robot_command -> LEFT .)
    ELSE            reduce using rule 80 (robot_command -> LEFT .)


state 31

    (81) robot_command -> RIGHT .

    NEWLINE         reduce using rule 81 (robot_command -> RIGHT .)
    UNTIL           reduce using rule 81 (robot_command -> RIGHT .)
    ELSE            reduce using rule 81 (robot_command -> RIGHT .)


state 32

    (82) robot_command -> FORWARD .

    NEWLINE         reduce using rule 82 (robot_command -> FORWARD .)
    UNTIL           reduce using rule 82 (robot_command -> FORWARD .)
    ELSE            reduce using rule 82 (robot_command -> FORWARD .)


state 33

    (84) robot_command -> ROTATE_RIGHT .

    NEWLINE         reduce using rule 84 (robot_command -> ROTATE_RIGHT .)
    UNTIL           reduce using rule 84 (robot_command -> ROTATE_RIGHT .)
    ELSE            reduce using rule 84 (robot_command -> ROTATE_RIGHT .)


state 34

    (85) robot_command -> ROTATE_LEFT .

    NEWLINE         reduce using rule 85 (robot_command -> ROTATE_LEFT .)
    UNTIL           reduce using rule 85 (robot_command -> ROTATE_LEFT .)
    ELSE            reduce using rule 85 (robot_command -> ROTATE_LEFT .)


state 35

    (86) robot_command -> LMS .

    NEWLINE         reduce using rule 86 (robot_command -> LMS .)
    UNTIL           reduce using rule 86 (robot_command -> LMS .)
    ELSE            reduce using rule 86 (robot_command -> LMS .)


state 36

    (87) robot_command -> REFLECT .

    NEWLINE         reduce using rule 87 (robot_command -> REFLECT .)
    UNTIL           reduce using rule 87 (robot_command -> REFLECT .)
    ELSE            reduce using rule 87 (robot_command -> REFLECT .)


state 37

    (88) robot_command -> DRILL .

    NEWLINE         reduce using rule 88 (robot_command -> DRILL .)
    UNTIL           reduce using rule 88 (robot_command -> DRILL .)
    ELSE            reduce using rule 88 (robot_command -> DRILL .)


state 38

    (41) expression -> const .

    TO              reduce using rule 41 (expression -> const .)
    PLUS            reduce using rule 41 (expression -> const .)
    MINUS           reduce using rule 41 (expression -> const .)
    LESS            reduce using rule 41 (expression -> const .)
    GREATER         reduce using rule 41 (expression -> const .)
    EQ              reduce using rule 41 (expression -> const .)
    NOTEQ           reduce using rule 41 (expression -> const .)
    NEWLINE         reduce using rule 41 (expression -> const .)
    THEN            reduce using rule 41 (expression -> const .)
    UNTIL           reduce using rule 41 (expression -> const .)
    ELSE            reduce using rule 41 (expression -> const .)
    COMMA           reduce using rule 41 (expression -> const .)
    RBRACKET        reduce using rule 41 (expression -> const .)
    CONTINUE        reduce using rule 41 (expression -> const .)
    R_QBRACKET      reduce using rule 41 (expression -> const .)


state 39

    (42) expression -> qstring .

    TO              reduce using rule 42 (expression -> qstring .)
    PLUS            reduce using rule 42 (expression -> qstring .)
    MINUS           reduce using rule 42 (expression -> qstring .)
    LESS            reduce using rule 42 (expression -> qstring .)
    GREATER         reduce using rule 42 (expression -> qstring .)
    EQ              reduce using rule 42 (expression -> qstring .)
    NOTEQ           reduce using rule 42 (expression -> qstring .)
    NEWLINE         reduce using rule 42 (expression -> qstring .)
    THEN            reduce using rule 42 (expression -> qstring .)
    UNTIL           reduce using rule 42 (expression -> qstring .)
    ELSE            reduce using rule 42 (expression -> qstring .)
    COMMA           reduce using rule 42 (expression -> qstring .)
    RBRACKET        reduce using rule 42 (expression -> qstring .)
    CONTINUE        reduce using rule 42 (expression -> qstring .)
    R_QBRACKET      reduce using rule 42 (expression -> qstring .)


state 40

    (43) expression -> math_expression .

    TO              reduce using rule 43 (expression -> math_expression .)
    PLUS            reduce using rule 43 (expression -> math_expression .)
    MINUS           reduce using rule 43 (expression -> math_expression .)
    LESS            reduce using rule 43 (expression -> math_expression .)
    GREATER         reduce using rule 43 (expression -> math_expression .)
    EQ              reduce using rule 43 (expression -> math_expression .)
    NOTEQ           reduce using rule 43 (expression -> math_expression .)
    NEWLINE         reduce using rule 43 (expression -> math_expression .)
    THEN            reduce using rule 43 (expression -> math_expression .)
    UNTIL           reduce using rule 43 (expression -> math_expression .)
    ELSE            reduce using rule 43 (expression -> math_expression .)
    COMMA           reduce using rule 43 (expression -> math_expression .)
    RBRACKET        reduce using rule 43 (expression -> math_expression .)
    CONTINUE        reduce using rule 43 (expression -> math_expression .)
    R_QBRACKET      reduce using rule 43 (expression -> math_expression .)


state 41

    (49) const -> TRUE .

    TO              reduce using rule 49 (const -> TRUE .)
    PLUS            reduce using rule 49 (const -> TRUE .)
    MINUS           reduce using rule 49 (const -> TRUE .)
    LESS            reduce using rule 49 (const -> TRUE .)
    GREATER         reduce using rule 49 (const -> TRUE .)
    EQ              reduce using rule 49 (const -> TRUE .)
    NOTEQ           reduce using rule 49 (const -> TRUE .)
    NEWLINE         reduce using rule 49 (const -> TRUE .)
    THEN            reduce using rule 49 (const -> TRUE .)
    UNTIL           reduce using rule 49 (const -> TRUE .)
    ELSE            reduce using rule 49 (const -> TRUE .)
    COMMA           reduce using rule 49 (const -> TRUE .)
    RBRACKET        reduce using rule 49 (const -> TRUE .)
    CONTINUE        reduce using rule 49 (const -> TRUE .)
    R_QBRACKET      reduce using rule 49 (const -> TRUE .)


state 42

    (50) const -> FALSE .

    TO              reduce using rule 50 (const -> FALSE .)
    PLUS            reduce using rule 50 (const -> FALSE .)
    MINUS           reduce using rule 50 (const -> FALSE .)
    LESS            reduce using rule 50 (const -> FALSE .)
    GREATER         reduce using rule 50 (const -> FALSE .)
    EQ              reduce using rule 50 (const -> FALSE .)
    NOTEQ           reduce using rule 50 (const -> FALSE .)
    NEWLINE         reduce using rule 50 (const -> FALSE .)
    THEN            reduce using rule 50 (const -> FALSE .)
    UNTIL           reduce using rule 50 (const -> FALSE .)
    ELSE            reduce using rule 50 (const -> FALSE .)
    COMMA           reduce using rule 50 (const -> FALSE .)
    RBRACKET        reduce using rule 50 (const -> FALSE .)
    CONTINUE        reduce using rule 50 (const -> FALSE .)
    R_QBRACKET      reduce using rule 50 (const -> FALSE .)


state 43

    (51) const -> UNDEFINED .

    TO              reduce using rule 51 (const -> UNDEFINED .)
    PLUS            reduce using rule 51 (const -> UNDEFINED .)
    MINUS           reduce using rule 51 (const -> UNDEFINED .)
    LESS            reduce using rule 51 (const -> UNDEFINED .)
    GREATER         reduce using rule 51 (const -> UNDEFINED .)
    EQ              reduce using rule 51 (const -> UNDEFINED .)
    NOTEQ           reduce using rule 51 (const -> UNDEFINED .)
    NEWLINE         reduce using rule 51 (const -> UNDEFINED .)
    THEN            reduce using rule 51 (const -> UNDEFINED .)
    UNTIL           reduce using rule 51 (const -> UNDEFINED .)
    ELSE            reduce using rule 51 (const -> UNDEFINED .)
    COMMA           reduce using rule 51 (const -> UNDEFINED .)
    RBRACKET        reduce using rule 51 (const -> UNDEFINED .)
    CONTINUE        reduce using rule 51 (const -> UNDEFINED .)
    R_QBRACKET      reduce using rule 51 (const -> UNDEFINED .)


state 44

    (52) const -> DECIMAL .

    TO              reduce using rule 52 (const -> DECIMAL .)
    PLUS            reduce using rule 52 (const -> DECIMAL .)
    MINUS           reduce using rule 52 (const -> DECIMAL .)
    LESS            reduce using rule 52 (const -> DECIMAL .)
    GREATER         reduce using rule 52 (const -> DECIMAL .)
    EQ              reduce using rule 52 (const -> DECIMAL .)
    NOTEQ           reduce using rule 52 (const -> DECIMAL .)
    NEWLINE         reduce using rule 52 (const -> DECIMAL .)
    THEN            reduce using rule 52 (const -> DECIMAL .)
    UNTIL           reduce using rule 52 (const -> DECIMAL .)
    ELSE            reduce using rule 52 (const -> DECIMAL .)
    COMMA           reduce using rule 52 (const -> DECIMAL .)
    RBRACKET        reduce using rule 52 (const -> DECIMAL .)
    CONTINUE        reduce using rule 52 (const -> DECIMAL .)
    R_QBRACKET      reduce using rule 52 (const -> DECIMAL .)


state 45

    (53) const -> EXIT .

    TO              reduce using rule 53 (const -> EXIT .)
    PLUS            reduce using rule 53 (const -> EXIT .)
    MINUS           reduce using rule 53 (const -> EXIT .)
    LESS            reduce using rule 53 (const -> EXIT .)
    GREATER         reduce using rule 53 (const -> EXIT .)
    EQ              reduce using rule 53 (const -> EXIT .)
    NOTEQ           reduce using rule 53 (const -> EXIT .)
    NEWLINE         reduce using rule 53 (const -> EXIT .)
    THEN            reduce using rule 53 (const -> EXIT .)
    UNTIL           reduce using rule 53 (const -> EXIT .)
    ELSE            reduce using rule 53 (const -> EXIT .)
    COMMA           reduce using rule 53 (const -> EXIT .)
    RBRACKET        reduce using rule 53 (const -> EXIT .)
    CONTINUE        reduce using rule 53 (const -> EXIT .)
    R_QBRACKET      reduce using rule 53 (const -> EXIT .)


state 46

    (54) const -> WOOD .

    TO              reduce using rule 54 (const -> WOOD .)
    PLUS            reduce using rule 54 (const -> WOOD .)
    MINUS           reduce using rule 54 (const -> WOOD .)
    LESS            reduce using rule 54 (const -> WOOD .)
    GREATER         reduce using rule 54 (const -> WOOD .)
    EQ              reduce using rule 54 (const -> WOOD .)
    NOTEQ           reduce using rule 54 (const -> WOOD .)
    NEWLINE         reduce using rule 54 (const -> WOOD .)
    THEN            reduce using rule 54 (const -> WOOD .)
    UNTIL           reduce using rule 54 (const -> WOOD .)
    ELSE            reduce using rule 54 (const -> WOOD .)
    COMMA           reduce using rule 54 (const -> WOOD .)
    RBRACKET        reduce using rule 54 (const -> WOOD .)
    CONTINUE        reduce using rule 54 (const -> WOOD .)
    R_QBRACKET      reduce using rule 54 (const -> WOOD .)


state 47

    (55) const -> STEEL .

    TO              reduce using rule 55 (const -> STEEL .)
    PLUS            reduce using rule 55 (const -> STEEL .)
    MINUS           reduce using rule 55 (const -> STEEL .)
    LESS            reduce using rule 55 (const -> STEEL .)
    GREATER         reduce using rule 55 (const -> STEEL .)
    EQ              reduce using rule 55 (const -> STEEL .)
    NOTEQ           reduce using rule 55 (const -> STEEL .)
    NEWLINE         reduce using rule 55 (const -> STEEL .)
    THEN            reduce using rule 55 (const -> STEEL .)
    UNTIL           reduce using rule 55 (const -> STEEL .)
    ELSE            reduce using rule 55 (const -> STEEL .)
    COMMA           reduce using rule 55 (const -> STEEL .)
    RBRACKET        reduce using rule 55 (const -> STEEL .)
    CONTINUE        reduce using rule 55 (const -> STEEL .)
    R_QBRACKET      reduce using rule 55 (const -> STEEL .)


state 48

    (56) const -> GLASS .

    TO              reduce using rule 56 (const -> GLASS .)
    PLUS            reduce using rule 56 (const -> GLASS .)
    MINUS           reduce using rule 56 (const -> GLASS .)
    LESS            reduce using rule 56 (const -> GLASS .)
    GREATER         reduce using rule 56 (const -> GLASS .)
    EQ              reduce using rule 56 (const -> GLASS .)
    NOTEQ           reduce using rule 56 (const -> GLASS .)
    NEWLINE         reduce using rule 56 (const -> GLASS .)
    THEN            reduce using rule 56 (const -> GLASS .)
    UNTIL           reduce using rule 56 (const -> GLASS .)
    ELSE            reduce using rule 56 (const -> GLASS .)
    COMMA           reduce using rule 56 (const -> GLASS .)
    RBRACKET        reduce using rule 56 (const -> GLASS .)
    CONTINUE        reduce using rule 56 (const -> GLASS .)
    R_QBRACKET      reduce using rule 56 (const -> GLASS .)


state 49

    (57) const -> CONCRETE .

    TO              reduce using rule 57 (const -> CONCRETE .)
    PLUS            reduce using rule 57 (const -> CONCRETE .)
    MINUS           reduce using rule 57 (const -> CONCRETE .)
    LESS            reduce using rule 57 (const -> CONCRETE .)
    GREATER         reduce using rule 57 (const -> CONCRETE .)
    EQ              reduce using rule 57 (const -> CONCRETE .)
    NOTEQ           reduce using rule 57 (const -> CONCRETE .)
    NEWLINE         reduce using rule 57 (const -> CONCRETE .)
    THEN            reduce using rule 57 (const -> CONCRETE .)
    UNTIL           reduce using rule 57 (const -> CONCRETE .)
    ELSE            reduce using rule 57 (const -> CONCRETE .)
    COMMA           reduce using rule 57 (const -> CONCRETE .)
    RBRACKET        reduce using rule 57 (const -> CONCRETE .)
    CONTINUE        reduce using rule 57 (const -> CONCRETE .)
    R_QBRACKET      reduce using rule 57 (const -> CONCRETE .)


state 50

    (58) const -> PLASTIC .

    TO              reduce using rule 58 (const -> PLASTIC .)
    PLUS            reduce using rule 58 (const -> PLASTIC .)
    MINUS           reduce using rule 58 (const -> PLASTIC .)
    LESS            reduce using rule 58 (const -> PLASTIC .)
    GREATER         reduce using rule 58 (const -> PLASTIC .)
    EQ              reduce using rule 58 (const -> PLASTIC .)
    NOTEQ           reduce using rule 58 (const -> PLASTIC .)
    NEWLINE         reduce using rule 58 (const -> PLASTIC .)
    THEN            reduce using rule 58 (const -> PLASTIC .)
    UNTIL           reduce using rule 58 (const -> PLASTIC .)
    ELSE            reduce using rule 58 (const -> PLASTIC .)
    COMMA           reduce using rule 58 (const -> PLASTIC .)
    RBRACKET        reduce using rule 58 (const -> PLASTIC .)
    CONTINUE        reduce using rule 58 (const -> PLASTIC .)
    R_QBRACKET      reduce using rule 58 (const -> PLASTIC .)


state 51

    (45) qstring -> DOUBLE_QUOTE . string DOUBLE_QUOTE
    (47) string -> . string VARIABLE
    (48) string -> . VARIABLE

    VARIABLE        shift and go to state 103

    string                         shift and go to state 102

state 52

    (46) qstring -> QUOTE . string QUOTE
    (47) string -> . string VARIABLE
    (48) string -> . VARIABLE

    VARIABLE        shift and go to state 103

    string                         shift and go to state 104

state 53

    (61) math_expression -> MINUS . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 105
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 54

    (13) statements -> statements statement .

    RETURN          reduce using rule 13 (statements -> statements statement .)
    COMMENT         reduce using rule 13 (statements -> statements statement .)
    DO              reduce using rule 13 (statements -> statements statement .)
    IF              reduce using rule 13 (statements -> statements statement .)
    FUNCTION        reduce using rule 13 (statements -> statements statement .)
    VARIABLE        reduce using rule 13 (statements -> statements statement .)
    INTEGER         reduce using rule 13 (statements -> statements statement .)
    STRING          reduce using rule 13 (statements -> statements statement .)
    BOOL            reduce using rule 13 (statements -> statements statement .)
    VECTOR          reduce using rule 13 (statements -> statements statement .)
    LEFT            reduce using rule 13 (statements -> statements statement .)
    RIGHT           reduce using rule 13 (statements -> statements statement .)
    FORWARD         reduce using rule 13 (statements -> statements statement .)
    BACK            reduce using rule 13 (statements -> statements statement .)
    ROTATE_RIGHT    reduce using rule 13 (statements -> statements statement .)
    ROTATE_LEFT     reduce using rule 13 (statements -> statements statement .)
    LMS             reduce using rule 13 (statements -> statements statement .)
    REFLECT         reduce using rule 13 (statements -> statements statement .)
    DRILL           reduce using rule 13 (statements -> statements statement .)
    TRUE            reduce using rule 13 (statements -> statements statement .)
    FALSE           reduce using rule 13 (statements -> statements statement .)
    UNDEFINED       reduce using rule 13 (statements -> statements statement .)
    DECIMAL         reduce using rule 13 (statements -> statements statement .)
    EXIT            reduce using rule 13 (statements -> statements statement .)
    WOOD            reduce using rule 13 (statements -> statements statement .)
    STEEL           reduce using rule 13 (statements -> statements statement .)
    GLASS           reduce using rule 13 (statements -> statements statement .)
    CONCRETE        reduce using rule 13 (statements -> statements statement .)
    PLASTIC         reduce using rule 13 (statements -> statements statement .)
    DOUBLE_QUOTE    reduce using rule 13 (statements -> statements statement .)
    QUOTE           reduce using rule 13 (statements -> statements statement .)
    MINUS           reduce using rule 13 (statements -> statements statement .)
    NEWLINE         reduce using rule 13 (statements -> statements statement .)
    $end            reduce using rule 13 (statements -> statements statement .)
    END             reduce using rule 13 (statements -> statements statement .)


state 55

    (15) statement -> declaration NEWLINE .

    RETURN          reduce using rule 15 (statement -> declaration NEWLINE .)
    COMMENT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DO              reduce using rule 15 (statement -> declaration NEWLINE .)
    IF              reduce using rule 15 (statement -> declaration NEWLINE .)
    FUNCTION        reduce using rule 15 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 15 (statement -> declaration NEWLINE .)
    INTEGER         reduce using rule 15 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 15 (statement -> declaration NEWLINE .)
    BOOL            reduce using rule 15 (statement -> declaration NEWLINE .)
    VECTOR          reduce using rule 15 (statement -> declaration NEWLINE .)
    LEFT            reduce using rule 15 (statement -> declaration NEWLINE .)
    RIGHT           reduce using rule 15 (statement -> declaration NEWLINE .)
    FORWARD         reduce using rule 15 (statement -> declaration NEWLINE .)
    BACK            reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_RIGHT    reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_LEFT     reduce using rule 15 (statement -> declaration NEWLINE .)
    LMS             reduce using rule 15 (statement -> declaration NEWLINE .)
    REFLECT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DRILL           reduce using rule 15 (statement -> declaration NEWLINE .)
    TRUE            reduce using rule 15 (statement -> declaration NEWLINE .)
    FALSE           reduce using rule 15 (statement -> declaration NEWLINE .)
    UNDEFINED       reduce using rule 15 (statement -> declaration NEWLINE .)
    DECIMAL         reduce using rule 15 (statement -> declaration NEWLINE .)
    EXIT            reduce using rule 15 (statement -> declaration NEWLINE .)
    WOOD            reduce using rule 15 (statement -> declaration NEWLINE .)
    STEEL           reduce using rule 15 (statement -> declaration NEWLINE .)
    GLASS           reduce using rule 15 (statement -> declaration NEWLINE .)
    CONCRETE        reduce using rule 15 (statement -> declaration NEWLINE .)
    PLASTIC         reduce using rule 15 (statement -> declaration NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 15 (statement -> declaration NEWLINE .)
    QUOTE           reduce using rule 15 (statement -> declaration NEWLINE .)
    MINUS           reduce using rule 15 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 15 (statement -> declaration NEWLINE .)
    $end            reduce using rule 15 (statement -> declaration NEWLINE .)
    END             reduce using rule 15 (statement -> declaration NEWLINE .)


state 56

    (16) statement -> comment NEWLINE .

    RETURN          reduce using rule 16 (statement -> comment NEWLINE .)
    COMMENT         reduce using rule 16 (statement -> comment NEWLINE .)
    DO              reduce using rule 16 (statement -> comment NEWLINE .)
    IF              reduce using rule 16 (statement -> comment NEWLINE .)
    FUNCTION        reduce using rule 16 (statement -> comment NEWLINE .)
    VARIABLE        reduce using rule 16 (statement -> comment NEWLINE .)
    INTEGER         reduce using rule 16 (statement -> comment NEWLINE .)
    STRING          reduce using rule 16 (statement -> comment NEWLINE .)
    BOOL            reduce using rule 16 (statement -> comment NEWLINE .)
    VECTOR          reduce using rule 16 (statement -> comment NEWLINE .)
    LEFT            reduce using rule 16 (statement -> comment NEWLINE .)
    RIGHT           reduce using rule 16 (statement -> comment NEWLINE .)
    FORWARD         reduce using rule 16 (statement -> comment NEWLINE .)
    BACK            reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_LEFT     reduce using rule 16 (statement -> comment NEWLINE .)
    LMS             reduce using rule 16 (statement -> comment NEWLINE .)
    REFLECT         reduce using rule 16 (statement -> comment NEWLINE .)
    DRILL           reduce using rule 16 (statement -> comment NEWLINE .)
    TRUE            reduce using rule 16 (statement -> comment NEWLINE .)
    FALSE           reduce using rule 16 (statement -> comment NEWLINE .)
    UNDEFINED       reduce using rule 16 (statement -> comment NEWLINE .)
    DECIMAL         reduce using rule 16 (statement -> comment NEWLINE .)
    EXIT            reduce using rule 16 (statement -> comment NEWLINE .)
    WOOD            reduce using rule 16 (statement -> comment NEWLINE .)
    STEEL           reduce using rule 16 (statement -> comment NEWLINE .)
    GLASS           reduce using rule 16 (statement -> comment NEWLINE .)
    CONCRETE        reduce using rule 16 (statement -> comment NEWLINE .)
    PLASTIC         reduce using rule 16 (statement -> comment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 16 (statement -> comment NEWLINE .)
    QUOTE           reduce using rule 16 (statement -> comment NEWLINE .)
    MINUS           reduce using rule 16 (statement -> comment NEWLINE .)
    NEWLINE         reduce using rule 16 (statement -> comment NEWLINE .)
    $end            reduce using rule 16 (statement -> comment NEWLINE .)
    END             reduce using rule 16 (statement -> comment NEWLINE .)


state 57

    (17) statement -> assignment NEWLINE .

    RETURN          reduce using rule 17 (statement -> assignment NEWLINE .)
    COMMENT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DO              reduce using rule 17 (statement -> assignment NEWLINE .)
    IF              reduce using rule 17 (statement -> assignment NEWLINE .)
    FUNCTION        reduce using rule 17 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 17 (statement -> assignment NEWLINE .)
    INTEGER         reduce using rule 17 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 17 (statement -> assignment NEWLINE .)
    BOOL            reduce using rule 17 (statement -> assignment NEWLINE .)
    VECTOR          reduce using rule 17 (statement -> assignment NEWLINE .)
    LEFT            reduce using rule 17 (statement -> assignment NEWLINE .)
    RIGHT           reduce using rule 17 (statement -> assignment NEWLINE .)
    FORWARD         reduce using rule 17 (statement -> assignment NEWLINE .)
    BACK            reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_LEFT     reduce using rule 17 (statement -> assignment NEWLINE .)
    LMS             reduce using rule 17 (statement -> assignment NEWLINE .)
    REFLECT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DRILL           reduce using rule 17 (statement -> assignment NEWLINE .)
    TRUE            reduce using rule 17 (statement -> assignment NEWLINE .)
    FALSE           reduce using rule 17 (statement -> assignment NEWLINE .)
    UNDEFINED       reduce using rule 17 (statement -> assignment NEWLINE .)
    DECIMAL         reduce using rule 17 (statement -> assignment NEWLINE .)
    EXIT            reduce using rule 17 (statement -> assignment NEWLINE .)
    WOOD            reduce using rule 17 (statement -> assignment NEWLINE .)
    STEEL           reduce using rule 17 (statement -> assignment NEWLINE .)
    GLASS           reduce using rule 17 (statement -> assignment NEWLINE .)
    CONCRETE        reduce using rule 17 (statement -> assignment NEWLINE .)
    PLASTIC         reduce using rule 17 (statement -> assignment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 17 (statement -> assignment NEWLINE .)
    QUOTE           reduce using rule 17 (statement -> assignment NEWLINE .)
    MINUS           reduce using rule 17 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 17 (statement -> assignment NEWLINE .)
    $end            reduce using rule 17 (statement -> assignment NEWLINE .)
    END             reduce using rule 17 (statement -> assignment NEWLINE .)


state 58

    (18) statement -> while NEWLINE .

    RETURN          reduce using rule 18 (statement -> while NEWLINE .)
    COMMENT         reduce using rule 18 (statement -> while NEWLINE .)
    DO              reduce using rule 18 (statement -> while NEWLINE .)
    IF              reduce using rule 18 (statement -> while NEWLINE .)
    FUNCTION        reduce using rule 18 (statement -> while NEWLINE .)
    VARIABLE        reduce using rule 18 (statement -> while NEWLINE .)
    INTEGER         reduce using rule 18 (statement -> while NEWLINE .)
    STRING          reduce using rule 18 (statement -> while NEWLINE .)
    BOOL            reduce using rule 18 (statement -> while NEWLINE .)
    VECTOR          reduce using rule 18 (statement -> while NEWLINE .)
    LEFT            reduce using rule 18 (statement -> while NEWLINE .)
    RIGHT           reduce using rule 18 (statement -> while NEWLINE .)
    FORWARD         reduce using rule 18 (statement -> while NEWLINE .)
    BACK            reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_RIGHT    reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_LEFT     reduce using rule 18 (statement -> while NEWLINE .)
    LMS             reduce using rule 18 (statement -> while NEWLINE .)
    REFLECT         reduce using rule 18 (statement -> while NEWLINE .)
    DRILL           reduce using rule 18 (statement -> while NEWLINE .)
    TRUE            reduce using rule 18 (statement -> while NEWLINE .)
    FALSE           reduce using rule 18 (statement -> while NEWLINE .)
    UNDEFINED       reduce using rule 18 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 18 (statement -> while NEWLINE .)
    EXIT            reduce using rule 18 (statement -> while NEWLINE .)
    WOOD            reduce using rule 18 (statement -> while NEWLINE .)
    STEEL           reduce using rule 18 (statement -> while NEWLINE .)
    GLASS           reduce using rule 18 (statement -> while NEWLINE .)
    CONCRETE        reduce using rule 18 (statement -> while NEWLINE .)
    PLASTIC         reduce using rule 18 (statement -> while NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 18 (statement -> while NEWLINE .)
    QUOTE           reduce using rule 18 (statement -> while NEWLINE .)
    MINUS           reduce using rule 18 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 18 (statement -> while NEWLINE .)
    $end            reduce using rule 18 (statement -> while NEWLINE .)
    END             reduce using rule 18 (statement -> while NEWLINE .)


state 59

    (19) statement -> if NEWLINE .

    RETURN          reduce using rule 19 (statement -> if NEWLINE .)
    COMMENT         reduce using rule 19 (statement -> if NEWLINE .)
    DO              reduce using rule 19 (statement -> if NEWLINE .)
    IF              reduce using rule 19 (statement -> if NEWLINE .)
    FUNCTION        reduce using rule 19 (statement -> if NEWLINE .)
    VARIABLE        reduce using rule 19 (statement -> if NEWLINE .)
    INTEGER         reduce using rule 19 (statement -> if NEWLINE .)
    STRING          reduce using rule 19 (statement -> if NEWLINE .)
    BOOL            reduce using rule 19 (statement -> if NEWLINE .)
    VECTOR          reduce using rule 19 (statement -> if NEWLINE .)
    LEFT            reduce using rule 19 (statement -> if NEWLINE .)
    RIGHT           reduce using rule 19 (statement -> if NEWLINE .)
    FORWARD         reduce using rule 19 (statement -> if NEWLINE .)
    BACK            reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_RIGHT    reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_LEFT     reduce using rule 19 (statement -> if NEWLINE .)
    LMS             reduce using rule 19 (statement -> if NEWLINE .)
    REFLECT         reduce using rule 19 (statement -> if NEWLINE .)
    DRILL           reduce using rule 19 (statement -> if NEWLINE .)
    TRUE            reduce using rule 19 (statement -> if NEWLINE .)
    FALSE           reduce using rule 19 (statement -> if NEWLINE .)
    UNDEFINED       reduce using rule 19 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 19 (statement -> if NEWLINE .)
    EXIT            reduce using rule 19 (statement -> if NEWLINE .)
    WOOD            reduce using rule 19 (statement -> if NEWLINE .)
    STEEL           reduce using rule 19 (statement -> if NEWLINE .)
    GLASS           reduce using rule 19 (statement -> if NEWLINE .)
    CONCRETE        reduce using rule 19 (statement -> if NEWLINE .)
    PLASTIC         reduce using rule 19 (statement -> if NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 19 (statement -> if NEWLINE .)
    QUOTE           reduce using rule 19 (statement -> if NEWLINE .)
    MINUS           reduce using rule 19 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 19 (statement -> if NEWLINE .)
    $end            reduce using rule 19 (statement -> if NEWLINE .)
    END             reduce using rule 19 (statement -> if NEWLINE .)


state 60

    (20) statement -> command NEWLINE .

    RETURN          reduce using rule 20 (statement -> command NEWLINE .)
    COMMENT         reduce using rule 20 (statement -> command NEWLINE .)
    DO              reduce using rule 20 (statement -> command NEWLINE .)
    IF              reduce using rule 20 (statement -> command NEWLINE .)
    FUNCTION        reduce using rule 20 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 20 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 20 (statement -> command NEWLINE .)
    STRING          reduce using rule 20 (statement -> command NEWLINE .)
    BOOL            reduce using rule 20 (statement -> command NEWLINE .)
    VECTOR          reduce using rule 20 (statement -> command NEWLINE .)
    LEFT            reduce using rule 20 (statement -> command NEWLINE .)
    RIGHT           reduce using rule 20 (statement -> command NEWLINE .)
    FORWARD         reduce using rule 20 (statement -> command NEWLINE .)
    BACK            reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_RIGHT    reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_LEFT     reduce using rule 20 (statement -> command NEWLINE .)
    LMS             reduce using rule 20 (statement -> command NEWLINE .)
    REFLECT         reduce using rule 20 (statement -> command NEWLINE .)
    DRILL           reduce using rule 20 (statement -> command NEWLINE .)
    TRUE            reduce using rule 20 (statement -> command NEWLINE .)
    FALSE           reduce using rule 20 (statement -> command NEWLINE .)
    UNDEFINED       reduce using rule 20 (statement -> command NEWLINE .)
    DECIMAL         reduce using rule 20 (statement -> command NEWLINE .)
    EXIT            reduce using rule 20 (statement -> command NEWLINE .)
    WOOD            reduce using rule 20 (statement -> command NEWLINE .)
    STEEL           reduce using rule 20 (statement -> command NEWLINE .)
    GLASS           reduce using rule 20 (statement -> command NEWLINE .)
    CONCRETE        reduce using rule 20 (statement -> command NEWLINE .)
    PLASTIC         reduce using rule 20 (statement -> command NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 20 (statement -> command NEWLINE .)
    QUOTE           reduce using rule 20 (statement -> command NEWLINE .)
    MINUS           reduce using rule 20 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 20 (statement -> command NEWLINE .)
    $end            reduce using rule 20 (statement -> command NEWLINE .)
    END             reduce using rule 20 (statement -> command NEWLINE .)


state 61

    (21) statement -> function NEWLINE .

    RETURN          reduce using rule 21 (statement -> function NEWLINE .)
    COMMENT         reduce using rule 21 (statement -> function NEWLINE .)
    DO              reduce using rule 21 (statement -> function NEWLINE .)
    IF              reduce using rule 21 (statement -> function NEWLINE .)
    FUNCTION        reduce using rule 21 (statement -> function NEWLINE .)
    VARIABLE        reduce using rule 21 (statement -> function NEWLINE .)
    INTEGER         reduce using rule 21 (statement -> function NEWLINE .)
    STRING          reduce using rule 21 (statement -> function NEWLINE .)
    BOOL            reduce using rule 21 (statement -> function NEWLINE .)
    VECTOR          reduce using rule 21 (statement -> function NEWLINE .)
    LEFT            reduce using rule 21 (statement -> function NEWLINE .)
    RIGHT           reduce using rule 21 (statement -> function NEWLINE .)
    FORWARD         reduce using rule 21 (statement -> function NEWLINE .)
    BACK            reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_RIGHT    reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_LEFT     reduce using rule 21 (statement -> function NEWLINE .)
    LMS             reduce using rule 21 (statement -> function NEWLINE .)
    REFLECT         reduce using rule 21 (statement -> function NEWLINE .)
    DRILL           reduce using rule 21 (statement -> function NEWLINE .)
    TRUE            reduce using rule 21 (statement -> function NEWLINE .)
    FALSE           reduce using rule 21 (statement -> function NEWLINE .)
    UNDEFINED       reduce using rule 21 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 21 (statement -> function NEWLINE .)
    EXIT            reduce using rule 21 (statement -> function NEWLINE .)
    WOOD            reduce using rule 21 (statement -> function NEWLINE .)
    STEEL           reduce using rule 21 (statement -> function NEWLINE .)
    GLASS           reduce using rule 21 (statement -> function NEWLINE .)
    CONCRETE        reduce using rule 21 (statement -> function NEWLINE .)
    PLASTIC         reduce using rule 21 (statement -> function NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 21 (statement -> function NEWLINE .)
    QUOTE           reduce using rule 21 (statement -> function NEWLINE .)
    MINUS           reduce using rule 21 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 21 (statement -> function NEWLINE .)
    $end            reduce using rule 21 (statement -> function NEWLINE .)
    END             reduce using rule 21 (statement -> function NEWLINE .)


state 62

    (22) statement -> call NEWLINE .

    RETURN          reduce using rule 22 (statement -> call NEWLINE .)
    COMMENT         reduce using rule 22 (statement -> call NEWLINE .)
    DO              reduce using rule 22 (statement -> call NEWLINE .)
    IF              reduce using rule 22 (statement -> call NEWLINE .)
    FUNCTION        reduce using rule 22 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 22 (statement -> call NEWLINE .)
    INTEGER         reduce using rule 22 (statement -> call NEWLINE .)
    STRING          reduce using rule 22 (statement -> call NEWLINE .)
    BOOL            reduce using rule 22 (statement -> call NEWLINE .)
    VECTOR          reduce using rule 22 (statement -> call NEWLINE .)
    LEFT            reduce using rule 22 (statement -> call NEWLINE .)
    RIGHT           reduce using rule 22 (statement -> call NEWLINE .)
    FORWARD         reduce using rule 22 (statement -> call NEWLINE .)
    BACK            reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_RIGHT    reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_LEFT     reduce using rule 22 (statement -> call NEWLINE .)
    LMS             reduce using rule 22 (statement -> call NEWLINE .)
    REFLECT         reduce using rule 22 (statement -> call NEWLINE .)
    DRILL           reduce using rule 22 (statement -> call NEWLINE .)
    TRUE            reduce using rule 22 (statement -> call NEWLINE .)
    FALSE           reduce using rule 22 (statement -> call NEWLINE .)
    UNDEFINED       reduce using rule 22 (statement -> call NEWLINE .)
    DECIMAL         reduce using rule 22 (statement -> call NEWLINE .)
    EXIT            reduce using rule 22 (statement -> call NEWLINE .)
    WOOD            reduce using rule 22 (statement -> call NEWLINE .)
    STEEL           reduce using rule 22 (statement -> call NEWLINE .)
    GLASS           reduce using rule 22 (statement -> call NEWLINE .)
    CONCRETE        reduce using rule 22 (statement -> call NEWLINE .)
    PLASTIC         reduce using rule 22 (statement -> call NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 22 (statement -> call NEWLINE .)
    QUOTE           reduce using rule 22 (statement -> call NEWLINE .)
    MINUS           reduce using rule 22 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 22 (statement -> call NEWLINE .)
    $end            reduce using rule 22 (statement -> call NEWLINE .)
    END             reduce using rule 22 (statement -> call NEWLINE .)


state 63

    (23) statement -> RETURN expression . NEWLINE
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    NEWLINE         shift and go to state 106
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 64

    (40) expression -> variable .

    NEWLINE         reduce using rule 40 (expression -> variable .)
    PLUS            reduce using rule 40 (expression -> variable .)
    MINUS           reduce using rule 40 (expression -> variable .)
    LESS            reduce using rule 40 (expression -> variable .)
    GREATER         reduce using rule 40 (expression -> variable .)
    EQ              reduce using rule 40 (expression -> variable .)
    NOTEQ           reduce using rule 40 (expression -> variable .)
    THEN            reduce using rule 40 (expression -> variable .)
    TO              reduce using rule 40 (expression -> variable .)
    UNTIL           reduce using rule 40 (expression -> variable .)
    ELSE            reduce using rule 40 (expression -> variable .)
    COMMA           reduce using rule 40 (expression -> variable .)
    RBRACKET        reduce using rule 40 (expression -> variable .)
    CONTINUE        reduce using rule 40 (expression -> variable .)
    R_QBRACKET      reduce using rule 40 (expression -> variable .)


state 65

    (44) expression -> call .

    NEWLINE         reduce using rule 44 (expression -> call .)
    PLUS            reduce using rule 44 (expression -> call .)
    MINUS           reduce using rule 44 (expression -> call .)
    LESS            reduce using rule 44 (expression -> call .)
    GREATER         reduce using rule 44 (expression -> call .)
    EQ              reduce using rule 44 (expression -> call .)
    NOTEQ           reduce using rule 44 (expression -> call .)
    THEN            reduce using rule 44 (expression -> call .)
    TO              reduce using rule 44 (expression -> call .)
    UNTIL           reduce using rule 44 (expression -> call .)
    ELSE            reduce using rule 44 (expression -> call .)
    COMMA           reduce using rule 44 (expression -> call .)
    RBRACKET        reduce using rule 44 (expression -> call .)
    CONTINUE        reduce using rule 44 (expression -> call .)
    R_QBRACKET      reduce using rule 44 (expression -> call .)


state 66

    (38) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (39) variable -> VARIABLE .
    (89) call -> VARIABLE . LBRACKET parameters RBRACKET
    (90) call -> VARIABLE . BRACKETS

    L_QBRACKET      shift and go to state 98
    NEWLINE         reduce using rule 39 (variable -> VARIABLE .)
    PLUS            reduce using rule 39 (variable -> VARIABLE .)
    MINUS           reduce using rule 39 (variable -> VARIABLE .)
    LESS            reduce using rule 39 (variable -> VARIABLE .)
    GREATER         reduce using rule 39 (variable -> VARIABLE .)
    EQ              reduce using rule 39 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 39 (variable -> VARIABLE .)
    THEN            reduce using rule 39 (variable -> VARIABLE .)
    TO              reduce using rule 39 (variable -> VARIABLE .)
    UNTIL           reduce using rule 39 (variable -> VARIABLE .)
    ELSE            reduce using rule 39 (variable -> VARIABLE .)
    COMMA           reduce using rule 39 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 39 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 39 (variable -> VARIABLE .)
    R_QBRACKET      reduce using rule 39 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 96
    BRACKETS        shift and go to state 97


state 67

    (74) converting_command -> expression TO . type
    (75) converting_command -> expression TO . expression
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 107
    type                           shift and go to state 108
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 68

    (59) math_expression -> expression PLUS . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 109
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 69

    (60) math_expression -> expression MINUS . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 110
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 70

    (62) math_expression -> expression LESS . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 111
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 71

    (63) math_expression -> expression GREATER . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 112
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 72

    (64) math_expression -> expression EQ . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 113
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 73

    (65) math_expression -> expression NOTEQ . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 114
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 74

    (24) statement -> empty NEWLINE .

    RETURN          reduce using rule 24 (statement -> empty NEWLINE .)
    COMMENT         reduce using rule 24 (statement -> empty NEWLINE .)
    DO              reduce using rule 24 (statement -> empty NEWLINE .)
    IF              reduce using rule 24 (statement -> empty NEWLINE .)
    FUNCTION        reduce using rule 24 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 24 (statement -> empty NEWLINE .)
    INTEGER         reduce using rule 24 (statement -> empty NEWLINE .)
    STRING          reduce using rule 24 (statement -> empty NEWLINE .)
    BOOL            reduce using rule 24 (statement -> empty NEWLINE .)
    VECTOR          reduce using rule 24 (statement -> empty NEWLINE .)
    LEFT            reduce using rule 24 (statement -> empty NEWLINE .)
    RIGHT           reduce using rule 24 (statement -> empty NEWLINE .)
    FORWARD         reduce using rule 24 (statement -> empty NEWLINE .)
    BACK            reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_RIGHT    reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_LEFT     reduce using rule 24 (statement -> empty NEWLINE .)
    LMS             reduce using rule 24 (statement -> empty NEWLINE .)
    REFLECT         reduce using rule 24 (statement -> empty NEWLINE .)
    DRILL           reduce using rule 24 (statement -> empty NEWLINE .)
    TRUE            reduce using rule 24 (statement -> empty NEWLINE .)
    FALSE           reduce using rule 24 (statement -> empty NEWLINE .)
    UNDEFINED       reduce using rule 24 (statement -> empty NEWLINE .)
    DECIMAL         reduce using rule 24 (statement -> empty NEWLINE .)
    EXIT            reduce using rule 24 (statement -> empty NEWLINE .)
    WOOD            reduce using rule 24 (statement -> empty NEWLINE .)
    STEEL           reduce using rule 24 (statement -> empty NEWLINE .)
    GLASS           reduce using rule 24 (statement -> empty NEWLINE .)
    CONCRETE        reduce using rule 24 (statement -> empty NEWLINE .)
    PLASTIC         reduce using rule 24 (statement -> empty NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 24 (statement -> empty NEWLINE .)
    QUOTE           reduce using rule 24 (statement -> empty NEWLINE .)
    MINUS           reduce using rule 24 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 24 (statement -> empty NEWLINE .)
    $end            reduce using rule 24 (statement -> empty NEWLINE .)
    END             reduce using rule 24 (statement -> empty NEWLINE .)


state 75

    (25) declaration -> type variables .

    NEWLINE         reduce using rule 25 (declaration -> type variables .)
    UNTIL           reduce using rule 25 (declaration -> type variables .)
    ELSE            reduce using rule 25 (declaration -> type variables .)


state 76

    (33) variables -> variable . COMMA variables
    (35) variables -> variable .
    (37) assignment -> variable . ASSIGNMENT expression

    COMMA           shift and go to state 115
    NEWLINE         reduce using rule 35 (variables -> variable .)
    UNTIL           reduce using rule 35 (variables -> variable .)
    ELSE            reduce using rule 35 (variables -> variable .)
    ASSIGNMENT      shift and go to state 81


state 77

    (34) variables -> assignment . COMMA variables
    (36) variables -> assignment .

    COMMA           shift and go to state 116
    NEWLINE         reduce using rule 36 (variables -> assignment .)
    UNTIL           reduce using rule 36 (variables -> assignment .)
    ELSE            reduce using rule 36 (variables -> assignment .)


state 78

    (38) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (39) variable -> VARIABLE .

    L_QBRACKET      shift and go to state 98
    COMMA           reduce using rule 39 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 39 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 39 (variable -> VARIABLE .)
    UNTIL           reduce using rule 39 (variable -> VARIABLE .)
    ELSE            reduce using rule 39 (variable -> VARIABLE .)


state 79

    (26) comment -> COMMENT any .
    (27) any -> any . VARIABLE

    NEWLINE         reduce using rule 26 (comment -> COMMENT any .)
    VARIABLE        shift and go to state 117


state 80

    (28) any -> VARIABLE .

    VARIABLE        reduce using rule 28 (any -> VARIABLE .)
    NEWLINE         reduce using rule 28 (any -> VARIABLE .)


state 81

    (37) assignment -> variable ASSIGNMENT . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    variable                       shift and go to state 64
    expression                     shift and go to state 118
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 82

    (66) while -> DO statements_group . UNTIL expression

    UNTIL           shift and go to state 119


state 83

    (2) statements_group -> BEGIN . statements END
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) declaration -> . type variables
    (26) comment -> . COMMENT any
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    NEWLINE         reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statements                     shift and go to state 120
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 84

    (3) statements_group -> inner_statement .

    UNTIL           reduce using rule 3 (statements_group -> inner_statement .)
    ELSE            reduce using rule 3 (statements_group -> inner_statement .)
    NEWLINE         reduce using rule 3 (statements_group -> inner_statement .)


state 85

    (4) inner_statement -> declaration .

    UNTIL           reduce using rule 4 (inner_statement -> declaration .)
    ELSE            reduce using rule 4 (inner_statement -> declaration .)
    NEWLINE         reduce using rule 4 (inner_statement -> declaration .)


state 86

    (5) inner_statement -> assignment .

    UNTIL           reduce using rule 5 (inner_statement -> assignment .)
    ELSE            reduce using rule 5 (inner_statement -> assignment .)
    NEWLINE         reduce using rule 5 (inner_statement -> assignment .)


state 87

    (6) inner_statement -> while .

    UNTIL           reduce using rule 6 (inner_statement -> while .)
    ELSE            reduce using rule 6 (inner_statement -> while .)
    NEWLINE         reduce using rule 6 (inner_statement -> while .)


state 88

    (7) inner_statement -> if .

    UNTIL           reduce using rule 7 (inner_statement -> if .)
    ELSE            reduce using rule 7 (inner_statement -> if .)
    NEWLINE         reduce using rule 7 (inner_statement -> if .)


state 89

    (8) inner_statement -> command .

    UNTIL           reduce using rule 8 (inner_statement -> command .)
    ELSE            reduce using rule 8 (inner_statement -> command .)
    NEWLINE         reduce using rule 8 (inner_statement -> command .)


state 90

    (9) inner_statement -> function .

    UNTIL           reduce using rule 9 (inner_statement -> function .)
    ELSE            reduce using rule 9 (inner_statement -> function .)
    NEWLINE         reduce using rule 9 (inner_statement -> function .)


state 91

    (10) inner_statement -> call .
    (44) expression -> call .

    UNTIL           reduce using rule 10 (inner_statement -> call .)
    ELSE            reduce using rule 10 (inner_statement -> call .)
    NEWLINE         reduce using rule 10 (inner_statement -> call .)
    TO              reduce using rule 44 (expression -> call .)
    PLUS            reduce using rule 44 (expression -> call .)
    MINUS           reduce using rule 44 (expression -> call .)
    LESS            reduce using rule 44 (expression -> call .)
    GREATER         reduce using rule 44 (expression -> call .)
    EQ              reduce using rule 44 (expression -> call .)
    NOTEQ           reduce using rule 44 (expression -> call .)


state 92

    (11) inner_statement -> RETURN . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 121
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 93

    (12) inner_statement -> empty .

    UNTIL           reduce using rule 12 (inner_statement -> empty .)
    ELSE            reduce using rule 12 (inner_statement -> empty .)
    NEWLINE         reduce using rule 12 (inner_statement -> empty .)


state 94

    (67) if -> IF expression . THEN statements_group
    (68) if -> IF expression . THEN statements_group ELSE statements_group
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    THEN            shift and go to state 122
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 95

    (69) function -> FUNCTION OF . type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> FUNCTION OF . type VARIABLE BRACKETS statements_group
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type

    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28

    type                           shift and go to state 123

state 96

    (89) call -> VARIABLE LBRACKET . parameters RBRACKET
    (92) parameters -> . parameters COMMA parameter
    (93) parameters -> . parameter
    (94) parameters -> . parameters CONTINUE
    (95) parameter -> . expression
    (96) parameter -> . VARIABLE EQ expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 124
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    parameters                     shift and go to state 125
    parameter                      shift and go to state 126
    expression                     shift and go to state 127
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 97

    (90) call -> VARIABLE BRACKETS .

    NEWLINE         reduce using rule 90 (call -> VARIABLE BRACKETS .)
    TO              reduce using rule 90 (call -> VARIABLE BRACKETS .)
    PLUS            reduce using rule 90 (call -> VARIABLE BRACKETS .)
    MINUS           reduce using rule 90 (call -> VARIABLE BRACKETS .)
    LESS            reduce using rule 90 (call -> VARIABLE BRACKETS .)
    GREATER         reduce using rule 90 (call -> VARIABLE BRACKETS .)
    EQ              reduce using rule 90 (call -> VARIABLE BRACKETS .)
    NOTEQ           reduce using rule 90 (call -> VARIABLE BRACKETS .)
    UNTIL           reduce using rule 90 (call -> VARIABLE BRACKETS .)
    THEN            reduce using rule 90 (call -> VARIABLE BRACKETS .)
    ELSE            reduce using rule 90 (call -> VARIABLE BRACKETS .)
    COMMA           reduce using rule 90 (call -> VARIABLE BRACKETS .)
    RBRACKET        reduce using rule 90 (call -> VARIABLE BRACKETS .)
    CONTINUE        reduce using rule 90 (call -> VARIABLE BRACKETS .)
    R_QBRACKET      reduce using rule 90 (call -> VARIABLE BRACKETS .)


state 98

    (38) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 128
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 99

    (76) vector_command -> VARIABLE PUSH . BACK expression
    (78) vector_command -> VARIABLE PUSH . FRONT expression

    BACK            shift and go to state 129
    FRONT           shift and go to state 130


state 100

    (77) vector_command -> VARIABLE POP . BACK
    (79) vector_command -> VARIABLE POP . FRONT

    BACK            shift and go to state 131
    FRONT           shift and go to state 132


state 101

    (32) type -> VECTOR OF . type
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type

    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28

    type                           shift and go to state 133

state 102

    (45) qstring -> DOUBLE_QUOTE string . DOUBLE_QUOTE
    (47) string -> string . VARIABLE

    DOUBLE_QUOTE    shift and go to state 134
    VARIABLE        shift and go to state 135


state 103

    (48) string -> VARIABLE .

    DOUBLE_QUOTE    reduce using rule 48 (string -> VARIABLE .)
    VARIABLE        reduce using rule 48 (string -> VARIABLE .)
    QUOTE           reduce using rule 48 (string -> VARIABLE .)


state 104

    (46) qstring -> QUOTE string . QUOTE
    (47) string -> string . VARIABLE

    QUOTE           shift and go to state 136
    VARIABLE        shift and go to state 135


state 105

    (61) math_expression -> MINUS expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 61 (math_expression -> MINUS expression .)
    NEWLINE         reduce using rule 61 (math_expression -> MINUS expression .)
    THEN            reduce using rule 61 (math_expression -> MINUS expression .)
    UNTIL           reduce using rule 61 (math_expression -> MINUS expression .)
    ELSE            reduce using rule 61 (math_expression -> MINUS expression .)
    COMMA           reduce using rule 61 (math_expression -> MINUS expression .)
    RBRACKET        reduce using rule 61 (math_expression -> MINUS expression .)
    CONTINUE        reduce using rule 61 (math_expression -> MINUS expression .)
    R_QBRACKET      reduce using rule 61 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73

  ! PLUS            [ reduce using rule 61 (math_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 61 (math_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 61 (math_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 61 (math_expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 61 (math_expression -> MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 61 (math_expression -> MINUS expression .) ]


state 106

    (23) statement -> RETURN expression NEWLINE .

    RETURN          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    COMMENT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DO              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    IF              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FUNCTION        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VARIABLE        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    INTEGER         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    STRING          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BOOL            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VECTOR          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LEFT            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    RIGHT           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FORWARD         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BACK            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_RIGHT    reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_LEFT     reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LMS             reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    REFLECT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DRILL           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    TRUE            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FALSE           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    UNDEFINED       reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DECIMAL         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    EXIT            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    WOOD            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    STEEL           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    GLASS           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    CONCRETE        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    PLASTIC         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    QUOTE           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    MINUS           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    NEWLINE         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    END             reduce using rule 23 (statement -> RETURN expression NEWLINE .)


state 107

    (75) converting_command -> expression TO expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 75 (converting_command -> expression TO expression .)
    UNTIL           reduce using rule 75 (converting_command -> expression TO expression .)
    ELSE            reduce using rule 75 (converting_command -> expression TO expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 108

    (74) converting_command -> expression TO type .

    NEWLINE         reduce using rule 74 (converting_command -> expression TO type .)
    UNTIL           reduce using rule 74 (converting_command -> expression TO type .)
    ELSE            reduce using rule 74 (converting_command -> expression TO type .)


state 109

    (59) math_expression -> expression PLUS expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 59 (math_expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 59 (math_expression -> expression PLUS expression .)
    THEN            reduce using rule 59 (math_expression -> expression PLUS expression .)
    UNTIL           reduce using rule 59 (math_expression -> expression PLUS expression .)
    ELSE            reduce using rule 59 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 59 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 59 (math_expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 59 (math_expression -> expression PLUS expression .)
    R_QBRACKET      reduce using rule 59 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73

  ! PLUS            [ reduce using rule 59 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 59 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 59 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 59 (math_expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 59 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 59 (math_expression -> expression PLUS expression .) ]


state 110

    (60) math_expression -> expression MINUS expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 60 (math_expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 60 (math_expression -> expression MINUS expression .)
    THEN            reduce using rule 60 (math_expression -> expression MINUS expression .)
    UNTIL           reduce using rule 60 (math_expression -> expression MINUS expression .)
    ELSE            reduce using rule 60 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 60 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 60 (math_expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 60 (math_expression -> expression MINUS expression .)
    R_QBRACKET      reduce using rule 60 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73

  ! PLUS            [ reduce using rule 60 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 60 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 60 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 60 (math_expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 60 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 60 (math_expression -> expression MINUS expression .) ]


state 111

    (62) math_expression -> expression LESS expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 62 (math_expression -> expression LESS expression .)
    NEWLINE         reduce using rule 62 (math_expression -> expression LESS expression .)
    THEN            reduce using rule 62 (math_expression -> expression LESS expression .)
    UNTIL           reduce using rule 62 (math_expression -> expression LESS expression .)
    ELSE            reduce using rule 62 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 62 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 62 (math_expression -> expression LESS expression .)
    CONTINUE        reduce using rule 62 (math_expression -> expression LESS expression .)
    R_QBRACKET      reduce using rule 62 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73

  ! PLUS            [ reduce using rule 62 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 62 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 62 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 62 (math_expression -> expression LESS expression .) ]
  ! EQ              [ reduce using rule 62 (math_expression -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 62 (math_expression -> expression LESS expression .) ]


state 112

    (63) math_expression -> expression GREATER expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 63 (math_expression -> expression GREATER expression .)
    NEWLINE         reduce using rule 63 (math_expression -> expression GREATER expression .)
    THEN            reduce using rule 63 (math_expression -> expression GREATER expression .)
    UNTIL           reduce using rule 63 (math_expression -> expression GREATER expression .)
    ELSE            reduce using rule 63 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 63 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 63 (math_expression -> expression GREATER expression .)
    CONTINUE        reduce using rule 63 (math_expression -> expression GREATER expression .)
    R_QBRACKET      reduce using rule 63 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73

  ! PLUS            [ reduce using rule 63 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 63 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 63 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 63 (math_expression -> expression GREATER expression .) ]
  ! EQ              [ reduce using rule 63 (math_expression -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 63 (math_expression -> expression GREATER expression .) ]


state 113

    (64) math_expression -> expression EQ expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 64 (math_expression -> expression EQ expression .)
    NEWLINE         reduce using rule 64 (math_expression -> expression EQ expression .)
    THEN            reduce using rule 64 (math_expression -> expression EQ expression .)
    UNTIL           reduce using rule 64 (math_expression -> expression EQ expression .)
    ELSE            reduce using rule 64 (math_expression -> expression EQ expression .)
    COMMA           reduce using rule 64 (math_expression -> expression EQ expression .)
    RBRACKET        reduce using rule 64 (math_expression -> expression EQ expression .)
    CONTINUE        reduce using rule 64 (math_expression -> expression EQ expression .)
    R_QBRACKET      reduce using rule 64 (math_expression -> expression EQ expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73

  ! PLUS            [ reduce using rule 64 (math_expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 64 (math_expression -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 64 (math_expression -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 64 (math_expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 64 (math_expression -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 64 (math_expression -> expression EQ expression .) ]


state 114

    (65) math_expression -> expression NOTEQ expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    NEWLINE         reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    THEN            reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    UNTIL           reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    ELSE            reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    COMMA           reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    CONTINUE        reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    R_QBRACKET      reduce using rule 65 (math_expression -> expression NOTEQ expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73

  ! PLUS            [ reduce using rule 65 (math_expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 65 (math_expression -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 65 (math_expression -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 65 (math_expression -> expression NOTEQ expression .) ]
  ! EQ              [ reduce using rule 65 (math_expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 65 (math_expression -> expression NOTEQ expression .) ]


state 115

    (33) variables -> variable COMMA . variables
    (33) variables -> . variable COMMA variables
    (34) variables -> . assignment COMMA variables
    (35) variables -> . variable
    (36) variables -> . assignment
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (37) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 78

    variable                       shift and go to state 76
    variables                      shift and go to state 137
    assignment                     shift and go to state 77

state 116

    (34) variables -> assignment COMMA . variables
    (33) variables -> . variable COMMA variables
    (34) variables -> . assignment COMMA variables
    (35) variables -> . variable
    (36) variables -> . assignment
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (37) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 78

    assignment                     shift and go to state 77
    variables                      shift and go to state 138
    variable                       shift and go to state 76

state 117

    (27) any -> any VARIABLE .

    VARIABLE        reduce using rule 27 (any -> any VARIABLE .)
    NEWLINE         reduce using rule 27 (any -> any VARIABLE .)


state 118

    (37) assignment -> variable ASSIGNMENT expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 37 (assignment -> variable ASSIGNMENT expression .)
    COMMA           reduce using rule 37 (assignment -> variable ASSIGNMENT expression .)
    UNTIL           reduce using rule 37 (assignment -> variable ASSIGNMENT expression .)
    ELSE            reduce using rule 37 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 119

    (66) while -> DO statements_group UNTIL . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 139
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 120

    (2) statements_group -> BEGIN statements . END
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) declaration -> . type variables
    (26) comment -> . COMMENT any
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    END             shift and go to state 140
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 16
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    NEWLINE         reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statement                      shift and go to state 54
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 121

    (11) inner_statement -> RETURN expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    UNTIL           reduce using rule 11 (inner_statement -> RETURN expression .)
    ELSE            reduce using rule 11 (inner_statement -> RETURN expression .)
    NEWLINE         reduce using rule 11 (inner_statement -> RETURN expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 122

    (67) if -> IF expression THEN . statements_group
    (68) if -> IF expression THEN . statements_group ELSE statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (25) declaration -> . type variables
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 83
    RETURN          shift and go to state 92
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    ELSE            reduce using rule 91 (empty -> .)
    NEWLINE         reduce using rule 91 (empty -> .)
    UNTIL           reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 13
    statements_group               shift and go to state 141
    inner_statement                shift and go to state 84
    declaration                    shift and go to state 85
    assignment                     shift and go to state 86
    while                          shift and go to state 87
    if                             shift and go to state 88
    command                        shift and go to state 89
    function                       shift and go to state 90
    call                           shift and go to state 91
    empty                          shift and go to state 93
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 123

    (69) function -> FUNCTION OF type . VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> FUNCTION OF type . VARIABLE BRACKETS statements_group

    VARIABLE        shift and go to state 142


state 124

    (96) parameter -> VARIABLE . EQ expression
    (38) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (39) variable -> VARIABLE .
    (89) call -> VARIABLE . LBRACKET parameters RBRACKET
    (90) call -> VARIABLE . BRACKETS

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 143
    L_QBRACKET      shift and go to state 98
    PLUS            reduce using rule 39 (variable -> VARIABLE .)
    MINUS           reduce using rule 39 (variable -> VARIABLE .)
    LESS            reduce using rule 39 (variable -> VARIABLE .)
    GREATER         reduce using rule 39 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 39 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 39 (variable -> VARIABLE .)
    COMMA           reduce using rule 39 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 39 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 96
    BRACKETS        shift and go to state 97

  ! EQ              [ reduce using rule 39 (variable -> VARIABLE .) ]


state 125

    (89) call -> VARIABLE LBRACKET parameters . RBRACKET
    (92) parameters -> parameters . COMMA parameter
    (94) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 144
    COMMA           shift and go to state 145
    CONTINUE        shift and go to state 146


state 126

    (93) parameters -> parameter .

    RBRACKET        reduce using rule 93 (parameters -> parameter .)
    COMMA           reduce using rule 93 (parameters -> parameter .)
    CONTINUE        reduce using rule 93 (parameters -> parameter .)


state 127

    (95) parameter -> expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 95 (parameter -> expression .)
    COMMA           reduce using rule 95 (parameter -> expression .)
    CONTINUE        reduce using rule 95 (parameter -> expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 128

    (38) variable -> VARIABLE L_QBRACKET expression . R_QBRACKET
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    R_QBRACKET      shift and go to state 147
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 129

    (76) vector_command -> VARIABLE PUSH BACK . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 148
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 130

    (78) vector_command -> VARIABLE PUSH FRONT . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 149
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 131

    (77) vector_command -> VARIABLE POP BACK .

    NEWLINE         reduce using rule 77 (vector_command -> VARIABLE POP BACK .)
    UNTIL           reduce using rule 77 (vector_command -> VARIABLE POP BACK .)
    ELSE            reduce using rule 77 (vector_command -> VARIABLE POP BACK .)


state 132

    (79) vector_command -> VARIABLE POP FRONT .

    NEWLINE         reduce using rule 79 (vector_command -> VARIABLE POP FRONT .)
    UNTIL           reduce using rule 79 (vector_command -> VARIABLE POP FRONT .)
    ELSE            reduce using rule 79 (vector_command -> VARIABLE POP FRONT .)


state 133

    (32) type -> VECTOR OF type .

    VARIABLE        reduce using rule 32 (type -> VECTOR OF type .)
    NEWLINE         reduce using rule 32 (type -> VECTOR OF type .)
    UNTIL           reduce using rule 32 (type -> VECTOR OF type .)
    ELSE            reduce using rule 32 (type -> VECTOR OF type .)


state 134

    (45) qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .

    TO              reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    PLUS            reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    MINUS           reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    LESS            reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    GREATER         reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    EQ              reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NOTEQ           reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NEWLINE         reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    THEN            reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    UNTIL           reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    ELSE            reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    COMMA           reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    RBRACKET        reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    CONTINUE        reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    R_QBRACKET      reduce using rule 45 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)


state 135

    (47) string -> string VARIABLE .

    DOUBLE_QUOTE    reduce using rule 47 (string -> string VARIABLE .)
    VARIABLE        reduce using rule 47 (string -> string VARIABLE .)
    QUOTE           reduce using rule 47 (string -> string VARIABLE .)


state 136

    (46) qstring -> QUOTE string QUOTE .

    TO              reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    PLUS            reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    MINUS           reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    LESS            reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    GREATER         reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    EQ              reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    NOTEQ           reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    NEWLINE         reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    THEN            reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    UNTIL           reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    ELSE            reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    COMMA           reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    RBRACKET        reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    CONTINUE        reduce using rule 46 (qstring -> QUOTE string QUOTE .)
    R_QBRACKET      reduce using rule 46 (qstring -> QUOTE string QUOTE .)


state 137

    (33) variables -> variable COMMA variables .

    NEWLINE         reduce using rule 33 (variables -> variable COMMA variables .)
    UNTIL           reduce using rule 33 (variables -> variable COMMA variables .)
    ELSE            reduce using rule 33 (variables -> variable COMMA variables .)


state 138

    (34) variables -> assignment COMMA variables .

    NEWLINE         reduce using rule 34 (variables -> assignment COMMA variables .)
    UNTIL           reduce using rule 34 (variables -> assignment COMMA variables .)
    ELSE            reduce using rule 34 (variables -> assignment COMMA variables .)


state 139

    (66) while -> DO statements_group UNTIL expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 66 (while -> DO statements_group UNTIL expression .)
    UNTIL           reduce using rule 66 (while -> DO statements_group UNTIL expression .)
    ELSE            reduce using rule 66 (while -> DO statements_group UNTIL expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 140

    (2) statements_group -> BEGIN statements END .

    UNTIL           reduce using rule 2 (statements_group -> BEGIN statements END .)
    ELSE            reduce using rule 2 (statements_group -> BEGIN statements END .)
    NEWLINE         reduce using rule 2 (statements_group -> BEGIN statements END .)


state 141

    (67) if -> IF expression THEN statements_group .
    (68) if -> IF expression THEN statements_group . ELSE statements_group

  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 67 (if -> IF expression THEN statements_group .)
    UNTIL           reduce using rule 67 (if -> IF expression THEN statements_group .)
    ELSE            shift and go to state 150

  ! ELSE            [ reduce using rule 67 (if -> IF expression THEN statements_group .) ]


state 142

    (69) function -> FUNCTION OF type VARIABLE . LBRACKET parameters RBRACKET statements_group
    (70) function -> FUNCTION OF type VARIABLE . BRACKETS statements_group

    LBRACKET        shift and go to state 151
    BRACKETS        shift and go to state 152


state 143

    (96) parameter -> VARIABLE EQ . expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 66
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 153
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 144

    (89) call -> VARIABLE LBRACKET parameters RBRACKET .

    NEWLINE         reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    TO              reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    PLUS            reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    MINUS           reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    LESS            reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    GREATER         reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    EQ              reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    NOTEQ           reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    UNTIL           reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    THEN            reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    ELSE            reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    COMMA           reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    RBRACKET        reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    CONTINUE        reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    R_QBRACKET      reduce using rule 89 (call -> VARIABLE LBRACKET parameters RBRACKET .)


state 145

    (92) parameters -> parameters COMMA . parameter
    (95) parameter -> . expression
    (96) parameter -> . VARIABLE EQ expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 124
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    parameter                      shift and go to state 154
    expression                     shift and go to state 127
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 146

    (94) parameters -> parameters CONTINUE .

    RBRACKET        reduce using rule 94 (parameters -> parameters CONTINUE .)
    COMMA           reduce using rule 94 (parameters -> parameters CONTINUE .)
    CONTINUE        reduce using rule 94 (parameters -> parameters CONTINUE .)


state 147

    (38) variable -> VARIABLE L_QBRACKET expression R_QBRACKET .

    ASSIGNMENT      reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    TO              reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    PLUS            reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    MINUS           reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    LESS            reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    GREATER         reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    EQ              reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NOTEQ           reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NEWLINE         reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    COMMA           reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    UNTIL           reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    ELSE            reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    THEN            reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    RBRACKET        reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    CONTINUE        reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    R_QBRACKET      reduce using rule 38 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)


state 148

    (76) vector_command -> VARIABLE PUSH BACK expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 76 (vector_command -> VARIABLE PUSH BACK expression .)
    UNTIL           reduce using rule 76 (vector_command -> VARIABLE PUSH BACK expression .)
    ELSE            reduce using rule 76 (vector_command -> VARIABLE PUSH BACK expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 149

    (78) vector_command -> VARIABLE PUSH FRONT expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 78 (vector_command -> VARIABLE PUSH FRONT expression .)
    UNTIL           reduce using rule 78 (vector_command -> VARIABLE PUSH FRONT expression .)
    ELSE            reduce using rule 78 (vector_command -> VARIABLE PUSH FRONT expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 150

    (68) if -> IF expression THEN statements_group ELSE . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (25) declaration -> . type variables
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 83
    RETURN          shift and go to state 92
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    ELSE            reduce using rule 91 (empty -> .)
    NEWLINE         reduce using rule 91 (empty -> .)
    UNTIL           reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 13
    statements_group               shift and go to state 155
    inner_statement                shift and go to state 84
    declaration                    shift and go to state 85
    assignment                     shift and go to state 86
    while                          shift and go to state 87
    if                             shift and go to state 88
    command                        shift and go to state 89
    function                       shift and go to state 90
    call                           shift and go to state 91
    empty                          shift and go to state 93
    type                           shift and go to state 15
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 151

    (69) function -> FUNCTION OF type VARIABLE LBRACKET . parameters RBRACKET statements_group
    (92) parameters -> . parameters COMMA parameter
    (93) parameters -> . parameter
    (94) parameters -> . parameters CONTINUE
    (95) parameter -> . expression
    (96) parameter -> . VARIABLE EQ expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 124
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    parameters                     shift and go to state 156
    parameter                      shift and go to state 126
    expression                     shift and go to state 127
    variable                       shift and go to state 64
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 65

state 152

    (70) function -> FUNCTION OF type VARIABLE BRACKETS . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (25) declaration -> . type variables
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 83
    RETURN          shift and go to state 92
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    ELSE            reduce using rule 91 (empty -> .)
    NEWLINE         reduce using rule 91 (empty -> .)
    UNTIL           reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    type                           shift and go to state 15
    statements_group               shift and go to state 157
    inner_statement                shift and go to state 84
    declaration                    shift and go to state 85
    assignment                     shift and go to state 86
    while                          shift and go to state 87
    if                             shift and go to state 88
    command                        shift and go to state 89
    function                       shift and go to state 90
    call                           shift and go to state 91
    expression                     shift and go to state 13
    empty                          shift and go to state 93
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 153

    (96) parameter -> VARIABLE EQ expression .
    (59) math_expression -> expression . PLUS expression
    (60) math_expression -> expression . MINUS expression
    (62) math_expression -> expression . LESS expression
    (63) math_expression -> expression . GREATER expression
    (64) math_expression -> expression . EQ expression
    (65) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 96 (parameter -> VARIABLE EQ expression .)
    COMMA           reduce using rule 96 (parameter -> VARIABLE EQ expression .)
    CONTINUE        reduce using rule 96 (parameter -> VARIABLE EQ expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    LESS            shift and go to state 70
    GREATER         shift and go to state 71
    EQ              shift and go to state 72
    NOTEQ           shift and go to state 73


state 154

    (92) parameters -> parameters COMMA parameter .

    RBRACKET        reduce using rule 92 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 92 (parameters -> parameters COMMA parameter .)
    CONTINUE        reduce using rule 92 (parameters -> parameters COMMA parameter .)


state 155

    (68) if -> IF expression THEN statements_group ELSE statements_group .

    NEWLINE         reduce using rule 68 (if -> IF expression THEN statements_group ELSE statements_group .)
    UNTIL           reduce using rule 68 (if -> IF expression THEN statements_group ELSE statements_group .)
    ELSE            reduce using rule 68 (if -> IF expression THEN statements_group ELSE statements_group .)


state 156

    (69) function -> FUNCTION OF type VARIABLE LBRACKET parameters . RBRACKET statements_group
    (92) parameters -> parameters . COMMA parameter
    (94) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 158
    COMMA           shift and go to state 145
    CONTINUE        shift and go to state 146


state 157

    (70) function -> FUNCTION OF type VARIABLE BRACKETS statements_group .

    NEWLINE         reduce using rule 70 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    UNTIL           reduce using rule 70 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    ELSE            reduce using rule 70 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)


state 158

    (69) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (25) declaration -> . type variables
    (37) assignment -> . variable ASSIGNMENT expression
    (66) while -> . DO statements_group UNTIL expression
    (67) if -> . IF expression THEN statements_group
    (68) if -> . IF expression THEN statements_group ELSE statements_group
    (71) command -> . vector_command
    (72) command -> . robot_command
    (73) command -> . converting_command
    (69) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (70) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (89) call -> . VARIABLE LBRACKET parameters RBRACKET
    (90) call -> . VARIABLE BRACKETS
    (91) empty -> .
    (29) type -> . INTEGER
    (30) type -> . STRING
    (31) type -> . BOOL
    (32) type -> . VECTOR OF type
    (38) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (39) variable -> . VARIABLE
    (76) vector_command -> . VARIABLE PUSH BACK expression
    (77) vector_command -> . VARIABLE POP BACK
    (78) vector_command -> . VARIABLE PUSH FRONT expression
    (79) vector_command -> . VARIABLE POP FRONT
    (80) robot_command -> . LEFT
    (81) robot_command -> . RIGHT
    (82) robot_command -> . FORWARD
    (83) robot_command -> . BACK
    (84) robot_command -> . ROTATE_RIGHT
    (85) robot_command -> . ROTATE_LEFT
    (86) robot_command -> . LMS
    (87) robot_command -> . REFLECT
    (88) robot_command -> . DRILL
    (74) converting_command -> . expression TO type
    (75) converting_command -> . expression TO expression
    (40) expression -> . variable
    (41) expression -> . const
    (42) expression -> . qstring
    (43) expression -> . math_expression
    (44) expression -> . call
    (49) const -> . TRUE
    (50) const -> . FALSE
    (51) const -> . UNDEFINED
    (52) const -> . DECIMAL
    (53) const -> . EXIT
    (54) const -> . WOOD
    (55) const -> . STEEL
    (56) const -> . GLASS
    (57) const -> . CONCRETE
    (58) const -> . PLASTIC
    (45) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (46) qstring -> . QUOTE string QUOTE
    (59) math_expression -> . expression PLUS expression
    (60) math_expression -> . expression MINUS expression
    (61) math_expression -> . MINUS expression
    (62) math_expression -> . expression LESS expression
    (63) math_expression -> . expression GREATER expression
    (64) math_expression -> . expression EQ expression
    (65) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 83
    RETURN          shift and go to state 92
    DO              shift and go to state 18
    IF              shift and go to state 19
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 24
    ELSE            reduce using rule 91 (empty -> .)
    NEWLINE         reduce using rule 91 (empty -> .)
    UNTIL           reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 25
    STRING          shift and go to state 26
    BOOL            shift and go to state 27
    VECTOR          shift and go to state 28
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 29
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    type                           shift and go to state 15
    statements_group               shift and go to state 159
    inner_statement                shift and go to state 84
    declaration                    shift and go to state 85
    assignment                     shift and go to state 86
    while                          shift and go to state 87
    if                             shift and go to state 88
    command                        shift and go to state 89
    function                       shift and go to state 90
    call                           shift and go to state 91
    expression                     shift and go to state 13
    empty                          shift and go to state 93
    variable                       shift and go to state 17
    vector_command                 shift and go to state 20
    robot_command                  shift and go to state 21
    converting_command             shift and go to state 22
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 159

    (69) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .

    NEWLINE         reduce using rule 69 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    UNTIL           reduce using rule 69 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    ELSE            reduce using rule 69 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 113 resolved as shift
WARNING: shift/reduce conflict for EQ in state 113 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 141 resolved as shift
