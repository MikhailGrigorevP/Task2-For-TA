Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> application
Rule 1     application -> statements
Rule 2     statements_group -> BEGIN statements END
Rule 3     statements_group -> statement
Rule 4     statements -> statements statement
Rule 5     statements -> statement
Rule 6     statement -> declaration NEWLINE
Rule 7     statement -> assignment NEWLINE
Rule 8     statement -> while NEWLINE
Rule 9     statement -> if NEWLINE
Rule 10    statement -> command NEWLINE
Rule 11    statement -> function NEWLINE
Rule 12    statement -> call NEWLINE
Rule 13    statement -> RETURN NEWLINE
Rule 14    statement -> empty NEWLINE
Rule 15    declaration -> type variables
Rule 16    type -> INTEGER
Rule 17    type -> STRING
Rule 18    type -> BOOL
Rule 19    type -> VECTOR OF
Rule 20    variables -> variable COMMA variables
Rule 21    variables -> assignment COMMA variables
Rule 22    variables -> variable
Rule 23    variables -> assignment
Rule 24    assignment -> variable ASSIGNMENT expression
Rule 25    variable -> VARIABLE R_QBRACKET expression L_QBRACKET
Rule 26    variable -> VARIABLE
Rule 27    expression -> variable
Rule 28    expression -> const
Rule 29    expression -> qstring
Rule 30    expression -> math_expression
Rule 31    expression -> call
Rule 32    qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE
Rule 33    qstring -> QUOTE string QUOTE
Rule 34    string -> string VARIABLE
Rule 35    string -> VARIABLE
Rule 36    const -> TRUE
Rule 37    const -> FALSE
Rule 38    const -> UNDEFINED
Rule 39    const -> DECIMAL
Rule 40    const -> EXIT
Rule 41    const -> WOOD
Rule 42    const -> STEEL
Rule 43    const -> GLASS
Rule 44    const -> CONCRETE
Rule 45    const -> PLASTIC
Rule 46    math_expression -> expression PLUS expression
Rule 47    math_expression -> expression MINUS expression
Rule 48    math_expression -> MINUS expression
Rule 49    math_expression -> expression LESS expression
Rule 50    math_expression -> expression GREATER expression
Rule 51    math_expression -> expression EQ expression
Rule 52    math_expression -> expression NOTEQ expression
Rule 53    while -> DO statements_group UNTIL expression
Rule 54    if -> IF expression THEN statements_group
Rule 55    if -> IF expression THEN statements_group ELSE statements_group
Rule 56    function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
Rule 57    command -> vector_command
Rule 58    command -> robot_command
Rule 59    command -> converting_command
Rule 60    converting_command -> expression TO type
Rule 61    converting_command -> expression TO expression
Rule 62    vector_command -> PUSH BACK expression
Rule 63    vector_command -> POP BACK expression
Rule 64    vector_command -> PUSH FRONT expression
Rule 65    vector_command -> POP FRONT expression
Rule 66    robot_command -> LEFT
Rule 67    robot_command -> RIGHT
Rule 68    robot_command -> FORWARD
Rule 69    robot_command -> BACK
Rule 70    robot_command -> ROTATE_RIGHT
Rule 71    robot_command -> ROTATE_LEFT
Rule 72    robot_command -> LMS
Rule 73    robot_command -> REFLECT
Rule 74    robot_command -> DRILL
Rule 75    call -> VARIABLE LBRACKET parameters RBRACKET
Rule 76    empty -> <empty>
Rule 77    parameters -> parameters COMMA parameter
Rule 78    parameters -> parameter
Rule 79    parameters -> parameters CONTINUE
Rule 80    parameters -> empty
Rule 81    parameter -> expression
Rule 82    parameter -> VARIABLE EQ expression

Terminals, with rules where they appear

ASSIGNMENT           : 24
BACK                 : 62 63 69
BEGIN                : 2
BOOL                 : 18
COMMA                : 20 21 77
CONCRETE             : 44
CONTINUE             : 79
DECIMAL              : 39
DO                   : 53
DOUBLE_QUOTE         : 32 32
DRILL                : 74
ELSE                 : 55
END                  : 2
EQ                   : 51 82
EXIT                 : 40
FALSE                : 37
FORWARD              : 68
FRONT                : 64 65
FUNCTION             : 56
GLASS                : 43
GREATER              : 50
IF                   : 54 55
INTEGER              : 16
LBRACKET             : 56 75
LEFT                 : 66
LESS                 : 49
LMS                  : 72
L_QBRACKET           : 25
MINUS                : 47 48
NEWLINE              : 6 7 8 9 10 11 12 13 14
NOTEQ                : 52
OF                   : 19 56
PLASTIC              : 45
PLUS                 : 46
POP                  : 63 65
PUSH                 : 62 64
QUOTE                : 33 33
RBRACKET             : 56 75
REFLECT              : 73
RETURN               : 13
RIGHT                : 67
ROTATE_LEFT          : 71
ROTATE_RIGHT         : 70
R_QBRACKET           : 25
STEEL                : 42
STRING               : 17
THEN                 : 54 55
TO                   : 60 61
TRUE                 : 36
UNDEFINED            : 38
UNTIL                : 53
VARIABLE             : 25 26 34 35 56 75 82
VECTOR               : 19
WOOD                 : 41
error                : 

Nonterminals, with rules where they appear

application          : 0
assignment           : 7 21 23
call                 : 12 31
command              : 10
const                : 28
converting_command   : 59
declaration          : 6
empty                : 14 80
expression           : 24 25 46 46 47 47 48 49 49 50 50 51 51 52 52 53 54 55 60 61 61 62 63 64 65 81 82
function             : 11
if                   : 9
math_expression      : 30
parameter            : 77 78
parameters           : 56 75 77 79
qstring              : 29
robot_command        : 58
statement            : 3 4 5
statements           : 1 2 4
statements_group     : 53 54 55 55 56
string               : 32 33 34
type                 : 15 56 60
variable             : 20 22 24 27
variables            : 15 20 21
vector_command       : 57
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . application
    (1) application -> . statements
    (4) statements -> . statements statement
    (5) statements -> . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    application                    shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14
    expression                     shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 1

    (0) S' -> application .



state 2

    (1) application -> statements .
    (4) statements -> statements . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    $end            reduce using rule 1 (application -> statements .)
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statement                      shift and go to state 54
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14
    expression                     shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 3

    (5) statements -> statement .

    RETURN          reduce using rule 5 (statements -> statement .)
    DO              reduce using rule 5 (statements -> statement .)
    IF              reduce using rule 5 (statements -> statement .)
    FUNCTION        reduce using rule 5 (statements -> statement .)
    VARIABLE        reduce using rule 5 (statements -> statement .)
    INTEGER         reduce using rule 5 (statements -> statement .)
    STRING          reduce using rule 5 (statements -> statement .)
    BOOL            reduce using rule 5 (statements -> statement .)
    VECTOR          reduce using rule 5 (statements -> statement .)
    PUSH            reduce using rule 5 (statements -> statement .)
    POP             reduce using rule 5 (statements -> statement .)
    LEFT            reduce using rule 5 (statements -> statement .)
    RIGHT           reduce using rule 5 (statements -> statement .)
    FORWARD         reduce using rule 5 (statements -> statement .)
    BACK            reduce using rule 5 (statements -> statement .)
    ROTATE_RIGHT    reduce using rule 5 (statements -> statement .)
    ROTATE_LEFT     reduce using rule 5 (statements -> statement .)
    LMS             reduce using rule 5 (statements -> statement .)
    REFLECT         reduce using rule 5 (statements -> statement .)
    DRILL           reduce using rule 5 (statements -> statement .)
    TRUE            reduce using rule 5 (statements -> statement .)
    FALSE           reduce using rule 5 (statements -> statement .)
    UNDEFINED       reduce using rule 5 (statements -> statement .)
    DECIMAL         reduce using rule 5 (statements -> statement .)
    EXIT            reduce using rule 5 (statements -> statement .)
    WOOD            reduce using rule 5 (statements -> statement .)
    STEEL           reduce using rule 5 (statements -> statement .)
    GLASS           reduce using rule 5 (statements -> statement .)
    CONCRETE        reduce using rule 5 (statements -> statement .)
    PLASTIC         reduce using rule 5 (statements -> statement .)
    DOUBLE_QUOTE    reduce using rule 5 (statements -> statement .)
    QUOTE           reduce using rule 5 (statements -> statement .)
    MINUS           reduce using rule 5 (statements -> statement .)
    NEWLINE         reduce using rule 5 (statements -> statement .)
    $end            reduce using rule 5 (statements -> statement .)
    END             reduce using rule 5 (statements -> statement .)


state 4

    (6) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 55


state 5

    (7) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 56


state 6

    (8) statement -> while . NEWLINE

    NEWLINE         shift and go to state 57


state 7

    (9) statement -> if . NEWLINE

    NEWLINE         shift and go to state 58


state 8

    (10) statement -> command . NEWLINE

    NEWLINE         shift and go to state 59


state 9

    (11) statement -> function . NEWLINE

    NEWLINE         shift and go to state 60


state 10

    (12) statement -> call . NEWLINE
    (31) expression -> call .

    NEWLINE         shift and go to state 61
    TO              reduce using rule 31 (expression -> call .)
    PLUS            reduce using rule 31 (expression -> call .)
    MINUS           reduce using rule 31 (expression -> call .)
    LESS            reduce using rule 31 (expression -> call .)
    GREATER         reduce using rule 31 (expression -> call .)
    EQ              reduce using rule 31 (expression -> call .)
    NOTEQ           reduce using rule 31 (expression -> call .)


state 11

    (13) statement -> RETURN . NEWLINE

    NEWLINE         shift and go to state 62


state 12

    (14) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 63


state 13

    (15) declaration -> type . variables
    (20) variables -> . variable COMMA variables
    (21) variables -> . assignment COMMA variables
    (22) variables -> . variable
    (23) variables -> . assignment
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (24) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 67

    variables                      shift and go to state 64
    variable                       shift and go to state 65
    assignment                     shift and go to state 66

state 14

    (24) assignment -> variable . ASSIGNMENT expression
    (27) expression -> variable .

    ASSIGNMENT      shift and go to state 68
    TO              reduce using rule 27 (expression -> variable .)
    PLUS            reduce using rule 27 (expression -> variable .)
    MINUS           reduce using rule 27 (expression -> variable .)
    LESS            reduce using rule 27 (expression -> variable .)
    GREATER         reduce using rule 27 (expression -> variable .)
    EQ              reduce using rule 27 (expression -> variable .)
    NOTEQ           reduce using rule 27 (expression -> variable .)


state 15

    (60) converting_command -> expression . TO type
    (61) converting_command -> expression . TO expression
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    TO              shift and go to state 69
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 16

    (53) while -> DO . statements_group UNTIL expression
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 77
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statements_group               shift and go to state 76
    expression                     shift and go to state 15
    statement                      shift and go to state 78
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 17

    (54) if -> IF . expression THEN statements_group
    (55) if -> IF . expression THEN statements_group ELSE statements_group
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 79
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 18

    (57) command -> vector_command .

    NEWLINE         reduce using rule 57 (command -> vector_command .)


state 19

    (58) command -> robot_command .

    NEWLINE         reduce using rule 58 (command -> robot_command .)


state 20

    (59) command -> converting_command .

    NEWLINE         reduce using rule 59 (command -> converting_command .)


state 21

    (56) function -> FUNCTION . OF type VARIABLE LBRACKET parameters RBRACKET statements_group

    OF              shift and go to state 83


state 22

    (75) call -> VARIABLE . LBRACKET parameters RBRACKET
    (25) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (26) variable -> VARIABLE .

    LBRACKET        shift and go to state 84
    R_QBRACKET      shift and go to state 85
    ASSIGNMENT      reduce using rule 26 (variable -> VARIABLE .)
    TO              reduce using rule 26 (variable -> VARIABLE .)
    PLUS            reduce using rule 26 (variable -> VARIABLE .)
    MINUS           reduce using rule 26 (variable -> VARIABLE .)
    LESS            reduce using rule 26 (variable -> VARIABLE .)
    GREATER         reduce using rule 26 (variable -> VARIABLE .)
    EQ              reduce using rule 26 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 26 (variable -> VARIABLE .)


state 23

    (16) type -> INTEGER .

    VARIABLE        reduce using rule 16 (type -> INTEGER .)
    NEWLINE         reduce using rule 16 (type -> INTEGER .)


state 24

    (17) type -> STRING .

    VARIABLE        reduce using rule 17 (type -> STRING .)
    NEWLINE         reduce using rule 17 (type -> STRING .)


state 25

    (18) type -> BOOL .

    VARIABLE        reduce using rule 18 (type -> BOOL .)
    NEWLINE         reduce using rule 18 (type -> BOOL .)


state 26

    (19) type -> VECTOR . OF

    OF              shift and go to state 86


state 27

    (62) vector_command -> PUSH . BACK expression
    (64) vector_command -> PUSH . FRONT expression

    BACK            shift and go to state 87
    FRONT           shift and go to state 88


state 28

    (69) robot_command -> BACK .

    NEWLINE         reduce using rule 69 (robot_command -> BACK .)


state 29

    (63) vector_command -> POP . BACK expression
    (65) vector_command -> POP . FRONT expression

    BACK            shift and go to state 89
    FRONT           shift and go to state 90


state 30

    (66) robot_command -> LEFT .

    NEWLINE         reduce using rule 66 (robot_command -> LEFT .)


state 31

    (67) robot_command -> RIGHT .

    NEWLINE         reduce using rule 67 (robot_command -> RIGHT .)


state 32

    (68) robot_command -> FORWARD .

    NEWLINE         reduce using rule 68 (robot_command -> FORWARD .)


state 33

    (70) robot_command -> ROTATE_RIGHT .

    NEWLINE         reduce using rule 70 (robot_command -> ROTATE_RIGHT .)


state 34

    (71) robot_command -> ROTATE_LEFT .

    NEWLINE         reduce using rule 71 (robot_command -> ROTATE_LEFT .)


state 35

    (72) robot_command -> LMS .

    NEWLINE         reduce using rule 72 (robot_command -> LMS .)


state 36

    (73) robot_command -> REFLECT .

    NEWLINE         reduce using rule 73 (robot_command -> REFLECT .)


state 37

    (74) robot_command -> DRILL .

    NEWLINE         reduce using rule 74 (robot_command -> DRILL .)


state 38

    (28) expression -> const .

    TO              reduce using rule 28 (expression -> const .)
    PLUS            reduce using rule 28 (expression -> const .)
    MINUS           reduce using rule 28 (expression -> const .)
    LESS            reduce using rule 28 (expression -> const .)
    GREATER         reduce using rule 28 (expression -> const .)
    EQ              reduce using rule 28 (expression -> const .)
    NOTEQ           reduce using rule 28 (expression -> const .)
    THEN            reduce using rule 28 (expression -> const .)
    NEWLINE         reduce using rule 28 (expression -> const .)
    COMMA           reduce using rule 28 (expression -> const .)
    RBRACKET        reduce using rule 28 (expression -> const .)
    CONTINUE        reduce using rule 28 (expression -> const .)
    L_QBRACKET      reduce using rule 28 (expression -> const .)


state 39

    (29) expression -> qstring .

    TO              reduce using rule 29 (expression -> qstring .)
    PLUS            reduce using rule 29 (expression -> qstring .)
    MINUS           reduce using rule 29 (expression -> qstring .)
    LESS            reduce using rule 29 (expression -> qstring .)
    GREATER         reduce using rule 29 (expression -> qstring .)
    EQ              reduce using rule 29 (expression -> qstring .)
    NOTEQ           reduce using rule 29 (expression -> qstring .)
    THEN            reduce using rule 29 (expression -> qstring .)
    NEWLINE         reduce using rule 29 (expression -> qstring .)
    COMMA           reduce using rule 29 (expression -> qstring .)
    RBRACKET        reduce using rule 29 (expression -> qstring .)
    CONTINUE        reduce using rule 29 (expression -> qstring .)
    L_QBRACKET      reduce using rule 29 (expression -> qstring .)


state 40

    (30) expression -> math_expression .

    TO              reduce using rule 30 (expression -> math_expression .)
    PLUS            reduce using rule 30 (expression -> math_expression .)
    MINUS           reduce using rule 30 (expression -> math_expression .)
    LESS            reduce using rule 30 (expression -> math_expression .)
    GREATER         reduce using rule 30 (expression -> math_expression .)
    EQ              reduce using rule 30 (expression -> math_expression .)
    NOTEQ           reduce using rule 30 (expression -> math_expression .)
    THEN            reduce using rule 30 (expression -> math_expression .)
    NEWLINE         reduce using rule 30 (expression -> math_expression .)
    COMMA           reduce using rule 30 (expression -> math_expression .)
    RBRACKET        reduce using rule 30 (expression -> math_expression .)
    CONTINUE        reduce using rule 30 (expression -> math_expression .)
    L_QBRACKET      reduce using rule 30 (expression -> math_expression .)


state 41

    (36) const -> TRUE .

    TO              reduce using rule 36 (const -> TRUE .)
    PLUS            reduce using rule 36 (const -> TRUE .)
    MINUS           reduce using rule 36 (const -> TRUE .)
    LESS            reduce using rule 36 (const -> TRUE .)
    GREATER         reduce using rule 36 (const -> TRUE .)
    EQ              reduce using rule 36 (const -> TRUE .)
    NOTEQ           reduce using rule 36 (const -> TRUE .)
    THEN            reduce using rule 36 (const -> TRUE .)
    NEWLINE         reduce using rule 36 (const -> TRUE .)
    COMMA           reduce using rule 36 (const -> TRUE .)
    RBRACKET        reduce using rule 36 (const -> TRUE .)
    CONTINUE        reduce using rule 36 (const -> TRUE .)
    L_QBRACKET      reduce using rule 36 (const -> TRUE .)


state 42

    (37) const -> FALSE .

    TO              reduce using rule 37 (const -> FALSE .)
    PLUS            reduce using rule 37 (const -> FALSE .)
    MINUS           reduce using rule 37 (const -> FALSE .)
    LESS            reduce using rule 37 (const -> FALSE .)
    GREATER         reduce using rule 37 (const -> FALSE .)
    EQ              reduce using rule 37 (const -> FALSE .)
    NOTEQ           reduce using rule 37 (const -> FALSE .)
    THEN            reduce using rule 37 (const -> FALSE .)
    NEWLINE         reduce using rule 37 (const -> FALSE .)
    COMMA           reduce using rule 37 (const -> FALSE .)
    RBRACKET        reduce using rule 37 (const -> FALSE .)
    CONTINUE        reduce using rule 37 (const -> FALSE .)
    L_QBRACKET      reduce using rule 37 (const -> FALSE .)


state 43

    (38) const -> UNDEFINED .

    TO              reduce using rule 38 (const -> UNDEFINED .)
    PLUS            reduce using rule 38 (const -> UNDEFINED .)
    MINUS           reduce using rule 38 (const -> UNDEFINED .)
    LESS            reduce using rule 38 (const -> UNDEFINED .)
    GREATER         reduce using rule 38 (const -> UNDEFINED .)
    EQ              reduce using rule 38 (const -> UNDEFINED .)
    NOTEQ           reduce using rule 38 (const -> UNDEFINED .)
    THEN            reduce using rule 38 (const -> UNDEFINED .)
    NEWLINE         reduce using rule 38 (const -> UNDEFINED .)
    COMMA           reduce using rule 38 (const -> UNDEFINED .)
    RBRACKET        reduce using rule 38 (const -> UNDEFINED .)
    CONTINUE        reduce using rule 38 (const -> UNDEFINED .)
    L_QBRACKET      reduce using rule 38 (const -> UNDEFINED .)


state 44

    (39) const -> DECIMAL .

    TO              reduce using rule 39 (const -> DECIMAL .)
    PLUS            reduce using rule 39 (const -> DECIMAL .)
    MINUS           reduce using rule 39 (const -> DECIMAL .)
    LESS            reduce using rule 39 (const -> DECIMAL .)
    GREATER         reduce using rule 39 (const -> DECIMAL .)
    EQ              reduce using rule 39 (const -> DECIMAL .)
    NOTEQ           reduce using rule 39 (const -> DECIMAL .)
    THEN            reduce using rule 39 (const -> DECIMAL .)
    NEWLINE         reduce using rule 39 (const -> DECIMAL .)
    COMMA           reduce using rule 39 (const -> DECIMAL .)
    RBRACKET        reduce using rule 39 (const -> DECIMAL .)
    CONTINUE        reduce using rule 39 (const -> DECIMAL .)
    L_QBRACKET      reduce using rule 39 (const -> DECIMAL .)


state 45

    (40) const -> EXIT .

    TO              reduce using rule 40 (const -> EXIT .)
    PLUS            reduce using rule 40 (const -> EXIT .)
    MINUS           reduce using rule 40 (const -> EXIT .)
    LESS            reduce using rule 40 (const -> EXIT .)
    GREATER         reduce using rule 40 (const -> EXIT .)
    EQ              reduce using rule 40 (const -> EXIT .)
    NOTEQ           reduce using rule 40 (const -> EXIT .)
    THEN            reduce using rule 40 (const -> EXIT .)
    NEWLINE         reduce using rule 40 (const -> EXIT .)
    COMMA           reduce using rule 40 (const -> EXIT .)
    RBRACKET        reduce using rule 40 (const -> EXIT .)
    CONTINUE        reduce using rule 40 (const -> EXIT .)
    L_QBRACKET      reduce using rule 40 (const -> EXIT .)


state 46

    (41) const -> WOOD .

    TO              reduce using rule 41 (const -> WOOD .)
    PLUS            reduce using rule 41 (const -> WOOD .)
    MINUS           reduce using rule 41 (const -> WOOD .)
    LESS            reduce using rule 41 (const -> WOOD .)
    GREATER         reduce using rule 41 (const -> WOOD .)
    EQ              reduce using rule 41 (const -> WOOD .)
    NOTEQ           reduce using rule 41 (const -> WOOD .)
    THEN            reduce using rule 41 (const -> WOOD .)
    NEWLINE         reduce using rule 41 (const -> WOOD .)
    COMMA           reduce using rule 41 (const -> WOOD .)
    RBRACKET        reduce using rule 41 (const -> WOOD .)
    CONTINUE        reduce using rule 41 (const -> WOOD .)
    L_QBRACKET      reduce using rule 41 (const -> WOOD .)


state 47

    (42) const -> STEEL .

    TO              reduce using rule 42 (const -> STEEL .)
    PLUS            reduce using rule 42 (const -> STEEL .)
    MINUS           reduce using rule 42 (const -> STEEL .)
    LESS            reduce using rule 42 (const -> STEEL .)
    GREATER         reduce using rule 42 (const -> STEEL .)
    EQ              reduce using rule 42 (const -> STEEL .)
    NOTEQ           reduce using rule 42 (const -> STEEL .)
    THEN            reduce using rule 42 (const -> STEEL .)
    NEWLINE         reduce using rule 42 (const -> STEEL .)
    COMMA           reduce using rule 42 (const -> STEEL .)
    RBRACKET        reduce using rule 42 (const -> STEEL .)
    CONTINUE        reduce using rule 42 (const -> STEEL .)
    L_QBRACKET      reduce using rule 42 (const -> STEEL .)


state 48

    (43) const -> GLASS .

    TO              reduce using rule 43 (const -> GLASS .)
    PLUS            reduce using rule 43 (const -> GLASS .)
    MINUS           reduce using rule 43 (const -> GLASS .)
    LESS            reduce using rule 43 (const -> GLASS .)
    GREATER         reduce using rule 43 (const -> GLASS .)
    EQ              reduce using rule 43 (const -> GLASS .)
    NOTEQ           reduce using rule 43 (const -> GLASS .)
    THEN            reduce using rule 43 (const -> GLASS .)
    NEWLINE         reduce using rule 43 (const -> GLASS .)
    COMMA           reduce using rule 43 (const -> GLASS .)
    RBRACKET        reduce using rule 43 (const -> GLASS .)
    CONTINUE        reduce using rule 43 (const -> GLASS .)
    L_QBRACKET      reduce using rule 43 (const -> GLASS .)


state 49

    (44) const -> CONCRETE .

    TO              reduce using rule 44 (const -> CONCRETE .)
    PLUS            reduce using rule 44 (const -> CONCRETE .)
    MINUS           reduce using rule 44 (const -> CONCRETE .)
    LESS            reduce using rule 44 (const -> CONCRETE .)
    GREATER         reduce using rule 44 (const -> CONCRETE .)
    EQ              reduce using rule 44 (const -> CONCRETE .)
    NOTEQ           reduce using rule 44 (const -> CONCRETE .)
    THEN            reduce using rule 44 (const -> CONCRETE .)
    NEWLINE         reduce using rule 44 (const -> CONCRETE .)
    COMMA           reduce using rule 44 (const -> CONCRETE .)
    RBRACKET        reduce using rule 44 (const -> CONCRETE .)
    CONTINUE        reduce using rule 44 (const -> CONCRETE .)
    L_QBRACKET      reduce using rule 44 (const -> CONCRETE .)


state 50

    (45) const -> PLASTIC .

    TO              reduce using rule 45 (const -> PLASTIC .)
    PLUS            reduce using rule 45 (const -> PLASTIC .)
    MINUS           reduce using rule 45 (const -> PLASTIC .)
    LESS            reduce using rule 45 (const -> PLASTIC .)
    GREATER         reduce using rule 45 (const -> PLASTIC .)
    EQ              reduce using rule 45 (const -> PLASTIC .)
    NOTEQ           reduce using rule 45 (const -> PLASTIC .)
    THEN            reduce using rule 45 (const -> PLASTIC .)
    NEWLINE         reduce using rule 45 (const -> PLASTIC .)
    COMMA           reduce using rule 45 (const -> PLASTIC .)
    RBRACKET        reduce using rule 45 (const -> PLASTIC .)
    CONTINUE        reduce using rule 45 (const -> PLASTIC .)
    L_QBRACKET      reduce using rule 45 (const -> PLASTIC .)


state 51

    (32) qstring -> DOUBLE_QUOTE . string DOUBLE_QUOTE
    (34) string -> . string VARIABLE
    (35) string -> . VARIABLE

    VARIABLE        shift and go to state 92

    string                         shift and go to state 91

state 52

    (33) qstring -> QUOTE . string QUOTE
    (34) string -> . string VARIABLE
    (35) string -> . VARIABLE

    VARIABLE        shift and go to state 92

    string                         shift and go to state 93

state 53

    (48) math_expression -> MINUS . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 94
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 54

    (4) statements -> statements statement .

    RETURN          reduce using rule 4 (statements -> statements statement .)
    DO              reduce using rule 4 (statements -> statements statement .)
    IF              reduce using rule 4 (statements -> statements statement .)
    FUNCTION        reduce using rule 4 (statements -> statements statement .)
    VARIABLE        reduce using rule 4 (statements -> statements statement .)
    INTEGER         reduce using rule 4 (statements -> statements statement .)
    STRING          reduce using rule 4 (statements -> statements statement .)
    BOOL            reduce using rule 4 (statements -> statements statement .)
    VECTOR          reduce using rule 4 (statements -> statements statement .)
    PUSH            reduce using rule 4 (statements -> statements statement .)
    POP             reduce using rule 4 (statements -> statements statement .)
    LEFT            reduce using rule 4 (statements -> statements statement .)
    RIGHT           reduce using rule 4 (statements -> statements statement .)
    FORWARD         reduce using rule 4 (statements -> statements statement .)
    BACK            reduce using rule 4 (statements -> statements statement .)
    ROTATE_RIGHT    reduce using rule 4 (statements -> statements statement .)
    ROTATE_LEFT     reduce using rule 4 (statements -> statements statement .)
    LMS             reduce using rule 4 (statements -> statements statement .)
    REFLECT         reduce using rule 4 (statements -> statements statement .)
    DRILL           reduce using rule 4 (statements -> statements statement .)
    TRUE            reduce using rule 4 (statements -> statements statement .)
    FALSE           reduce using rule 4 (statements -> statements statement .)
    UNDEFINED       reduce using rule 4 (statements -> statements statement .)
    DECIMAL         reduce using rule 4 (statements -> statements statement .)
    EXIT            reduce using rule 4 (statements -> statements statement .)
    WOOD            reduce using rule 4 (statements -> statements statement .)
    STEEL           reduce using rule 4 (statements -> statements statement .)
    GLASS           reduce using rule 4 (statements -> statements statement .)
    CONCRETE        reduce using rule 4 (statements -> statements statement .)
    PLASTIC         reduce using rule 4 (statements -> statements statement .)
    DOUBLE_QUOTE    reduce using rule 4 (statements -> statements statement .)
    QUOTE           reduce using rule 4 (statements -> statements statement .)
    MINUS           reduce using rule 4 (statements -> statements statement .)
    NEWLINE         reduce using rule 4 (statements -> statements statement .)
    $end            reduce using rule 4 (statements -> statements statement .)
    END             reduce using rule 4 (statements -> statements statement .)


state 55

    (6) statement -> declaration NEWLINE .

    RETURN          reduce using rule 6 (statement -> declaration NEWLINE .)
    DO              reduce using rule 6 (statement -> declaration NEWLINE .)
    IF              reduce using rule 6 (statement -> declaration NEWLINE .)
    FUNCTION        reduce using rule 6 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 6 (statement -> declaration NEWLINE .)
    INTEGER         reduce using rule 6 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 6 (statement -> declaration NEWLINE .)
    BOOL            reduce using rule 6 (statement -> declaration NEWLINE .)
    VECTOR          reduce using rule 6 (statement -> declaration NEWLINE .)
    PUSH            reduce using rule 6 (statement -> declaration NEWLINE .)
    POP             reduce using rule 6 (statement -> declaration NEWLINE .)
    LEFT            reduce using rule 6 (statement -> declaration NEWLINE .)
    RIGHT           reduce using rule 6 (statement -> declaration NEWLINE .)
    FORWARD         reduce using rule 6 (statement -> declaration NEWLINE .)
    BACK            reduce using rule 6 (statement -> declaration NEWLINE .)
    ROTATE_RIGHT    reduce using rule 6 (statement -> declaration NEWLINE .)
    ROTATE_LEFT     reduce using rule 6 (statement -> declaration NEWLINE .)
    LMS             reduce using rule 6 (statement -> declaration NEWLINE .)
    REFLECT         reduce using rule 6 (statement -> declaration NEWLINE .)
    DRILL           reduce using rule 6 (statement -> declaration NEWLINE .)
    TRUE            reduce using rule 6 (statement -> declaration NEWLINE .)
    FALSE           reduce using rule 6 (statement -> declaration NEWLINE .)
    UNDEFINED       reduce using rule 6 (statement -> declaration NEWLINE .)
    DECIMAL         reduce using rule 6 (statement -> declaration NEWLINE .)
    EXIT            reduce using rule 6 (statement -> declaration NEWLINE .)
    WOOD            reduce using rule 6 (statement -> declaration NEWLINE .)
    STEEL           reduce using rule 6 (statement -> declaration NEWLINE .)
    GLASS           reduce using rule 6 (statement -> declaration NEWLINE .)
    CONCRETE        reduce using rule 6 (statement -> declaration NEWLINE .)
    PLASTIC         reduce using rule 6 (statement -> declaration NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 6 (statement -> declaration NEWLINE .)
    QUOTE           reduce using rule 6 (statement -> declaration NEWLINE .)
    MINUS           reduce using rule 6 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> declaration NEWLINE .)
    $end            reduce using rule 6 (statement -> declaration NEWLINE .)
    UNTIL           reduce using rule 6 (statement -> declaration NEWLINE .)
    END             reduce using rule 6 (statement -> declaration NEWLINE .)
    ELSE            reduce using rule 6 (statement -> declaration NEWLINE .)


state 56

    (7) statement -> assignment NEWLINE .

    RETURN          reduce using rule 7 (statement -> assignment NEWLINE .)
    DO              reduce using rule 7 (statement -> assignment NEWLINE .)
    IF              reduce using rule 7 (statement -> assignment NEWLINE .)
    FUNCTION        reduce using rule 7 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 7 (statement -> assignment NEWLINE .)
    INTEGER         reduce using rule 7 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 7 (statement -> assignment NEWLINE .)
    BOOL            reduce using rule 7 (statement -> assignment NEWLINE .)
    VECTOR          reduce using rule 7 (statement -> assignment NEWLINE .)
    PUSH            reduce using rule 7 (statement -> assignment NEWLINE .)
    POP             reduce using rule 7 (statement -> assignment NEWLINE .)
    LEFT            reduce using rule 7 (statement -> assignment NEWLINE .)
    RIGHT           reduce using rule 7 (statement -> assignment NEWLINE .)
    FORWARD         reduce using rule 7 (statement -> assignment NEWLINE .)
    BACK            reduce using rule 7 (statement -> assignment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 7 (statement -> assignment NEWLINE .)
    ROTATE_LEFT     reduce using rule 7 (statement -> assignment NEWLINE .)
    LMS             reduce using rule 7 (statement -> assignment NEWLINE .)
    REFLECT         reduce using rule 7 (statement -> assignment NEWLINE .)
    DRILL           reduce using rule 7 (statement -> assignment NEWLINE .)
    TRUE            reduce using rule 7 (statement -> assignment NEWLINE .)
    FALSE           reduce using rule 7 (statement -> assignment NEWLINE .)
    UNDEFINED       reduce using rule 7 (statement -> assignment NEWLINE .)
    DECIMAL         reduce using rule 7 (statement -> assignment NEWLINE .)
    EXIT            reduce using rule 7 (statement -> assignment NEWLINE .)
    WOOD            reduce using rule 7 (statement -> assignment NEWLINE .)
    STEEL           reduce using rule 7 (statement -> assignment NEWLINE .)
    GLASS           reduce using rule 7 (statement -> assignment NEWLINE .)
    CONCRETE        reduce using rule 7 (statement -> assignment NEWLINE .)
    PLASTIC         reduce using rule 7 (statement -> assignment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 7 (statement -> assignment NEWLINE .)
    QUOTE           reduce using rule 7 (statement -> assignment NEWLINE .)
    MINUS           reduce using rule 7 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> assignment NEWLINE .)
    $end            reduce using rule 7 (statement -> assignment NEWLINE .)
    UNTIL           reduce using rule 7 (statement -> assignment NEWLINE .)
    END             reduce using rule 7 (statement -> assignment NEWLINE .)
    ELSE            reduce using rule 7 (statement -> assignment NEWLINE .)


state 57

    (8) statement -> while NEWLINE .

    RETURN          reduce using rule 8 (statement -> while NEWLINE .)
    DO              reduce using rule 8 (statement -> while NEWLINE .)
    IF              reduce using rule 8 (statement -> while NEWLINE .)
    FUNCTION        reduce using rule 8 (statement -> while NEWLINE .)
    VARIABLE        reduce using rule 8 (statement -> while NEWLINE .)
    INTEGER         reduce using rule 8 (statement -> while NEWLINE .)
    STRING          reduce using rule 8 (statement -> while NEWLINE .)
    BOOL            reduce using rule 8 (statement -> while NEWLINE .)
    VECTOR          reduce using rule 8 (statement -> while NEWLINE .)
    PUSH            reduce using rule 8 (statement -> while NEWLINE .)
    POP             reduce using rule 8 (statement -> while NEWLINE .)
    LEFT            reduce using rule 8 (statement -> while NEWLINE .)
    RIGHT           reduce using rule 8 (statement -> while NEWLINE .)
    FORWARD         reduce using rule 8 (statement -> while NEWLINE .)
    BACK            reduce using rule 8 (statement -> while NEWLINE .)
    ROTATE_RIGHT    reduce using rule 8 (statement -> while NEWLINE .)
    ROTATE_LEFT     reduce using rule 8 (statement -> while NEWLINE .)
    LMS             reduce using rule 8 (statement -> while NEWLINE .)
    REFLECT         reduce using rule 8 (statement -> while NEWLINE .)
    DRILL           reduce using rule 8 (statement -> while NEWLINE .)
    TRUE            reduce using rule 8 (statement -> while NEWLINE .)
    FALSE           reduce using rule 8 (statement -> while NEWLINE .)
    UNDEFINED       reduce using rule 8 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 8 (statement -> while NEWLINE .)
    EXIT            reduce using rule 8 (statement -> while NEWLINE .)
    WOOD            reduce using rule 8 (statement -> while NEWLINE .)
    STEEL           reduce using rule 8 (statement -> while NEWLINE .)
    GLASS           reduce using rule 8 (statement -> while NEWLINE .)
    CONCRETE        reduce using rule 8 (statement -> while NEWLINE .)
    PLASTIC         reduce using rule 8 (statement -> while NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 8 (statement -> while NEWLINE .)
    QUOTE           reduce using rule 8 (statement -> while NEWLINE .)
    MINUS           reduce using rule 8 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> while NEWLINE .)
    $end            reduce using rule 8 (statement -> while NEWLINE .)
    UNTIL           reduce using rule 8 (statement -> while NEWLINE .)
    END             reduce using rule 8 (statement -> while NEWLINE .)
    ELSE            reduce using rule 8 (statement -> while NEWLINE .)


state 58

    (9) statement -> if NEWLINE .

    RETURN          reduce using rule 9 (statement -> if NEWLINE .)
    DO              reduce using rule 9 (statement -> if NEWLINE .)
    IF              reduce using rule 9 (statement -> if NEWLINE .)
    FUNCTION        reduce using rule 9 (statement -> if NEWLINE .)
    VARIABLE        reduce using rule 9 (statement -> if NEWLINE .)
    INTEGER         reduce using rule 9 (statement -> if NEWLINE .)
    STRING          reduce using rule 9 (statement -> if NEWLINE .)
    BOOL            reduce using rule 9 (statement -> if NEWLINE .)
    VECTOR          reduce using rule 9 (statement -> if NEWLINE .)
    PUSH            reduce using rule 9 (statement -> if NEWLINE .)
    POP             reduce using rule 9 (statement -> if NEWLINE .)
    LEFT            reduce using rule 9 (statement -> if NEWLINE .)
    RIGHT           reduce using rule 9 (statement -> if NEWLINE .)
    FORWARD         reduce using rule 9 (statement -> if NEWLINE .)
    BACK            reduce using rule 9 (statement -> if NEWLINE .)
    ROTATE_RIGHT    reduce using rule 9 (statement -> if NEWLINE .)
    ROTATE_LEFT     reduce using rule 9 (statement -> if NEWLINE .)
    LMS             reduce using rule 9 (statement -> if NEWLINE .)
    REFLECT         reduce using rule 9 (statement -> if NEWLINE .)
    DRILL           reduce using rule 9 (statement -> if NEWLINE .)
    TRUE            reduce using rule 9 (statement -> if NEWLINE .)
    FALSE           reduce using rule 9 (statement -> if NEWLINE .)
    UNDEFINED       reduce using rule 9 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 9 (statement -> if NEWLINE .)
    EXIT            reduce using rule 9 (statement -> if NEWLINE .)
    WOOD            reduce using rule 9 (statement -> if NEWLINE .)
    STEEL           reduce using rule 9 (statement -> if NEWLINE .)
    GLASS           reduce using rule 9 (statement -> if NEWLINE .)
    CONCRETE        reduce using rule 9 (statement -> if NEWLINE .)
    PLASTIC         reduce using rule 9 (statement -> if NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 9 (statement -> if NEWLINE .)
    QUOTE           reduce using rule 9 (statement -> if NEWLINE .)
    MINUS           reduce using rule 9 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> if NEWLINE .)
    $end            reduce using rule 9 (statement -> if NEWLINE .)
    UNTIL           reduce using rule 9 (statement -> if NEWLINE .)
    END             reduce using rule 9 (statement -> if NEWLINE .)
    ELSE            reduce using rule 9 (statement -> if NEWLINE .)


state 59

    (10) statement -> command NEWLINE .

    RETURN          reduce using rule 10 (statement -> command NEWLINE .)
    DO              reduce using rule 10 (statement -> command NEWLINE .)
    IF              reduce using rule 10 (statement -> command NEWLINE .)
    FUNCTION        reduce using rule 10 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 10 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 10 (statement -> command NEWLINE .)
    STRING          reduce using rule 10 (statement -> command NEWLINE .)
    BOOL            reduce using rule 10 (statement -> command NEWLINE .)
    VECTOR          reduce using rule 10 (statement -> command NEWLINE .)
    PUSH            reduce using rule 10 (statement -> command NEWLINE .)
    POP             reduce using rule 10 (statement -> command NEWLINE .)
    LEFT            reduce using rule 10 (statement -> command NEWLINE .)
    RIGHT           reduce using rule 10 (statement -> command NEWLINE .)
    FORWARD         reduce using rule 10 (statement -> command NEWLINE .)
    BACK            reduce using rule 10 (statement -> command NEWLINE .)
    ROTATE_RIGHT    reduce using rule 10 (statement -> command NEWLINE .)
    ROTATE_LEFT     reduce using rule 10 (statement -> command NEWLINE .)
    LMS             reduce using rule 10 (statement -> command NEWLINE .)
    REFLECT         reduce using rule 10 (statement -> command NEWLINE .)
    DRILL           reduce using rule 10 (statement -> command NEWLINE .)
    TRUE            reduce using rule 10 (statement -> command NEWLINE .)
    FALSE           reduce using rule 10 (statement -> command NEWLINE .)
    UNDEFINED       reduce using rule 10 (statement -> command NEWLINE .)
    DECIMAL         reduce using rule 10 (statement -> command NEWLINE .)
    EXIT            reduce using rule 10 (statement -> command NEWLINE .)
    WOOD            reduce using rule 10 (statement -> command NEWLINE .)
    STEEL           reduce using rule 10 (statement -> command NEWLINE .)
    GLASS           reduce using rule 10 (statement -> command NEWLINE .)
    CONCRETE        reduce using rule 10 (statement -> command NEWLINE .)
    PLASTIC         reduce using rule 10 (statement -> command NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 10 (statement -> command NEWLINE .)
    QUOTE           reduce using rule 10 (statement -> command NEWLINE .)
    MINUS           reduce using rule 10 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> command NEWLINE .)
    $end            reduce using rule 10 (statement -> command NEWLINE .)
    UNTIL           reduce using rule 10 (statement -> command NEWLINE .)
    END             reduce using rule 10 (statement -> command NEWLINE .)
    ELSE            reduce using rule 10 (statement -> command NEWLINE .)


state 60

    (11) statement -> function NEWLINE .

    RETURN          reduce using rule 11 (statement -> function NEWLINE .)
    DO              reduce using rule 11 (statement -> function NEWLINE .)
    IF              reduce using rule 11 (statement -> function NEWLINE .)
    FUNCTION        reduce using rule 11 (statement -> function NEWLINE .)
    VARIABLE        reduce using rule 11 (statement -> function NEWLINE .)
    INTEGER         reduce using rule 11 (statement -> function NEWLINE .)
    STRING          reduce using rule 11 (statement -> function NEWLINE .)
    BOOL            reduce using rule 11 (statement -> function NEWLINE .)
    VECTOR          reduce using rule 11 (statement -> function NEWLINE .)
    PUSH            reduce using rule 11 (statement -> function NEWLINE .)
    POP             reduce using rule 11 (statement -> function NEWLINE .)
    LEFT            reduce using rule 11 (statement -> function NEWLINE .)
    RIGHT           reduce using rule 11 (statement -> function NEWLINE .)
    FORWARD         reduce using rule 11 (statement -> function NEWLINE .)
    BACK            reduce using rule 11 (statement -> function NEWLINE .)
    ROTATE_RIGHT    reduce using rule 11 (statement -> function NEWLINE .)
    ROTATE_LEFT     reduce using rule 11 (statement -> function NEWLINE .)
    LMS             reduce using rule 11 (statement -> function NEWLINE .)
    REFLECT         reduce using rule 11 (statement -> function NEWLINE .)
    DRILL           reduce using rule 11 (statement -> function NEWLINE .)
    TRUE            reduce using rule 11 (statement -> function NEWLINE .)
    FALSE           reduce using rule 11 (statement -> function NEWLINE .)
    UNDEFINED       reduce using rule 11 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 11 (statement -> function NEWLINE .)
    EXIT            reduce using rule 11 (statement -> function NEWLINE .)
    WOOD            reduce using rule 11 (statement -> function NEWLINE .)
    STEEL           reduce using rule 11 (statement -> function NEWLINE .)
    GLASS           reduce using rule 11 (statement -> function NEWLINE .)
    CONCRETE        reduce using rule 11 (statement -> function NEWLINE .)
    PLASTIC         reduce using rule 11 (statement -> function NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 11 (statement -> function NEWLINE .)
    QUOTE           reduce using rule 11 (statement -> function NEWLINE .)
    MINUS           reduce using rule 11 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> function NEWLINE .)
    $end            reduce using rule 11 (statement -> function NEWLINE .)
    UNTIL           reduce using rule 11 (statement -> function NEWLINE .)
    END             reduce using rule 11 (statement -> function NEWLINE .)
    ELSE            reduce using rule 11 (statement -> function NEWLINE .)


state 61

    (12) statement -> call NEWLINE .

    RETURN          reduce using rule 12 (statement -> call NEWLINE .)
    DO              reduce using rule 12 (statement -> call NEWLINE .)
    IF              reduce using rule 12 (statement -> call NEWLINE .)
    FUNCTION        reduce using rule 12 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 12 (statement -> call NEWLINE .)
    INTEGER         reduce using rule 12 (statement -> call NEWLINE .)
    STRING          reduce using rule 12 (statement -> call NEWLINE .)
    BOOL            reduce using rule 12 (statement -> call NEWLINE .)
    VECTOR          reduce using rule 12 (statement -> call NEWLINE .)
    PUSH            reduce using rule 12 (statement -> call NEWLINE .)
    POP             reduce using rule 12 (statement -> call NEWLINE .)
    LEFT            reduce using rule 12 (statement -> call NEWLINE .)
    RIGHT           reduce using rule 12 (statement -> call NEWLINE .)
    FORWARD         reduce using rule 12 (statement -> call NEWLINE .)
    BACK            reduce using rule 12 (statement -> call NEWLINE .)
    ROTATE_RIGHT    reduce using rule 12 (statement -> call NEWLINE .)
    ROTATE_LEFT     reduce using rule 12 (statement -> call NEWLINE .)
    LMS             reduce using rule 12 (statement -> call NEWLINE .)
    REFLECT         reduce using rule 12 (statement -> call NEWLINE .)
    DRILL           reduce using rule 12 (statement -> call NEWLINE .)
    TRUE            reduce using rule 12 (statement -> call NEWLINE .)
    FALSE           reduce using rule 12 (statement -> call NEWLINE .)
    UNDEFINED       reduce using rule 12 (statement -> call NEWLINE .)
    DECIMAL         reduce using rule 12 (statement -> call NEWLINE .)
    EXIT            reduce using rule 12 (statement -> call NEWLINE .)
    WOOD            reduce using rule 12 (statement -> call NEWLINE .)
    STEEL           reduce using rule 12 (statement -> call NEWLINE .)
    GLASS           reduce using rule 12 (statement -> call NEWLINE .)
    CONCRETE        reduce using rule 12 (statement -> call NEWLINE .)
    PLASTIC         reduce using rule 12 (statement -> call NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 12 (statement -> call NEWLINE .)
    QUOTE           reduce using rule 12 (statement -> call NEWLINE .)
    MINUS           reduce using rule 12 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 12 (statement -> call NEWLINE .)
    $end            reduce using rule 12 (statement -> call NEWLINE .)
    UNTIL           reduce using rule 12 (statement -> call NEWLINE .)
    END             reduce using rule 12 (statement -> call NEWLINE .)
    ELSE            reduce using rule 12 (statement -> call NEWLINE .)


state 62

    (13) statement -> RETURN NEWLINE .

    RETURN          reduce using rule 13 (statement -> RETURN NEWLINE .)
    DO              reduce using rule 13 (statement -> RETURN NEWLINE .)
    IF              reduce using rule 13 (statement -> RETURN NEWLINE .)
    FUNCTION        reduce using rule 13 (statement -> RETURN NEWLINE .)
    VARIABLE        reduce using rule 13 (statement -> RETURN NEWLINE .)
    INTEGER         reduce using rule 13 (statement -> RETURN NEWLINE .)
    STRING          reduce using rule 13 (statement -> RETURN NEWLINE .)
    BOOL            reduce using rule 13 (statement -> RETURN NEWLINE .)
    VECTOR          reduce using rule 13 (statement -> RETURN NEWLINE .)
    PUSH            reduce using rule 13 (statement -> RETURN NEWLINE .)
    POP             reduce using rule 13 (statement -> RETURN NEWLINE .)
    LEFT            reduce using rule 13 (statement -> RETURN NEWLINE .)
    RIGHT           reduce using rule 13 (statement -> RETURN NEWLINE .)
    FORWARD         reduce using rule 13 (statement -> RETURN NEWLINE .)
    BACK            reduce using rule 13 (statement -> RETURN NEWLINE .)
    ROTATE_RIGHT    reduce using rule 13 (statement -> RETURN NEWLINE .)
    ROTATE_LEFT     reduce using rule 13 (statement -> RETURN NEWLINE .)
    LMS             reduce using rule 13 (statement -> RETURN NEWLINE .)
    REFLECT         reduce using rule 13 (statement -> RETURN NEWLINE .)
    DRILL           reduce using rule 13 (statement -> RETURN NEWLINE .)
    TRUE            reduce using rule 13 (statement -> RETURN NEWLINE .)
    FALSE           reduce using rule 13 (statement -> RETURN NEWLINE .)
    UNDEFINED       reduce using rule 13 (statement -> RETURN NEWLINE .)
    DECIMAL         reduce using rule 13 (statement -> RETURN NEWLINE .)
    EXIT            reduce using rule 13 (statement -> RETURN NEWLINE .)
    WOOD            reduce using rule 13 (statement -> RETURN NEWLINE .)
    STEEL           reduce using rule 13 (statement -> RETURN NEWLINE .)
    GLASS           reduce using rule 13 (statement -> RETURN NEWLINE .)
    CONCRETE        reduce using rule 13 (statement -> RETURN NEWLINE .)
    PLASTIC         reduce using rule 13 (statement -> RETURN NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 13 (statement -> RETURN NEWLINE .)
    QUOTE           reduce using rule 13 (statement -> RETURN NEWLINE .)
    MINUS           reduce using rule 13 (statement -> RETURN NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> RETURN NEWLINE .)
    $end            reduce using rule 13 (statement -> RETURN NEWLINE .)
    UNTIL           reduce using rule 13 (statement -> RETURN NEWLINE .)
    END             reduce using rule 13 (statement -> RETURN NEWLINE .)
    ELSE            reduce using rule 13 (statement -> RETURN NEWLINE .)


state 63

    (14) statement -> empty NEWLINE .

    RETURN          reduce using rule 14 (statement -> empty NEWLINE .)
    DO              reduce using rule 14 (statement -> empty NEWLINE .)
    IF              reduce using rule 14 (statement -> empty NEWLINE .)
    FUNCTION        reduce using rule 14 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 14 (statement -> empty NEWLINE .)
    INTEGER         reduce using rule 14 (statement -> empty NEWLINE .)
    STRING          reduce using rule 14 (statement -> empty NEWLINE .)
    BOOL            reduce using rule 14 (statement -> empty NEWLINE .)
    VECTOR          reduce using rule 14 (statement -> empty NEWLINE .)
    PUSH            reduce using rule 14 (statement -> empty NEWLINE .)
    POP             reduce using rule 14 (statement -> empty NEWLINE .)
    LEFT            reduce using rule 14 (statement -> empty NEWLINE .)
    RIGHT           reduce using rule 14 (statement -> empty NEWLINE .)
    FORWARD         reduce using rule 14 (statement -> empty NEWLINE .)
    BACK            reduce using rule 14 (statement -> empty NEWLINE .)
    ROTATE_RIGHT    reduce using rule 14 (statement -> empty NEWLINE .)
    ROTATE_LEFT     reduce using rule 14 (statement -> empty NEWLINE .)
    LMS             reduce using rule 14 (statement -> empty NEWLINE .)
    REFLECT         reduce using rule 14 (statement -> empty NEWLINE .)
    DRILL           reduce using rule 14 (statement -> empty NEWLINE .)
    TRUE            reduce using rule 14 (statement -> empty NEWLINE .)
    FALSE           reduce using rule 14 (statement -> empty NEWLINE .)
    UNDEFINED       reduce using rule 14 (statement -> empty NEWLINE .)
    DECIMAL         reduce using rule 14 (statement -> empty NEWLINE .)
    EXIT            reduce using rule 14 (statement -> empty NEWLINE .)
    WOOD            reduce using rule 14 (statement -> empty NEWLINE .)
    STEEL           reduce using rule 14 (statement -> empty NEWLINE .)
    GLASS           reduce using rule 14 (statement -> empty NEWLINE .)
    CONCRETE        reduce using rule 14 (statement -> empty NEWLINE .)
    PLASTIC         reduce using rule 14 (statement -> empty NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 14 (statement -> empty NEWLINE .)
    QUOTE           reduce using rule 14 (statement -> empty NEWLINE .)
    MINUS           reduce using rule 14 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 14 (statement -> empty NEWLINE .)
    $end            reduce using rule 14 (statement -> empty NEWLINE .)
    UNTIL           reduce using rule 14 (statement -> empty NEWLINE .)
    END             reduce using rule 14 (statement -> empty NEWLINE .)
    ELSE            reduce using rule 14 (statement -> empty NEWLINE .)


state 64

    (15) declaration -> type variables .

    NEWLINE         reduce using rule 15 (declaration -> type variables .)


state 65

    (20) variables -> variable . COMMA variables
    (22) variables -> variable .
    (24) assignment -> variable . ASSIGNMENT expression

    COMMA           shift and go to state 95
    NEWLINE         reduce using rule 22 (variables -> variable .)
    ASSIGNMENT      shift and go to state 68


state 66

    (21) variables -> assignment . COMMA variables
    (23) variables -> assignment .

    COMMA           shift and go to state 96
    NEWLINE         reduce using rule 23 (variables -> assignment .)


state 67

    (25) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (26) variable -> VARIABLE .

    R_QBRACKET      shift and go to state 85
    COMMA           reduce using rule 26 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 26 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 26 (variable -> VARIABLE .)


state 68

    (24) assignment -> variable ASSIGNMENT . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    variable                       shift and go to state 80
    expression                     shift and go to state 97
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 69

    (60) converting_command -> expression TO . type
    (61) converting_command -> expression TO . expression
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 98
    type                           shift and go to state 99
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 70

    (46) math_expression -> expression PLUS . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 100
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 71

    (47) math_expression -> expression MINUS . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 101
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 72

    (49) math_expression -> expression LESS . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 102
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 73

    (50) math_expression -> expression GREATER . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 103
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 74

    (51) math_expression -> expression EQ . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 104
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 75

    (52) math_expression -> expression NOTEQ . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 105
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 76

    (53) while -> DO statements_group . UNTIL expression

    UNTIL           shift and go to state 106


state 77

    (2) statements_group -> BEGIN . statements END
    (4) statements -> . statements statement
    (5) statements -> . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statements                     shift and go to state 107
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14
    expression                     shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 78

    (3) statements_group -> statement .

    UNTIL           reduce using rule 3 (statements_group -> statement .)
    ELSE            reduce using rule 3 (statements_group -> statement .)
    NEWLINE         reduce using rule 3 (statements_group -> statement .)


state 79

    (54) if -> IF expression . THEN statements_group
    (55) if -> IF expression . THEN statements_group ELSE statements_group
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    THEN            shift and go to state 108
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 80

    (27) expression -> variable .

    THEN            reduce using rule 27 (expression -> variable .)
    PLUS            reduce using rule 27 (expression -> variable .)
    MINUS           reduce using rule 27 (expression -> variable .)
    LESS            reduce using rule 27 (expression -> variable .)
    GREATER         reduce using rule 27 (expression -> variable .)
    EQ              reduce using rule 27 (expression -> variable .)
    NOTEQ           reduce using rule 27 (expression -> variable .)
    TO              reduce using rule 27 (expression -> variable .)
    NEWLINE         reduce using rule 27 (expression -> variable .)
    COMMA           reduce using rule 27 (expression -> variable .)
    RBRACKET        reduce using rule 27 (expression -> variable .)
    CONTINUE        reduce using rule 27 (expression -> variable .)
    L_QBRACKET      reduce using rule 27 (expression -> variable .)


state 81

    (31) expression -> call .

    THEN            reduce using rule 31 (expression -> call .)
    PLUS            reduce using rule 31 (expression -> call .)
    MINUS           reduce using rule 31 (expression -> call .)
    LESS            reduce using rule 31 (expression -> call .)
    GREATER         reduce using rule 31 (expression -> call .)
    EQ              reduce using rule 31 (expression -> call .)
    NOTEQ           reduce using rule 31 (expression -> call .)
    TO              reduce using rule 31 (expression -> call .)
    NEWLINE         reduce using rule 31 (expression -> call .)
    COMMA           reduce using rule 31 (expression -> call .)
    RBRACKET        reduce using rule 31 (expression -> call .)
    CONTINUE        reduce using rule 31 (expression -> call .)
    L_QBRACKET      reduce using rule 31 (expression -> call .)


state 82

    (25) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (26) variable -> VARIABLE .
    (75) call -> VARIABLE . LBRACKET parameters RBRACKET

    R_QBRACKET      shift and go to state 85
    THEN            reduce using rule 26 (variable -> VARIABLE .)
    PLUS            reduce using rule 26 (variable -> VARIABLE .)
    MINUS           reduce using rule 26 (variable -> VARIABLE .)
    LESS            reduce using rule 26 (variable -> VARIABLE .)
    GREATER         reduce using rule 26 (variable -> VARIABLE .)
    EQ              reduce using rule 26 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 26 (variable -> VARIABLE .)
    TO              reduce using rule 26 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 26 (variable -> VARIABLE .)
    COMMA           reduce using rule 26 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 26 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 26 (variable -> VARIABLE .)
    L_QBRACKET      reduce using rule 26 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 84


state 83

    (56) function -> FUNCTION OF . type VARIABLE LBRACKET parameters RBRACKET statements_group
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF

    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26

    type                           shift and go to state 109

state 84

    (75) call -> VARIABLE LBRACKET . parameters RBRACKET
    (77) parameters -> . parameters COMMA parameter
    (78) parameters -> . parameter
    (79) parameters -> . parameters CONTINUE
    (80) parameters -> . empty
    (81) parameter -> . expression
    (82) parameter -> . VARIABLE EQ expression
    (76) empty -> .
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 110
    RBRACKET        reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)
    CONTINUE        reduce using rule 76 (empty -> .)
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    parameters                     shift and go to state 111
    parameter                      shift and go to state 112
    empty                          shift and go to state 113
    expression                     shift and go to state 114
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 85

    (25) variable -> VARIABLE R_QBRACKET . expression L_QBRACKET
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 115
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 86

    (19) type -> VECTOR OF .

    VARIABLE        reduce using rule 19 (type -> VECTOR OF .)
    NEWLINE         reduce using rule 19 (type -> VECTOR OF .)


state 87

    (62) vector_command -> PUSH BACK . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 116
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 88

    (64) vector_command -> PUSH FRONT . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 117
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 89

    (63) vector_command -> POP BACK . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 118
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 90

    (65) vector_command -> POP FRONT . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 119
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 91

    (32) qstring -> DOUBLE_QUOTE string . DOUBLE_QUOTE
    (34) string -> string . VARIABLE

    DOUBLE_QUOTE    shift and go to state 120
    VARIABLE        shift and go to state 121


state 92

    (35) string -> VARIABLE .

    DOUBLE_QUOTE    reduce using rule 35 (string -> VARIABLE .)
    VARIABLE        reduce using rule 35 (string -> VARIABLE .)
    QUOTE           reduce using rule 35 (string -> VARIABLE .)


state 93

    (33) qstring -> QUOTE string . QUOTE
    (34) string -> string . VARIABLE

    QUOTE           shift and go to state 122
    VARIABLE        shift and go to state 121


state 94

    (48) math_expression -> MINUS expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 48 (math_expression -> MINUS expression .)
    THEN            reduce using rule 48 (math_expression -> MINUS expression .)
    NEWLINE         reduce using rule 48 (math_expression -> MINUS expression .)
    COMMA           reduce using rule 48 (math_expression -> MINUS expression .)
    RBRACKET        reduce using rule 48 (math_expression -> MINUS expression .)
    CONTINUE        reduce using rule 48 (math_expression -> MINUS expression .)
    L_QBRACKET      reduce using rule 48 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 48 (math_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 48 (math_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 48 (math_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 48 (math_expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 48 (math_expression -> MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 48 (math_expression -> MINUS expression .) ]


state 95

    (20) variables -> variable COMMA . variables
    (20) variables -> . variable COMMA variables
    (21) variables -> . assignment COMMA variables
    (22) variables -> . variable
    (23) variables -> . assignment
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (24) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 67

    variable                       shift and go to state 65
    variables                      shift and go to state 123
    assignment                     shift and go to state 66

state 96

    (21) variables -> assignment COMMA . variables
    (20) variables -> . variable COMMA variables
    (21) variables -> . assignment COMMA variables
    (22) variables -> . variable
    (23) variables -> . assignment
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (24) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 67

    assignment                     shift and go to state 66
    variables                      shift and go to state 124
    variable                       shift and go to state 65

state 97

    (24) assignment -> variable ASSIGNMENT expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 24 (assignment -> variable ASSIGNMENT expression .)
    COMMA           reduce using rule 24 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 98

    (61) converting_command -> expression TO expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 61 (converting_command -> expression TO expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 99

    (60) converting_command -> expression TO type .

    NEWLINE         reduce using rule 60 (converting_command -> expression TO type .)


state 100

    (46) math_expression -> expression PLUS expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 46 (math_expression -> expression PLUS expression .)
    THEN            reduce using rule 46 (math_expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 46 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 46 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 46 (math_expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 46 (math_expression -> expression PLUS expression .)
    L_QBRACKET      reduce using rule 46 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 46 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 46 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 46 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 46 (math_expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 46 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 46 (math_expression -> expression PLUS expression .) ]


state 101

    (47) math_expression -> expression MINUS expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 47 (math_expression -> expression MINUS expression .)
    THEN            reduce using rule 47 (math_expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 47 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 47 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 47 (math_expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 47 (math_expression -> expression MINUS expression .)
    L_QBRACKET      reduce using rule 47 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 47 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 47 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 47 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 47 (math_expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 47 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 47 (math_expression -> expression MINUS expression .) ]


state 102

    (49) math_expression -> expression LESS expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 49 (math_expression -> expression LESS expression .)
    THEN            reduce using rule 49 (math_expression -> expression LESS expression .)
    NEWLINE         reduce using rule 49 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 49 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 49 (math_expression -> expression LESS expression .)
    CONTINUE        reduce using rule 49 (math_expression -> expression LESS expression .)
    L_QBRACKET      reduce using rule 49 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 49 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 49 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 49 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 49 (math_expression -> expression LESS expression .) ]
  ! EQ              [ reduce using rule 49 (math_expression -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 49 (math_expression -> expression LESS expression .) ]


state 103

    (50) math_expression -> expression GREATER expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 50 (math_expression -> expression GREATER expression .)
    THEN            reduce using rule 50 (math_expression -> expression GREATER expression .)
    NEWLINE         reduce using rule 50 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 50 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 50 (math_expression -> expression GREATER expression .)
    CONTINUE        reduce using rule 50 (math_expression -> expression GREATER expression .)
    L_QBRACKET      reduce using rule 50 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 50 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 50 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 50 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 50 (math_expression -> expression GREATER expression .) ]
  ! EQ              [ reduce using rule 50 (math_expression -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 50 (math_expression -> expression GREATER expression .) ]


state 104

    (51) math_expression -> expression EQ expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 51 (math_expression -> expression EQ expression .)
    THEN            reduce using rule 51 (math_expression -> expression EQ expression .)
    NEWLINE         reduce using rule 51 (math_expression -> expression EQ expression .)
    COMMA           reduce using rule 51 (math_expression -> expression EQ expression .)
    RBRACKET        reduce using rule 51 (math_expression -> expression EQ expression .)
    CONTINUE        reduce using rule 51 (math_expression -> expression EQ expression .)
    L_QBRACKET      reduce using rule 51 (math_expression -> expression EQ expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 51 (math_expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 51 (math_expression -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 51 (math_expression -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 51 (math_expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 51 (math_expression -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 51 (math_expression -> expression EQ expression .) ]


state 105

    (52) math_expression -> expression NOTEQ expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 52 (math_expression -> expression NOTEQ expression .)
    THEN            reduce using rule 52 (math_expression -> expression NOTEQ expression .)
    NEWLINE         reduce using rule 52 (math_expression -> expression NOTEQ expression .)
    COMMA           reduce using rule 52 (math_expression -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 52 (math_expression -> expression NOTEQ expression .)
    CONTINUE        reduce using rule 52 (math_expression -> expression NOTEQ expression .)
    L_QBRACKET      reduce using rule 52 (math_expression -> expression NOTEQ expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 52 (math_expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 52 (math_expression -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 52 (math_expression -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 52 (math_expression -> expression NOTEQ expression .) ]
  ! EQ              [ reduce using rule 52 (math_expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 52 (math_expression -> expression NOTEQ expression .) ]


state 106

    (53) while -> DO statements_group UNTIL . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 125
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 107

    (2) statements_group -> BEGIN statements . END
    (4) statements -> statements . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    END             shift and go to state 126
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    statement                      shift and go to state 54
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14
    expression                     shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 108

    (54) if -> IF expression THEN . statements_group
    (55) if -> IF expression THEN . statements_group ELSE statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 77
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 15
    statements_group               shift and go to state 127
    statement                      shift and go to state 78
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 109

    (56) function -> FUNCTION OF type . VARIABLE LBRACKET parameters RBRACKET statements_group

    VARIABLE        shift and go to state 128


state 110

    (82) parameter -> VARIABLE . EQ expression
    (25) variable -> VARIABLE . R_QBRACKET expression L_QBRACKET
    (26) variable -> VARIABLE .
    (75) call -> VARIABLE . LBRACKET parameters RBRACKET

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 129
    R_QBRACKET      shift and go to state 85
    PLUS            reduce using rule 26 (variable -> VARIABLE .)
    MINUS           reduce using rule 26 (variable -> VARIABLE .)
    LESS            reduce using rule 26 (variable -> VARIABLE .)
    GREATER         reduce using rule 26 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 26 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 26 (variable -> VARIABLE .)
    COMMA           reduce using rule 26 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 26 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 84

  ! EQ              [ reduce using rule 26 (variable -> VARIABLE .) ]


state 111

    (75) call -> VARIABLE LBRACKET parameters . RBRACKET
    (77) parameters -> parameters . COMMA parameter
    (79) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 130
    COMMA           shift and go to state 131
    CONTINUE        shift and go to state 132


state 112

    (78) parameters -> parameter .

    RBRACKET        reduce using rule 78 (parameters -> parameter .)
    COMMA           reduce using rule 78 (parameters -> parameter .)
    CONTINUE        reduce using rule 78 (parameters -> parameter .)


state 113

    (80) parameters -> empty .

    RBRACKET        reduce using rule 80 (parameters -> empty .)
    COMMA           reduce using rule 80 (parameters -> empty .)
    CONTINUE        reduce using rule 80 (parameters -> empty .)


state 114

    (81) parameter -> expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 81 (parameter -> expression .)
    COMMA           reduce using rule 81 (parameter -> expression .)
    CONTINUE        reduce using rule 81 (parameter -> expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 115

    (25) variable -> VARIABLE R_QBRACKET expression . L_QBRACKET
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    L_QBRACKET      shift and go to state 133
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 116

    (62) vector_command -> PUSH BACK expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 62 (vector_command -> PUSH BACK expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 117

    (64) vector_command -> PUSH FRONT expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 64 (vector_command -> PUSH FRONT expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 118

    (63) vector_command -> POP BACK expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 63 (vector_command -> POP BACK expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 119

    (65) vector_command -> POP FRONT expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 65 (vector_command -> POP FRONT expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 120

    (32) qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .

    TO              reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    PLUS            reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    MINUS           reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    LESS            reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    GREATER         reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    EQ              reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NOTEQ           reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    THEN            reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NEWLINE         reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    COMMA           reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    RBRACKET        reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    CONTINUE        reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    L_QBRACKET      reduce using rule 32 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)


state 121

    (34) string -> string VARIABLE .

    DOUBLE_QUOTE    reduce using rule 34 (string -> string VARIABLE .)
    VARIABLE        reduce using rule 34 (string -> string VARIABLE .)
    QUOTE           reduce using rule 34 (string -> string VARIABLE .)


state 122

    (33) qstring -> QUOTE string QUOTE .

    TO              reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    PLUS            reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    MINUS           reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    LESS            reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    GREATER         reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    EQ              reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    NOTEQ           reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    THEN            reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    NEWLINE         reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    COMMA           reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    RBRACKET        reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    CONTINUE        reduce using rule 33 (qstring -> QUOTE string QUOTE .)
    L_QBRACKET      reduce using rule 33 (qstring -> QUOTE string QUOTE .)


state 123

    (20) variables -> variable COMMA variables .

    NEWLINE         reduce using rule 20 (variables -> variable COMMA variables .)


state 124

    (21) variables -> assignment COMMA variables .

    NEWLINE         reduce using rule 21 (variables -> assignment COMMA variables .)


state 125

    (53) while -> DO statements_group UNTIL expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 53 (while -> DO statements_group UNTIL expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 126

    (2) statements_group -> BEGIN statements END .

    UNTIL           reduce using rule 2 (statements_group -> BEGIN statements END .)
    ELSE            reduce using rule 2 (statements_group -> BEGIN statements END .)
    NEWLINE         reduce using rule 2 (statements_group -> BEGIN statements END .)


state 127

    (54) if -> IF expression THEN statements_group .
    (55) if -> IF expression THEN statements_group . ELSE statements_group

    NEWLINE         reduce using rule 54 (if -> IF expression THEN statements_group .)
    ELSE            shift and go to state 134


state 128

    (56) function -> FUNCTION OF type VARIABLE . LBRACKET parameters RBRACKET statements_group

    LBRACKET        shift and go to state 135


state 129

    (82) parameter -> VARIABLE EQ . expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 82
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 136
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 130

    (75) call -> VARIABLE LBRACKET parameters RBRACKET .

    NEWLINE         reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    TO              reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    PLUS            reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    MINUS           reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    LESS            reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    GREATER         reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    EQ              reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    NOTEQ           reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    THEN            reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    COMMA           reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    RBRACKET        reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    CONTINUE        reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    L_QBRACKET      reduce using rule 75 (call -> VARIABLE LBRACKET parameters RBRACKET .)


state 131

    (77) parameters -> parameters COMMA . parameter
    (81) parameter -> . expression
    (82) parameter -> . VARIABLE EQ expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 110
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    parameter                      shift and go to state 137
    expression                     shift and go to state 114
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 132

    (79) parameters -> parameters CONTINUE .

    RBRACKET        reduce using rule 79 (parameters -> parameters CONTINUE .)
    COMMA           reduce using rule 79 (parameters -> parameters CONTINUE .)
    CONTINUE        reduce using rule 79 (parameters -> parameters CONTINUE .)


state 133

    (25) variable -> VARIABLE R_QBRACKET expression L_QBRACKET .

    ASSIGNMENT      reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    TO              reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    PLUS            reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    MINUS           reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    LESS            reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    GREATER         reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    EQ              reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    NOTEQ           reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    COMMA           reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    NEWLINE         reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    THEN            reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    RBRACKET        reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    CONTINUE        reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)
    L_QBRACKET      reduce using rule 25 (variable -> VARIABLE R_QBRACKET expression L_QBRACKET .)


state 134

    (55) if -> IF expression THEN statements_group ELSE . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 77
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    expression                     shift and go to state 15
    statements_group               shift and go to state 138
    statement                      shift and go to state 78
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 135

    (56) function -> FUNCTION OF type VARIABLE LBRACKET . parameters RBRACKET statements_group
    (77) parameters -> . parameters COMMA parameter
    (78) parameters -> . parameter
    (79) parameters -> . parameters CONTINUE
    (80) parameters -> . empty
    (81) parameter -> . expression
    (82) parameter -> . VARIABLE EQ expression
    (76) empty -> .
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET

    VARIABLE        shift and go to state 110
    RBRACKET        reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)
    CONTINUE        reduce using rule 76 (empty -> .)
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    parameters                     shift and go to state 139
    parameter                      shift and go to state 112
    empty                          shift and go to state 113
    expression                     shift and go to state 114
    variable                       shift and go to state 80
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40
    call                           shift and go to state 81

state 136

    (82) parameter -> VARIABLE EQ expression .
    (46) math_expression -> expression . PLUS expression
    (47) math_expression -> expression . MINUS expression
    (49) math_expression -> expression . LESS expression
    (50) math_expression -> expression . GREATER expression
    (51) math_expression -> expression . EQ expression
    (52) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 82 (parameter -> VARIABLE EQ expression .)
    COMMA           reduce using rule 82 (parameter -> VARIABLE EQ expression .)
    CONTINUE        reduce using rule 82 (parameter -> VARIABLE EQ expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 137

    (77) parameters -> parameters COMMA parameter .

    RBRACKET        reduce using rule 77 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 77 (parameters -> parameters COMMA parameter .)
    CONTINUE        reduce using rule 77 (parameters -> parameters COMMA parameter .)


state 138

    (55) if -> IF expression THEN statements_group ELSE statements_group .

    NEWLINE         reduce using rule 55 (if -> IF expression THEN statements_group ELSE statements_group .)


state 139

    (56) function -> FUNCTION OF type VARIABLE LBRACKET parameters . RBRACKET statements_group
    (77) parameters -> parameters . COMMA parameter
    (79) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 140
    COMMA           shift and go to state 131
    CONTINUE        shift and go to state 132


state 140

    (56) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . statement
    (6) statement -> . declaration NEWLINE
    (7) statement -> . assignment NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . if NEWLINE
    (10) statement -> . command NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . call NEWLINE
    (13) statement -> . RETURN NEWLINE
    (14) statement -> . empty NEWLINE
    (15) declaration -> . type variables
    (24) assignment -> . variable ASSIGNMENT expression
    (53) while -> . DO statements_group UNTIL expression
    (54) if -> . IF expression THEN statements_group
    (55) if -> . IF expression THEN statements_group ELSE statements_group
    (57) command -> . vector_command
    (58) command -> . robot_command
    (59) command -> . converting_command
    (56) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (75) call -> . VARIABLE LBRACKET parameters RBRACKET
    (76) empty -> .
    (16) type -> . INTEGER
    (17) type -> . STRING
    (18) type -> . BOOL
    (19) type -> . VECTOR OF
    (25) variable -> . VARIABLE R_QBRACKET expression L_QBRACKET
    (26) variable -> . VARIABLE
    (62) vector_command -> . PUSH BACK expression
    (63) vector_command -> . POP BACK expression
    (64) vector_command -> . PUSH FRONT expression
    (65) vector_command -> . POP FRONT expression
    (66) robot_command -> . LEFT
    (67) robot_command -> . RIGHT
    (68) robot_command -> . FORWARD
    (69) robot_command -> . BACK
    (70) robot_command -> . ROTATE_RIGHT
    (71) robot_command -> . ROTATE_LEFT
    (72) robot_command -> . LMS
    (73) robot_command -> . REFLECT
    (74) robot_command -> . DRILL
    (60) converting_command -> . expression TO type
    (61) converting_command -> . expression TO expression
    (27) expression -> . variable
    (28) expression -> . const
    (29) expression -> . qstring
    (30) expression -> . math_expression
    (31) expression -> . call
    (36) const -> . TRUE
    (37) const -> . FALSE
    (38) const -> . UNDEFINED
    (39) const -> . DECIMAL
    (40) const -> . EXIT
    (41) const -> . WOOD
    (42) const -> . STEEL
    (43) const -> . GLASS
    (44) const -> . CONCRETE
    (45) const -> . PLASTIC
    (32) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (33) qstring -> . QUOTE string QUOTE
    (46) math_expression -> . expression PLUS expression
    (47) math_expression -> . expression MINUS expression
    (48) math_expression -> . MINUS expression
    (49) math_expression -> . expression LESS expression
    (50) math_expression -> . expression GREATER expression
    (51) math_expression -> . expression EQ expression
    (52) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 77
    RETURN          shift and go to state 11
    DO              shift and go to state 16
    IF              shift and go to state 17
    FUNCTION        shift and go to state 21
    VARIABLE        shift and go to state 22
    NEWLINE         reduce using rule 76 (empty -> .)
    INTEGER         shift and go to state 23
    STRING          shift and go to state 24
    BOOL            shift and go to state 25
    VECTOR          shift and go to state 26
    PUSH            shift and go to state 27
    POP             shift and go to state 29
    LEFT            shift and go to state 30
    RIGHT           shift and go to state 31
    FORWARD         shift and go to state 32
    BACK            shift and go to state 28
    ROTATE_RIGHT    shift and go to state 33
    ROTATE_LEFT     shift and go to state 34
    LMS             shift and go to state 35
    REFLECT         shift and go to state 36
    DRILL           shift and go to state 37
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    UNDEFINED       shift and go to state 43
    DECIMAL         shift and go to state 44
    EXIT            shift and go to state 45
    WOOD            shift and go to state 46
    STEEL           shift and go to state 47
    GLASS           shift and go to state 48
    CONCRETE        shift and go to state 49
    PLASTIC         shift and go to state 50
    DOUBLE_QUOTE    shift and go to state 51
    QUOTE           shift and go to state 52
    MINUS           shift and go to state 53

    type                           shift and go to state 13
    statements_group               shift and go to state 141
    statement                      shift and go to state 78
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    command                        shift and go to state 8
    function                       shift and go to state 9
    call                           shift and go to state 10
    empty                          shift and go to state 12
    variable                       shift and go to state 14
    expression                     shift and go to state 15
    vector_command                 shift and go to state 18
    robot_command                  shift and go to state 19
    converting_command             shift and go to state 20
    const                          shift and go to state 38
    qstring                        shift and go to state 39
    math_expression                shift and go to state 40

state 141

    (56) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .

    NEWLINE         reduce using rule 56 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
