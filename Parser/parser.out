Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements_group -> BEGIN statements END
Rule 3     statements_group -> inner_statement
Rule 4     inner_statement -> declaration
Rule 5     inner_statement -> assignment
Rule 6     inner_statement -> while
Rule 7     inner_statement -> if
Rule 8     inner_statement -> command
Rule 9     inner_statement -> function
Rule 10    inner_statement -> call
Rule 11    inner_statement -> RETURN expression
Rule 12    inner_statement -> empty
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> declaration NEWLINE
Rule 16    statement -> comment NEWLINE
Rule 17    statement -> assignment NEWLINE
Rule 18    statement -> while NEWLINE
Rule 19    statement -> if NEWLINE
Rule 20    statement -> command NEWLINE
Rule 21    statement -> function NEWLINE
Rule 22    statement -> call NEWLINE
Rule 23    statement -> RETURN expression NEWLINE
Rule 24    statement -> empty NEWLINE
Rule 25    statement -> errors NEWLINE
Rule 26    statement -> errors
Rule 27    declaration -> type variables
Rule 28    comment -> COMMENT any
Rule 29    any -> any VARIABLE
Rule 30    any -> VARIABLE
Rule 31    type -> INTEGER
Rule 32    type -> STRING
Rule 33    type -> BOOL
Rule 34    type -> VECTOR OF type
Rule 35    variables -> variable COMMA variables
Rule 36    variables -> assignment COMMA variables
Rule 37    variables -> variable
Rule 38    variables -> assignment
Rule 39    assignment -> variable ASSIGNMENT expression
Rule 40    variable -> VARIABLE L_QBRACKET expression R_QBRACKET
Rule 41    variable -> VARIABLE
Rule 42    expression -> variable
Rule 43    expression -> const
Rule 44    expression -> qstring
Rule 45    expression -> math_expression
Rule 46    expression -> call
Rule 47    qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE
Rule 48    qstring -> QUOTE string QUOTE
Rule 49    string -> string VARIABLE
Rule 50    string -> VARIABLE
Rule 51    const -> TRUE
Rule 52    const -> FALSE
Rule 53    const -> UNDEFINED
Rule 54    const -> DECIMAL
Rule 55    const -> EXIT
Rule 56    const -> WOOD
Rule 57    const -> STEEL
Rule 58    const -> GLASS
Rule 59    const -> CONCRETE
Rule 60    const -> PLASTIC
Rule 61    math_expression -> expression PLUS expression
Rule 62    math_expression -> expression MINUS expression
Rule 63    math_expression -> MINUS expression
Rule 64    math_expression -> expression LESS expression
Rule 65    math_expression -> expression GREATER expression
Rule 66    math_expression -> expression EQ expression
Rule 67    math_expression -> expression NOTEQ expression
Rule 68    while -> DO statements_group UNTIL expression
Rule 69    if -> IF expression THEN statements_group
Rule 70    if -> IF expression THEN statements_group ELSE statements_group
Rule 71    function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
Rule 72    function -> FUNCTION OF type VARIABLE BRACKETS statements_group
Rule 73    command -> vector_command
Rule 74    command -> robot_command
Rule 75    command -> converting_command
Rule 76    converting_command -> expression TO type
Rule 77    converting_command -> expression TO expression
Rule 78    vector_command -> VARIABLE PUSH BACK expression
Rule 79    vector_command -> VARIABLE POP BACK
Rule 80    vector_command -> VARIABLE PUSH FRONT expression
Rule 81    vector_command -> VARIABLE POP FRONT
Rule 82    robot_command -> LEFT
Rule 83    robot_command -> RIGHT
Rule 84    robot_command -> FORWARD
Rule 85    robot_command -> BACK
Rule 86    robot_command -> ROTATE_RIGHT
Rule 87    robot_command -> ROTATE_LEFT
Rule 88    robot_command -> LMS
Rule 89    robot_command -> REFLECT
Rule 90    robot_command -> DRILL
Rule 91    call -> VARIABLE LBRACKET parameters RBRACKET
Rule 92    call -> VARIABLE BRACKETS
Rule 93    empty -> <empty>
Rule 94    parameters -> parameters COMMA parameter
Rule 95    parameters -> parameter
Rule 96    parameters -> parameters CONTINUE
Rule 97    parameter -> expression
Rule 98    parameter -> VARIABLE EQ expression
Rule 99    errors -> errors error
Rule 100   errors -> error

Terminals, with rules where they appear

ASSIGNMENT           : 39
BACK                 : 78 79 85
BEGIN                : 2
BOOL                 : 33
BRACKETS             : 72 92
COMMA                : 35 36 94
COMMENT              : 28
CONCRETE             : 59
CONTINUE             : 96
DECIMAL              : 54
DO                   : 68
DOUBLE_QUOTE         : 47 47
DRILL                : 90
ELSE                 : 70
END                  : 2
EQ                   : 66 98
EXIT                 : 55
FALSE                : 52
FORWARD              : 84
FRONT                : 80 81
FUNCTION             : 71 72
GLASS                : 58
GREATER              : 65
IF                   : 69 70
INTEGER              : 31
LBRACKET             : 71 91
LEFT                 : 82
LESS                 : 64
LMS                  : 88
L_QBRACKET           : 40
MINUS                : 62 63
NEWLINE              : 15 16 17 18 19 20 21 22 23 24 25
NOTEQ                : 67
OF                   : 34 71 72
PLASTIC              : 60
PLUS                 : 61
POP                  : 79 81
PUSH                 : 78 80
QUOTE                : 48 48
RBRACKET             : 71 91
REFLECT              : 89
RETURN               : 11 23
RIGHT                : 83
ROTATE_LEFT          : 87
ROTATE_RIGHT         : 86
R_QBRACKET           : 40
STEEL                : 57
STRING               : 32
THEN                 : 69 70
TO                   : 76 77
TRUE                 : 51
UNDEFINED            : 53
UNTIL                : 68
VARIABLE             : 29 30 40 41 49 50 71 72 78 79 80 81 91 92 98
VECTOR               : 34
WOOD                 : 56
error                : 99 100

Nonterminals, with rules where they appear

any                  : 28 29
assignment           : 5 17 36 38
call                 : 10 22 46
command              : 8 20
comment              : 16
const                : 43
converting_command   : 75
declaration          : 4 15
empty                : 12 24
errors               : 25 26 99
expression           : 11 23 39 40 61 61 62 62 63 64 64 65 65 66 66 67 67 68 69 70 76 77 77 78 80 97 98
function             : 9 21
if                   : 7 19
inner_statement      : 3
math_expression      : 45
parameter            : 94 95
parameters           : 71 91 94 96
program              : 0
qstring              : 44
robot_command        : 74
statement            : 13 14
statements           : 1 2 13
statements_group     : 68 69 70 70 71 72
string               : 47 48 49
type                 : 27 34 71 72 76
variable             : 35 37 39 42
variables            : 27 35 36
vector_command       : 73
while                : 6 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (99) errors -> . errors error
    (100) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 93 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (99) errors -> . errors error
    (100) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    $end            reduce using rule 1 (program -> statements .)
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 93 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    statement                      shift and go to state 56
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 3

    (14) statements -> statement .

    RETURN          reduce using rule 14 (statements -> statement .)
    COMMENT         reduce using rule 14 (statements -> statement .)
    DO              reduce using rule 14 (statements -> statement .)
    IF              reduce using rule 14 (statements -> statement .)
    FUNCTION        reduce using rule 14 (statements -> statement .)
    VARIABLE        reduce using rule 14 (statements -> statement .)
    error           reduce using rule 14 (statements -> statement .)
    INTEGER         reduce using rule 14 (statements -> statement .)
    STRING          reduce using rule 14 (statements -> statement .)
    BOOL            reduce using rule 14 (statements -> statement .)
    VECTOR          reduce using rule 14 (statements -> statement .)
    LEFT            reduce using rule 14 (statements -> statement .)
    RIGHT           reduce using rule 14 (statements -> statement .)
    FORWARD         reduce using rule 14 (statements -> statement .)
    BACK            reduce using rule 14 (statements -> statement .)
    ROTATE_RIGHT    reduce using rule 14 (statements -> statement .)
    ROTATE_LEFT     reduce using rule 14 (statements -> statement .)
    LMS             reduce using rule 14 (statements -> statement .)
    REFLECT         reduce using rule 14 (statements -> statement .)
    DRILL           reduce using rule 14 (statements -> statement .)
    TRUE            reduce using rule 14 (statements -> statement .)
    FALSE           reduce using rule 14 (statements -> statement .)
    UNDEFINED       reduce using rule 14 (statements -> statement .)
    DECIMAL         reduce using rule 14 (statements -> statement .)
    EXIT            reduce using rule 14 (statements -> statement .)
    WOOD            reduce using rule 14 (statements -> statement .)
    STEEL           reduce using rule 14 (statements -> statement .)
    GLASS           reduce using rule 14 (statements -> statement .)
    CONCRETE        reduce using rule 14 (statements -> statement .)
    PLASTIC         reduce using rule 14 (statements -> statement .)
    DOUBLE_QUOTE    reduce using rule 14 (statements -> statement .)
    QUOTE           reduce using rule 14 (statements -> statement .)
    MINUS           reduce using rule 14 (statements -> statement .)
    NEWLINE         reduce using rule 14 (statements -> statement .)
    $end            reduce using rule 14 (statements -> statement .)
    END             reduce using rule 14 (statements -> statement .)


state 4

    (15) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 57


state 5

    (16) statement -> comment . NEWLINE

    NEWLINE         shift and go to state 58


state 6

    (17) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 59


state 7

    (18) statement -> while . NEWLINE

    NEWLINE         shift and go to state 60


state 8

    (19) statement -> if . NEWLINE

    NEWLINE         shift and go to state 61


state 9

    (20) statement -> command . NEWLINE

    NEWLINE         shift and go to state 62


state 10

    (21) statement -> function . NEWLINE

    NEWLINE         shift and go to state 63


state 11

    (22) statement -> call . NEWLINE
    (46) expression -> call .

    NEWLINE         shift and go to state 64
    TO              reduce using rule 46 (expression -> call .)
    PLUS            reduce using rule 46 (expression -> call .)
    MINUS           reduce using rule 46 (expression -> call .)
    LESS            reduce using rule 46 (expression -> call .)
    GREATER         reduce using rule 46 (expression -> call .)
    EQ              reduce using rule 46 (expression -> call .)
    NOTEQ           reduce using rule 46 (expression -> call .)


state 12

    (23) statement -> RETURN . expression NEWLINE
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 65
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 13

    (76) converting_command -> expression . TO type
    (77) converting_command -> expression . TO expression
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    TO              shift and go to state 69
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 14

    (24) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 76


state 15

    (25) statement -> errors . NEWLINE
    (26) statement -> errors .
    (99) errors -> errors . error

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for error resolved as shift
    NEWLINE         shift and go to state 77
    RETURN          reduce using rule 26 (statement -> errors .)
    COMMENT         reduce using rule 26 (statement -> errors .)
    DO              reduce using rule 26 (statement -> errors .)
    IF              reduce using rule 26 (statement -> errors .)
    FUNCTION        reduce using rule 26 (statement -> errors .)
    VARIABLE        reduce using rule 26 (statement -> errors .)
    INTEGER         reduce using rule 26 (statement -> errors .)
    STRING          reduce using rule 26 (statement -> errors .)
    BOOL            reduce using rule 26 (statement -> errors .)
    VECTOR          reduce using rule 26 (statement -> errors .)
    LEFT            reduce using rule 26 (statement -> errors .)
    RIGHT           reduce using rule 26 (statement -> errors .)
    FORWARD         reduce using rule 26 (statement -> errors .)
    BACK            reduce using rule 26 (statement -> errors .)
    ROTATE_RIGHT    reduce using rule 26 (statement -> errors .)
    ROTATE_LEFT     reduce using rule 26 (statement -> errors .)
    LMS             reduce using rule 26 (statement -> errors .)
    REFLECT         reduce using rule 26 (statement -> errors .)
    DRILL           reduce using rule 26 (statement -> errors .)
    TRUE            reduce using rule 26 (statement -> errors .)
    FALSE           reduce using rule 26 (statement -> errors .)
    UNDEFINED       reduce using rule 26 (statement -> errors .)
    DECIMAL         reduce using rule 26 (statement -> errors .)
    EXIT            reduce using rule 26 (statement -> errors .)
    WOOD            reduce using rule 26 (statement -> errors .)
    STEEL           reduce using rule 26 (statement -> errors .)
    GLASS           reduce using rule 26 (statement -> errors .)
    CONCRETE        reduce using rule 26 (statement -> errors .)
    PLASTIC         reduce using rule 26 (statement -> errors .)
    DOUBLE_QUOTE    reduce using rule 26 (statement -> errors .)
    QUOTE           reduce using rule 26 (statement -> errors .)
    MINUS           reduce using rule 26 (statement -> errors .)
    $end            reduce using rule 26 (statement -> errors .)
    END             reduce using rule 26 (statement -> errors .)
    error           shift and go to state 78

  ! error           [ reduce using rule 26 (statement -> errors .) ]
  ! NEWLINE         [ reduce using rule 26 (statement -> errors .) ]


state 16

    (27) declaration -> type . variables
    (35) variables -> . variable COMMA variables
    (36) variables -> . assignment COMMA variables
    (37) variables -> . variable
    (38) variables -> . assignment
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (39) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 82

    variables                      shift and go to state 79
    variable                       shift and go to state 80
    assignment                     shift and go to state 81

state 17

    (28) comment -> COMMENT . any
    (29) any -> . any VARIABLE
    (30) any -> . VARIABLE

    VARIABLE        shift and go to state 84

    any                            shift and go to state 83

state 18

    (39) assignment -> variable . ASSIGNMENT expression
    (42) expression -> variable .

    ASSIGNMENT      shift and go to state 85
    TO              reduce using rule 42 (expression -> variable .)
    PLUS            reduce using rule 42 (expression -> variable .)
    MINUS           reduce using rule 42 (expression -> variable .)
    LESS            reduce using rule 42 (expression -> variable .)
    GREATER         reduce using rule 42 (expression -> variable .)
    EQ              reduce using rule 42 (expression -> variable .)
    NOTEQ           reduce using rule 42 (expression -> variable .)


state 19

    (68) while -> DO . statements_group UNTIL expression
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 87
    RETURN          shift and go to state 96
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    UNTIL           reduce using rule 93 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    statements_group               shift and go to state 86
    expression                     shift and go to state 13
    inner_statement                shift and go to state 88
    declaration                    shift and go to state 89
    assignment                     shift and go to state 90
    while                          shift and go to state 91
    if                             shift and go to state 92
    command                        shift and go to state 93
    function                       shift and go to state 94
    call                           shift and go to state 95
    empty                          shift and go to state 97
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 20

    (69) if -> IF . expression THEN statements_group
    (70) if -> IF . expression THEN statements_group ELSE statements_group
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 98
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 21

    (73) command -> vector_command .

    NEWLINE         reduce using rule 73 (command -> vector_command .)
    UNTIL           reduce using rule 73 (command -> vector_command .)
    ELSE            reduce using rule 73 (command -> vector_command .)


state 22

    (74) command -> robot_command .

    NEWLINE         reduce using rule 74 (command -> robot_command .)
    UNTIL           reduce using rule 74 (command -> robot_command .)
    ELSE            reduce using rule 74 (command -> robot_command .)


state 23

    (75) command -> converting_command .

    NEWLINE         reduce using rule 75 (command -> converting_command .)
    UNTIL           reduce using rule 75 (command -> converting_command .)
    ELSE            reduce using rule 75 (command -> converting_command .)


state 24

    (71) function -> FUNCTION . OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> FUNCTION . OF type VARIABLE BRACKETS statements_group

    OF              shift and go to state 99


state 25

    (91) call -> VARIABLE . LBRACKET parameters RBRACKET
    (92) call -> VARIABLE . BRACKETS
    (40) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (41) variable -> VARIABLE .
    (78) vector_command -> VARIABLE . PUSH BACK expression
    (79) vector_command -> VARIABLE . POP BACK
    (80) vector_command -> VARIABLE . PUSH FRONT expression
    (81) vector_command -> VARIABLE . POP FRONT

    LBRACKET        shift and go to state 100
    BRACKETS        shift and go to state 101
    L_QBRACKET      shift and go to state 102
    ASSIGNMENT      reduce using rule 41 (variable -> VARIABLE .)
    TO              reduce using rule 41 (variable -> VARIABLE .)
    PLUS            reduce using rule 41 (variable -> VARIABLE .)
    MINUS           reduce using rule 41 (variable -> VARIABLE .)
    LESS            reduce using rule 41 (variable -> VARIABLE .)
    GREATER         reduce using rule 41 (variable -> VARIABLE .)
    EQ              reduce using rule 41 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 41 (variable -> VARIABLE .)
    PUSH            shift and go to state 103
    POP             shift and go to state 104


state 26

    (100) errors -> error .

    NEWLINE         reduce using rule 100 (errors -> error .)
    error           reduce using rule 100 (errors -> error .)
    RETURN          reduce using rule 100 (errors -> error .)
    COMMENT         reduce using rule 100 (errors -> error .)
    DO              reduce using rule 100 (errors -> error .)
    IF              reduce using rule 100 (errors -> error .)
    FUNCTION        reduce using rule 100 (errors -> error .)
    VARIABLE        reduce using rule 100 (errors -> error .)
    INTEGER         reduce using rule 100 (errors -> error .)
    STRING          reduce using rule 100 (errors -> error .)
    BOOL            reduce using rule 100 (errors -> error .)
    VECTOR          reduce using rule 100 (errors -> error .)
    LEFT            reduce using rule 100 (errors -> error .)
    RIGHT           reduce using rule 100 (errors -> error .)
    FORWARD         reduce using rule 100 (errors -> error .)
    BACK            reduce using rule 100 (errors -> error .)
    ROTATE_RIGHT    reduce using rule 100 (errors -> error .)
    ROTATE_LEFT     reduce using rule 100 (errors -> error .)
    LMS             reduce using rule 100 (errors -> error .)
    REFLECT         reduce using rule 100 (errors -> error .)
    DRILL           reduce using rule 100 (errors -> error .)
    TRUE            reduce using rule 100 (errors -> error .)
    FALSE           reduce using rule 100 (errors -> error .)
    UNDEFINED       reduce using rule 100 (errors -> error .)
    DECIMAL         reduce using rule 100 (errors -> error .)
    EXIT            reduce using rule 100 (errors -> error .)
    WOOD            reduce using rule 100 (errors -> error .)
    STEEL           reduce using rule 100 (errors -> error .)
    GLASS           reduce using rule 100 (errors -> error .)
    CONCRETE        reduce using rule 100 (errors -> error .)
    PLASTIC         reduce using rule 100 (errors -> error .)
    DOUBLE_QUOTE    reduce using rule 100 (errors -> error .)
    QUOTE           reduce using rule 100 (errors -> error .)
    MINUS           reduce using rule 100 (errors -> error .)
    $end            reduce using rule 100 (errors -> error .)
    END             reduce using rule 100 (errors -> error .)


state 27

    (31) type -> INTEGER .

    VARIABLE        reduce using rule 31 (type -> INTEGER .)
    NEWLINE         reduce using rule 31 (type -> INTEGER .)
    UNTIL           reduce using rule 31 (type -> INTEGER .)
    ELSE            reduce using rule 31 (type -> INTEGER .)


state 28

    (32) type -> STRING .

    VARIABLE        reduce using rule 32 (type -> STRING .)
    NEWLINE         reduce using rule 32 (type -> STRING .)
    UNTIL           reduce using rule 32 (type -> STRING .)
    ELSE            reduce using rule 32 (type -> STRING .)


state 29

    (33) type -> BOOL .

    VARIABLE        reduce using rule 33 (type -> BOOL .)
    NEWLINE         reduce using rule 33 (type -> BOOL .)
    UNTIL           reduce using rule 33 (type -> BOOL .)
    ELSE            reduce using rule 33 (type -> BOOL .)


state 30

    (34) type -> VECTOR . OF type

    OF              shift and go to state 105


state 31

    (85) robot_command -> BACK .

    NEWLINE         reduce using rule 85 (robot_command -> BACK .)
    UNTIL           reduce using rule 85 (robot_command -> BACK .)
    ELSE            reduce using rule 85 (robot_command -> BACK .)


state 32

    (82) robot_command -> LEFT .

    NEWLINE         reduce using rule 82 (robot_command -> LEFT .)
    UNTIL           reduce using rule 82 (robot_command -> LEFT .)
    ELSE            reduce using rule 82 (robot_command -> LEFT .)


state 33

    (83) robot_command -> RIGHT .

    NEWLINE         reduce using rule 83 (robot_command -> RIGHT .)
    UNTIL           reduce using rule 83 (robot_command -> RIGHT .)
    ELSE            reduce using rule 83 (robot_command -> RIGHT .)


state 34

    (84) robot_command -> FORWARD .

    NEWLINE         reduce using rule 84 (robot_command -> FORWARD .)
    UNTIL           reduce using rule 84 (robot_command -> FORWARD .)
    ELSE            reduce using rule 84 (robot_command -> FORWARD .)


state 35

    (86) robot_command -> ROTATE_RIGHT .

    NEWLINE         reduce using rule 86 (robot_command -> ROTATE_RIGHT .)
    UNTIL           reduce using rule 86 (robot_command -> ROTATE_RIGHT .)
    ELSE            reduce using rule 86 (robot_command -> ROTATE_RIGHT .)


state 36

    (87) robot_command -> ROTATE_LEFT .

    NEWLINE         reduce using rule 87 (robot_command -> ROTATE_LEFT .)
    UNTIL           reduce using rule 87 (robot_command -> ROTATE_LEFT .)
    ELSE            reduce using rule 87 (robot_command -> ROTATE_LEFT .)


state 37

    (88) robot_command -> LMS .

    NEWLINE         reduce using rule 88 (robot_command -> LMS .)
    UNTIL           reduce using rule 88 (robot_command -> LMS .)
    ELSE            reduce using rule 88 (robot_command -> LMS .)


state 38

    (89) robot_command -> REFLECT .

    NEWLINE         reduce using rule 89 (robot_command -> REFLECT .)
    UNTIL           reduce using rule 89 (robot_command -> REFLECT .)
    ELSE            reduce using rule 89 (robot_command -> REFLECT .)


state 39

    (90) robot_command -> DRILL .

    NEWLINE         reduce using rule 90 (robot_command -> DRILL .)
    UNTIL           reduce using rule 90 (robot_command -> DRILL .)
    ELSE            reduce using rule 90 (robot_command -> DRILL .)


state 40

    (43) expression -> const .

    TO              reduce using rule 43 (expression -> const .)
    PLUS            reduce using rule 43 (expression -> const .)
    MINUS           reduce using rule 43 (expression -> const .)
    LESS            reduce using rule 43 (expression -> const .)
    GREATER         reduce using rule 43 (expression -> const .)
    EQ              reduce using rule 43 (expression -> const .)
    NOTEQ           reduce using rule 43 (expression -> const .)
    NEWLINE         reduce using rule 43 (expression -> const .)
    THEN            reduce using rule 43 (expression -> const .)
    UNTIL           reduce using rule 43 (expression -> const .)
    ELSE            reduce using rule 43 (expression -> const .)
    COMMA           reduce using rule 43 (expression -> const .)
    RBRACKET        reduce using rule 43 (expression -> const .)
    CONTINUE        reduce using rule 43 (expression -> const .)
    R_QBRACKET      reduce using rule 43 (expression -> const .)


state 41

    (44) expression -> qstring .

    TO              reduce using rule 44 (expression -> qstring .)
    PLUS            reduce using rule 44 (expression -> qstring .)
    MINUS           reduce using rule 44 (expression -> qstring .)
    LESS            reduce using rule 44 (expression -> qstring .)
    GREATER         reduce using rule 44 (expression -> qstring .)
    EQ              reduce using rule 44 (expression -> qstring .)
    NOTEQ           reduce using rule 44 (expression -> qstring .)
    NEWLINE         reduce using rule 44 (expression -> qstring .)
    THEN            reduce using rule 44 (expression -> qstring .)
    UNTIL           reduce using rule 44 (expression -> qstring .)
    ELSE            reduce using rule 44 (expression -> qstring .)
    COMMA           reduce using rule 44 (expression -> qstring .)
    RBRACKET        reduce using rule 44 (expression -> qstring .)
    CONTINUE        reduce using rule 44 (expression -> qstring .)
    R_QBRACKET      reduce using rule 44 (expression -> qstring .)


state 42

    (45) expression -> math_expression .

    TO              reduce using rule 45 (expression -> math_expression .)
    PLUS            reduce using rule 45 (expression -> math_expression .)
    MINUS           reduce using rule 45 (expression -> math_expression .)
    LESS            reduce using rule 45 (expression -> math_expression .)
    GREATER         reduce using rule 45 (expression -> math_expression .)
    EQ              reduce using rule 45 (expression -> math_expression .)
    NOTEQ           reduce using rule 45 (expression -> math_expression .)
    NEWLINE         reduce using rule 45 (expression -> math_expression .)
    THEN            reduce using rule 45 (expression -> math_expression .)
    UNTIL           reduce using rule 45 (expression -> math_expression .)
    ELSE            reduce using rule 45 (expression -> math_expression .)
    COMMA           reduce using rule 45 (expression -> math_expression .)
    RBRACKET        reduce using rule 45 (expression -> math_expression .)
    CONTINUE        reduce using rule 45 (expression -> math_expression .)
    R_QBRACKET      reduce using rule 45 (expression -> math_expression .)


state 43

    (51) const -> TRUE .

    TO              reduce using rule 51 (const -> TRUE .)
    PLUS            reduce using rule 51 (const -> TRUE .)
    MINUS           reduce using rule 51 (const -> TRUE .)
    LESS            reduce using rule 51 (const -> TRUE .)
    GREATER         reduce using rule 51 (const -> TRUE .)
    EQ              reduce using rule 51 (const -> TRUE .)
    NOTEQ           reduce using rule 51 (const -> TRUE .)
    NEWLINE         reduce using rule 51 (const -> TRUE .)
    THEN            reduce using rule 51 (const -> TRUE .)
    UNTIL           reduce using rule 51 (const -> TRUE .)
    ELSE            reduce using rule 51 (const -> TRUE .)
    COMMA           reduce using rule 51 (const -> TRUE .)
    RBRACKET        reduce using rule 51 (const -> TRUE .)
    CONTINUE        reduce using rule 51 (const -> TRUE .)
    R_QBRACKET      reduce using rule 51 (const -> TRUE .)


state 44

    (52) const -> FALSE .

    TO              reduce using rule 52 (const -> FALSE .)
    PLUS            reduce using rule 52 (const -> FALSE .)
    MINUS           reduce using rule 52 (const -> FALSE .)
    LESS            reduce using rule 52 (const -> FALSE .)
    GREATER         reduce using rule 52 (const -> FALSE .)
    EQ              reduce using rule 52 (const -> FALSE .)
    NOTEQ           reduce using rule 52 (const -> FALSE .)
    NEWLINE         reduce using rule 52 (const -> FALSE .)
    THEN            reduce using rule 52 (const -> FALSE .)
    UNTIL           reduce using rule 52 (const -> FALSE .)
    ELSE            reduce using rule 52 (const -> FALSE .)
    COMMA           reduce using rule 52 (const -> FALSE .)
    RBRACKET        reduce using rule 52 (const -> FALSE .)
    CONTINUE        reduce using rule 52 (const -> FALSE .)
    R_QBRACKET      reduce using rule 52 (const -> FALSE .)


state 45

    (53) const -> UNDEFINED .

    TO              reduce using rule 53 (const -> UNDEFINED .)
    PLUS            reduce using rule 53 (const -> UNDEFINED .)
    MINUS           reduce using rule 53 (const -> UNDEFINED .)
    LESS            reduce using rule 53 (const -> UNDEFINED .)
    GREATER         reduce using rule 53 (const -> UNDEFINED .)
    EQ              reduce using rule 53 (const -> UNDEFINED .)
    NOTEQ           reduce using rule 53 (const -> UNDEFINED .)
    NEWLINE         reduce using rule 53 (const -> UNDEFINED .)
    THEN            reduce using rule 53 (const -> UNDEFINED .)
    UNTIL           reduce using rule 53 (const -> UNDEFINED .)
    ELSE            reduce using rule 53 (const -> UNDEFINED .)
    COMMA           reduce using rule 53 (const -> UNDEFINED .)
    RBRACKET        reduce using rule 53 (const -> UNDEFINED .)
    CONTINUE        reduce using rule 53 (const -> UNDEFINED .)
    R_QBRACKET      reduce using rule 53 (const -> UNDEFINED .)


state 46

    (54) const -> DECIMAL .

    TO              reduce using rule 54 (const -> DECIMAL .)
    PLUS            reduce using rule 54 (const -> DECIMAL .)
    MINUS           reduce using rule 54 (const -> DECIMAL .)
    LESS            reduce using rule 54 (const -> DECIMAL .)
    GREATER         reduce using rule 54 (const -> DECIMAL .)
    EQ              reduce using rule 54 (const -> DECIMAL .)
    NOTEQ           reduce using rule 54 (const -> DECIMAL .)
    NEWLINE         reduce using rule 54 (const -> DECIMAL .)
    THEN            reduce using rule 54 (const -> DECIMAL .)
    UNTIL           reduce using rule 54 (const -> DECIMAL .)
    ELSE            reduce using rule 54 (const -> DECIMAL .)
    COMMA           reduce using rule 54 (const -> DECIMAL .)
    RBRACKET        reduce using rule 54 (const -> DECIMAL .)
    CONTINUE        reduce using rule 54 (const -> DECIMAL .)
    R_QBRACKET      reduce using rule 54 (const -> DECIMAL .)


state 47

    (55) const -> EXIT .

    TO              reduce using rule 55 (const -> EXIT .)
    PLUS            reduce using rule 55 (const -> EXIT .)
    MINUS           reduce using rule 55 (const -> EXIT .)
    LESS            reduce using rule 55 (const -> EXIT .)
    GREATER         reduce using rule 55 (const -> EXIT .)
    EQ              reduce using rule 55 (const -> EXIT .)
    NOTEQ           reduce using rule 55 (const -> EXIT .)
    NEWLINE         reduce using rule 55 (const -> EXIT .)
    THEN            reduce using rule 55 (const -> EXIT .)
    UNTIL           reduce using rule 55 (const -> EXIT .)
    ELSE            reduce using rule 55 (const -> EXIT .)
    COMMA           reduce using rule 55 (const -> EXIT .)
    RBRACKET        reduce using rule 55 (const -> EXIT .)
    CONTINUE        reduce using rule 55 (const -> EXIT .)
    R_QBRACKET      reduce using rule 55 (const -> EXIT .)


state 48

    (56) const -> WOOD .

    TO              reduce using rule 56 (const -> WOOD .)
    PLUS            reduce using rule 56 (const -> WOOD .)
    MINUS           reduce using rule 56 (const -> WOOD .)
    LESS            reduce using rule 56 (const -> WOOD .)
    GREATER         reduce using rule 56 (const -> WOOD .)
    EQ              reduce using rule 56 (const -> WOOD .)
    NOTEQ           reduce using rule 56 (const -> WOOD .)
    NEWLINE         reduce using rule 56 (const -> WOOD .)
    THEN            reduce using rule 56 (const -> WOOD .)
    UNTIL           reduce using rule 56 (const -> WOOD .)
    ELSE            reduce using rule 56 (const -> WOOD .)
    COMMA           reduce using rule 56 (const -> WOOD .)
    RBRACKET        reduce using rule 56 (const -> WOOD .)
    CONTINUE        reduce using rule 56 (const -> WOOD .)
    R_QBRACKET      reduce using rule 56 (const -> WOOD .)


state 49

    (57) const -> STEEL .

    TO              reduce using rule 57 (const -> STEEL .)
    PLUS            reduce using rule 57 (const -> STEEL .)
    MINUS           reduce using rule 57 (const -> STEEL .)
    LESS            reduce using rule 57 (const -> STEEL .)
    GREATER         reduce using rule 57 (const -> STEEL .)
    EQ              reduce using rule 57 (const -> STEEL .)
    NOTEQ           reduce using rule 57 (const -> STEEL .)
    NEWLINE         reduce using rule 57 (const -> STEEL .)
    THEN            reduce using rule 57 (const -> STEEL .)
    UNTIL           reduce using rule 57 (const -> STEEL .)
    ELSE            reduce using rule 57 (const -> STEEL .)
    COMMA           reduce using rule 57 (const -> STEEL .)
    RBRACKET        reduce using rule 57 (const -> STEEL .)
    CONTINUE        reduce using rule 57 (const -> STEEL .)
    R_QBRACKET      reduce using rule 57 (const -> STEEL .)


state 50

    (58) const -> GLASS .

    TO              reduce using rule 58 (const -> GLASS .)
    PLUS            reduce using rule 58 (const -> GLASS .)
    MINUS           reduce using rule 58 (const -> GLASS .)
    LESS            reduce using rule 58 (const -> GLASS .)
    GREATER         reduce using rule 58 (const -> GLASS .)
    EQ              reduce using rule 58 (const -> GLASS .)
    NOTEQ           reduce using rule 58 (const -> GLASS .)
    NEWLINE         reduce using rule 58 (const -> GLASS .)
    THEN            reduce using rule 58 (const -> GLASS .)
    UNTIL           reduce using rule 58 (const -> GLASS .)
    ELSE            reduce using rule 58 (const -> GLASS .)
    COMMA           reduce using rule 58 (const -> GLASS .)
    RBRACKET        reduce using rule 58 (const -> GLASS .)
    CONTINUE        reduce using rule 58 (const -> GLASS .)
    R_QBRACKET      reduce using rule 58 (const -> GLASS .)


state 51

    (59) const -> CONCRETE .

    TO              reduce using rule 59 (const -> CONCRETE .)
    PLUS            reduce using rule 59 (const -> CONCRETE .)
    MINUS           reduce using rule 59 (const -> CONCRETE .)
    LESS            reduce using rule 59 (const -> CONCRETE .)
    GREATER         reduce using rule 59 (const -> CONCRETE .)
    EQ              reduce using rule 59 (const -> CONCRETE .)
    NOTEQ           reduce using rule 59 (const -> CONCRETE .)
    NEWLINE         reduce using rule 59 (const -> CONCRETE .)
    THEN            reduce using rule 59 (const -> CONCRETE .)
    UNTIL           reduce using rule 59 (const -> CONCRETE .)
    ELSE            reduce using rule 59 (const -> CONCRETE .)
    COMMA           reduce using rule 59 (const -> CONCRETE .)
    RBRACKET        reduce using rule 59 (const -> CONCRETE .)
    CONTINUE        reduce using rule 59 (const -> CONCRETE .)
    R_QBRACKET      reduce using rule 59 (const -> CONCRETE .)


state 52

    (60) const -> PLASTIC .

    TO              reduce using rule 60 (const -> PLASTIC .)
    PLUS            reduce using rule 60 (const -> PLASTIC .)
    MINUS           reduce using rule 60 (const -> PLASTIC .)
    LESS            reduce using rule 60 (const -> PLASTIC .)
    GREATER         reduce using rule 60 (const -> PLASTIC .)
    EQ              reduce using rule 60 (const -> PLASTIC .)
    NOTEQ           reduce using rule 60 (const -> PLASTIC .)
    NEWLINE         reduce using rule 60 (const -> PLASTIC .)
    THEN            reduce using rule 60 (const -> PLASTIC .)
    UNTIL           reduce using rule 60 (const -> PLASTIC .)
    ELSE            reduce using rule 60 (const -> PLASTIC .)
    COMMA           reduce using rule 60 (const -> PLASTIC .)
    RBRACKET        reduce using rule 60 (const -> PLASTIC .)
    CONTINUE        reduce using rule 60 (const -> PLASTIC .)
    R_QBRACKET      reduce using rule 60 (const -> PLASTIC .)


state 53

    (47) qstring -> DOUBLE_QUOTE . string DOUBLE_QUOTE
    (49) string -> . string VARIABLE
    (50) string -> . VARIABLE

    VARIABLE        shift and go to state 107

    string                         shift and go to state 106

state 54

    (48) qstring -> QUOTE . string QUOTE
    (49) string -> . string VARIABLE
    (50) string -> . VARIABLE

    VARIABLE        shift and go to state 107

    string                         shift and go to state 108

state 55

    (63) math_expression -> MINUS . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 109
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 56

    (13) statements -> statements statement .

    RETURN          reduce using rule 13 (statements -> statements statement .)
    COMMENT         reduce using rule 13 (statements -> statements statement .)
    DO              reduce using rule 13 (statements -> statements statement .)
    IF              reduce using rule 13 (statements -> statements statement .)
    FUNCTION        reduce using rule 13 (statements -> statements statement .)
    VARIABLE        reduce using rule 13 (statements -> statements statement .)
    error           reduce using rule 13 (statements -> statements statement .)
    INTEGER         reduce using rule 13 (statements -> statements statement .)
    STRING          reduce using rule 13 (statements -> statements statement .)
    BOOL            reduce using rule 13 (statements -> statements statement .)
    VECTOR          reduce using rule 13 (statements -> statements statement .)
    LEFT            reduce using rule 13 (statements -> statements statement .)
    RIGHT           reduce using rule 13 (statements -> statements statement .)
    FORWARD         reduce using rule 13 (statements -> statements statement .)
    BACK            reduce using rule 13 (statements -> statements statement .)
    ROTATE_RIGHT    reduce using rule 13 (statements -> statements statement .)
    ROTATE_LEFT     reduce using rule 13 (statements -> statements statement .)
    LMS             reduce using rule 13 (statements -> statements statement .)
    REFLECT         reduce using rule 13 (statements -> statements statement .)
    DRILL           reduce using rule 13 (statements -> statements statement .)
    TRUE            reduce using rule 13 (statements -> statements statement .)
    FALSE           reduce using rule 13 (statements -> statements statement .)
    UNDEFINED       reduce using rule 13 (statements -> statements statement .)
    DECIMAL         reduce using rule 13 (statements -> statements statement .)
    EXIT            reduce using rule 13 (statements -> statements statement .)
    WOOD            reduce using rule 13 (statements -> statements statement .)
    STEEL           reduce using rule 13 (statements -> statements statement .)
    GLASS           reduce using rule 13 (statements -> statements statement .)
    CONCRETE        reduce using rule 13 (statements -> statements statement .)
    PLASTIC         reduce using rule 13 (statements -> statements statement .)
    DOUBLE_QUOTE    reduce using rule 13 (statements -> statements statement .)
    QUOTE           reduce using rule 13 (statements -> statements statement .)
    MINUS           reduce using rule 13 (statements -> statements statement .)
    NEWLINE         reduce using rule 13 (statements -> statements statement .)
    $end            reduce using rule 13 (statements -> statements statement .)
    END             reduce using rule 13 (statements -> statements statement .)


state 57

    (15) statement -> declaration NEWLINE .

    RETURN          reduce using rule 15 (statement -> declaration NEWLINE .)
    COMMENT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DO              reduce using rule 15 (statement -> declaration NEWLINE .)
    IF              reduce using rule 15 (statement -> declaration NEWLINE .)
    FUNCTION        reduce using rule 15 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 15 (statement -> declaration NEWLINE .)
    error           reduce using rule 15 (statement -> declaration NEWLINE .)
    INTEGER         reduce using rule 15 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 15 (statement -> declaration NEWLINE .)
    BOOL            reduce using rule 15 (statement -> declaration NEWLINE .)
    VECTOR          reduce using rule 15 (statement -> declaration NEWLINE .)
    LEFT            reduce using rule 15 (statement -> declaration NEWLINE .)
    RIGHT           reduce using rule 15 (statement -> declaration NEWLINE .)
    FORWARD         reduce using rule 15 (statement -> declaration NEWLINE .)
    BACK            reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_RIGHT    reduce using rule 15 (statement -> declaration NEWLINE .)
    ROTATE_LEFT     reduce using rule 15 (statement -> declaration NEWLINE .)
    LMS             reduce using rule 15 (statement -> declaration NEWLINE .)
    REFLECT         reduce using rule 15 (statement -> declaration NEWLINE .)
    DRILL           reduce using rule 15 (statement -> declaration NEWLINE .)
    TRUE            reduce using rule 15 (statement -> declaration NEWLINE .)
    FALSE           reduce using rule 15 (statement -> declaration NEWLINE .)
    UNDEFINED       reduce using rule 15 (statement -> declaration NEWLINE .)
    DECIMAL         reduce using rule 15 (statement -> declaration NEWLINE .)
    EXIT            reduce using rule 15 (statement -> declaration NEWLINE .)
    WOOD            reduce using rule 15 (statement -> declaration NEWLINE .)
    STEEL           reduce using rule 15 (statement -> declaration NEWLINE .)
    GLASS           reduce using rule 15 (statement -> declaration NEWLINE .)
    CONCRETE        reduce using rule 15 (statement -> declaration NEWLINE .)
    PLASTIC         reduce using rule 15 (statement -> declaration NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 15 (statement -> declaration NEWLINE .)
    QUOTE           reduce using rule 15 (statement -> declaration NEWLINE .)
    MINUS           reduce using rule 15 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 15 (statement -> declaration NEWLINE .)
    $end            reduce using rule 15 (statement -> declaration NEWLINE .)
    END             reduce using rule 15 (statement -> declaration NEWLINE .)


state 58

    (16) statement -> comment NEWLINE .

    RETURN          reduce using rule 16 (statement -> comment NEWLINE .)
    COMMENT         reduce using rule 16 (statement -> comment NEWLINE .)
    DO              reduce using rule 16 (statement -> comment NEWLINE .)
    IF              reduce using rule 16 (statement -> comment NEWLINE .)
    FUNCTION        reduce using rule 16 (statement -> comment NEWLINE .)
    VARIABLE        reduce using rule 16 (statement -> comment NEWLINE .)
    error           reduce using rule 16 (statement -> comment NEWLINE .)
    INTEGER         reduce using rule 16 (statement -> comment NEWLINE .)
    STRING          reduce using rule 16 (statement -> comment NEWLINE .)
    BOOL            reduce using rule 16 (statement -> comment NEWLINE .)
    VECTOR          reduce using rule 16 (statement -> comment NEWLINE .)
    LEFT            reduce using rule 16 (statement -> comment NEWLINE .)
    RIGHT           reduce using rule 16 (statement -> comment NEWLINE .)
    FORWARD         reduce using rule 16 (statement -> comment NEWLINE .)
    BACK            reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 16 (statement -> comment NEWLINE .)
    ROTATE_LEFT     reduce using rule 16 (statement -> comment NEWLINE .)
    LMS             reduce using rule 16 (statement -> comment NEWLINE .)
    REFLECT         reduce using rule 16 (statement -> comment NEWLINE .)
    DRILL           reduce using rule 16 (statement -> comment NEWLINE .)
    TRUE            reduce using rule 16 (statement -> comment NEWLINE .)
    FALSE           reduce using rule 16 (statement -> comment NEWLINE .)
    UNDEFINED       reduce using rule 16 (statement -> comment NEWLINE .)
    DECIMAL         reduce using rule 16 (statement -> comment NEWLINE .)
    EXIT            reduce using rule 16 (statement -> comment NEWLINE .)
    WOOD            reduce using rule 16 (statement -> comment NEWLINE .)
    STEEL           reduce using rule 16 (statement -> comment NEWLINE .)
    GLASS           reduce using rule 16 (statement -> comment NEWLINE .)
    CONCRETE        reduce using rule 16 (statement -> comment NEWLINE .)
    PLASTIC         reduce using rule 16 (statement -> comment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 16 (statement -> comment NEWLINE .)
    QUOTE           reduce using rule 16 (statement -> comment NEWLINE .)
    MINUS           reduce using rule 16 (statement -> comment NEWLINE .)
    NEWLINE         reduce using rule 16 (statement -> comment NEWLINE .)
    $end            reduce using rule 16 (statement -> comment NEWLINE .)
    END             reduce using rule 16 (statement -> comment NEWLINE .)


state 59

    (17) statement -> assignment NEWLINE .

    RETURN          reduce using rule 17 (statement -> assignment NEWLINE .)
    COMMENT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DO              reduce using rule 17 (statement -> assignment NEWLINE .)
    IF              reduce using rule 17 (statement -> assignment NEWLINE .)
    FUNCTION        reduce using rule 17 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 17 (statement -> assignment NEWLINE .)
    error           reduce using rule 17 (statement -> assignment NEWLINE .)
    INTEGER         reduce using rule 17 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 17 (statement -> assignment NEWLINE .)
    BOOL            reduce using rule 17 (statement -> assignment NEWLINE .)
    VECTOR          reduce using rule 17 (statement -> assignment NEWLINE .)
    LEFT            reduce using rule 17 (statement -> assignment NEWLINE .)
    RIGHT           reduce using rule 17 (statement -> assignment NEWLINE .)
    FORWARD         reduce using rule 17 (statement -> assignment NEWLINE .)
    BACK            reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_RIGHT    reduce using rule 17 (statement -> assignment NEWLINE .)
    ROTATE_LEFT     reduce using rule 17 (statement -> assignment NEWLINE .)
    LMS             reduce using rule 17 (statement -> assignment NEWLINE .)
    REFLECT         reduce using rule 17 (statement -> assignment NEWLINE .)
    DRILL           reduce using rule 17 (statement -> assignment NEWLINE .)
    TRUE            reduce using rule 17 (statement -> assignment NEWLINE .)
    FALSE           reduce using rule 17 (statement -> assignment NEWLINE .)
    UNDEFINED       reduce using rule 17 (statement -> assignment NEWLINE .)
    DECIMAL         reduce using rule 17 (statement -> assignment NEWLINE .)
    EXIT            reduce using rule 17 (statement -> assignment NEWLINE .)
    WOOD            reduce using rule 17 (statement -> assignment NEWLINE .)
    STEEL           reduce using rule 17 (statement -> assignment NEWLINE .)
    GLASS           reduce using rule 17 (statement -> assignment NEWLINE .)
    CONCRETE        reduce using rule 17 (statement -> assignment NEWLINE .)
    PLASTIC         reduce using rule 17 (statement -> assignment NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 17 (statement -> assignment NEWLINE .)
    QUOTE           reduce using rule 17 (statement -> assignment NEWLINE .)
    MINUS           reduce using rule 17 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 17 (statement -> assignment NEWLINE .)
    $end            reduce using rule 17 (statement -> assignment NEWLINE .)
    END             reduce using rule 17 (statement -> assignment NEWLINE .)


state 60

    (18) statement -> while NEWLINE .

    RETURN          reduce using rule 18 (statement -> while NEWLINE .)
    COMMENT         reduce using rule 18 (statement -> while NEWLINE .)
    DO              reduce using rule 18 (statement -> while NEWLINE .)
    IF              reduce using rule 18 (statement -> while NEWLINE .)
    FUNCTION        reduce using rule 18 (statement -> while NEWLINE .)
    VARIABLE        reduce using rule 18 (statement -> while NEWLINE .)
    error           reduce using rule 18 (statement -> while NEWLINE .)
    INTEGER         reduce using rule 18 (statement -> while NEWLINE .)
    STRING          reduce using rule 18 (statement -> while NEWLINE .)
    BOOL            reduce using rule 18 (statement -> while NEWLINE .)
    VECTOR          reduce using rule 18 (statement -> while NEWLINE .)
    LEFT            reduce using rule 18 (statement -> while NEWLINE .)
    RIGHT           reduce using rule 18 (statement -> while NEWLINE .)
    FORWARD         reduce using rule 18 (statement -> while NEWLINE .)
    BACK            reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_RIGHT    reduce using rule 18 (statement -> while NEWLINE .)
    ROTATE_LEFT     reduce using rule 18 (statement -> while NEWLINE .)
    LMS             reduce using rule 18 (statement -> while NEWLINE .)
    REFLECT         reduce using rule 18 (statement -> while NEWLINE .)
    DRILL           reduce using rule 18 (statement -> while NEWLINE .)
    TRUE            reduce using rule 18 (statement -> while NEWLINE .)
    FALSE           reduce using rule 18 (statement -> while NEWLINE .)
    UNDEFINED       reduce using rule 18 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 18 (statement -> while NEWLINE .)
    EXIT            reduce using rule 18 (statement -> while NEWLINE .)
    WOOD            reduce using rule 18 (statement -> while NEWLINE .)
    STEEL           reduce using rule 18 (statement -> while NEWLINE .)
    GLASS           reduce using rule 18 (statement -> while NEWLINE .)
    CONCRETE        reduce using rule 18 (statement -> while NEWLINE .)
    PLASTIC         reduce using rule 18 (statement -> while NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 18 (statement -> while NEWLINE .)
    QUOTE           reduce using rule 18 (statement -> while NEWLINE .)
    MINUS           reduce using rule 18 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 18 (statement -> while NEWLINE .)
    $end            reduce using rule 18 (statement -> while NEWLINE .)
    END             reduce using rule 18 (statement -> while NEWLINE .)


state 61

    (19) statement -> if NEWLINE .

    RETURN          reduce using rule 19 (statement -> if NEWLINE .)
    COMMENT         reduce using rule 19 (statement -> if NEWLINE .)
    DO              reduce using rule 19 (statement -> if NEWLINE .)
    IF              reduce using rule 19 (statement -> if NEWLINE .)
    FUNCTION        reduce using rule 19 (statement -> if NEWLINE .)
    VARIABLE        reduce using rule 19 (statement -> if NEWLINE .)
    error           reduce using rule 19 (statement -> if NEWLINE .)
    INTEGER         reduce using rule 19 (statement -> if NEWLINE .)
    STRING          reduce using rule 19 (statement -> if NEWLINE .)
    BOOL            reduce using rule 19 (statement -> if NEWLINE .)
    VECTOR          reduce using rule 19 (statement -> if NEWLINE .)
    LEFT            reduce using rule 19 (statement -> if NEWLINE .)
    RIGHT           reduce using rule 19 (statement -> if NEWLINE .)
    FORWARD         reduce using rule 19 (statement -> if NEWLINE .)
    BACK            reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_RIGHT    reduce using rule 19 (statement -> if NEWLINE .)
    ROTATE_LEFT     reduce using rule 19 (statement -> if NEWLINE .)
    LMS             reduce using rule 19 (statement -> if NEWLINE .)
    REFLECT         reduce using rule 19 (statement -> if NEWLINE .)
    DRILL           reduce using rule 19 (statement -> if NEWLINE .)
    TRUE            reduce using rule 19 (statement -> if NEWLINE .)
    FALSE           reduce using rule 19 (statement -> if NEWLINE .)
    UNDEFINED       reduce using rule 19 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 19 (statement -> if NEWLINE .)
    EXIT            reduce using rule 19 (statement -> if NEWLINE .)
    WOOD            reduce using rule 19 (statement -> if NEWLINE .)
    STEEL           reduce using rule 19 (statement -> if NEWLINE .)
    GLASS           reduce using rule 19 (statement -> if NEWLINE .)
    CONCRETE        reduce using rule 19 (statement -> if NEWLINE .)
    PLASTIC         reduce using rule 19 (statement -> if NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 19 (statement -> if NEWLINE .)
    QUOTE           reduce using rule 19 (statement -> if NEWLINE .)
    MINUS           reduce using rule 19 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 19 (statement -> if NEWLINE .)
    $end            reduce using rule 19 (statement -> if NEWLINE .)
    END             reduce using rule 19 (statement -> if NEWLINE .)


state 62

    (20) statement -> command NEWLINE .

    RETURN          reduce using rule 20 (statement -> command NEWLINE .)
    COMMENT         reduce using rule 20 (statement -> command NEWLINE .)
    DO              reduce using rule 20 (statement -> command NEWLINE .)
    IF              reduce using rule 20 (statement -> command NEWLINE .)
    FUNCTION        reduce using rule 20 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 20 (statement -> command NEWLINE .)
    error           reduce using rule 20 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 20 (statement -> command NEWLINE .)
    STRING          reduce using rule 20 (statement -> command NEWLINE .)
    BOOL            reduce using rule 20 (statement -> command NEWLINE .)
    VECTOR          reduce using rule 20 (statement -> command NEWLINE .)
    LEFT            reduce using rule 20 (statement -> command NEWLINE .)
    RIGHT           reduce using rule 20 (statement -> command NEWLINE .)
    FORWARD         reduce using rule 20 (statement -> command NEWLINE .)
    BACK            reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_RIGHT    reduce using rule 20 (statement -> command NEWLINE .)
    ROTATE_LEFT     reduce using rule 20 (statement -> command NEWLINE .)
    LMS             reduce using rule 20 (statement -> command NEWLINE .)
    REFLECT         reduce using rule 20 (statement -> command NEWLINE .)
    DRILL           reduce using rule 20 (statement -> command NEWLINE .)
    TRUE            reduce using rule 20 (statement -> command NEWLINE .)
    FALSE           reduce using rule 20 (statement -> command NEWLINE .)
    UNDEFINED       reduce using rule 20 (statement -> command NEWLINE .)
    DECIMAL         reduce using rule 20 (statement -> command NEWLINE .)
    EXIT            reduce using rule 20 (statement -> command NEWLINE .)
    WOOD            reduce using rule 20 (statement -> command NEWLINE .)
    STEEL           reduce using rule 20 (statement -> command NEWLINE .)
    GLASS           reduce using rule 20 (statement -> command NEWLINE .)
    CONCRETE        reduce using rule 20 (statement -> command NEWLINE .)
    PLASTIC         reduce using rule 20 (statement -> command NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 20 (statement -> command NEWLINE .)
    QUOTE           reduce using rule 20 (statement -> command NEWLINE .)
    MINUS           reduce using rule 20 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 20 (statement -> command NEWLINE .)
    $end            reduce using rule 20 (statement -> command NEWLINE .)
    END             reduce using rule 20 (statement -> command NEWLINE .)


state 63

    (21) statement -> function NEWLINE .

    RETURN          reduce using rule 21 (statement -> function NEWLINE .)
    COMMENT         reduce using rule 21 (statement -> function NEWLINE .)
    DO              reduce using rule 21 (statement -> function NEWLINE .)
    IF              reduce using rule 21 (statement -> function NEWLINE .)
    FUNCTION        reduce using rule 21 (statement -> function NEWLINE .)
    VARIABLE        reduce using rule 21 (statement -> function NEWLINE .)
    error           reduce using rule 21 (statement -> function NEWLINE .)
    INTEGER         reduce using rule 21 (statement -> function NEWLINE .)
    STRING          reduce using rule 21 (statement -> function NEWLINE .)
    BOOL            reduce using rule 21 (statement -> function NEWLINE .)
    VECTOR          reduce using rule 21 (statement -> function NEWLINE .)
    LEFT            reduce using rule 21 (statement -> function NEWLINE .)
    RIGHT           reduce using rule 21 (statement -> function NEWLINE .)
    FORWARD         reduce using rule 21 (statement -> function NEWLINE .)
    BACK            reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_RIGHT    reduce using rule 21 (statement -> function NEWLINE .)
    ROTATE_LEFT     reduce using rule 21 (statement -> function NEWLINE .)
    LMS             reduce using rule 21 (statement -> function NEWLINE .)
    REFLECT         reduce using rule 21 (statement -> function NEWLINE .)
    DRILL           reduce using rule 21 (statement -> function NEWLINE .)
    TRUE            reduce using rule 21 (statement -> function NEWLINE .)
    FALSE           reduce using rule 21 (statement -> function NEWLINE .)
    UNDEFINED       reduce using rule 21 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 21 (statement -> function NEWLINE .)
    EXIT            reduce using rule 21 (statement -> function NEWLINE .)
    WOOD            reduce using rule 21 (statement -> function NEWLINE .)
    STEEL           reduce using rule 21 (statement -> function NEWLINE .)
    GLASS           reduce using rule 21 (statement -> function NEWLINE .)
    CONCRETE        reduce using rule 21 (statement -> function NEWLINE .)
    PLASTIC         reduce using rule 21 (statement -> function NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 21 (statement -> function NEWLINE .)
    QUOTE           reduce using rule 21 (statement -> function NEWLINE .)
    MINUS           reduce using rule 21 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 21 (statement -> function NEWLINE .)
    $end            reduce using rule 21 (statement -> function NEWLINE .)
    END             reduce using rule 21 (statement -> function NEWLINE .)


state 64

    (22) statement -> call NEWLINE .

    RETURN          reduce using rule 22 (statement -> call NEWLINE .)
    COMMENT         reduce using rule 22 (statement -> call NEWLINE .)
    DO              reduce using rule 22 (statement -> call NEWLINE .)
    IF              reduce using rule 22 (statement -> call NEWLINE .)
    FUNCTION        reduce using rule 22 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 22 (statement -> call NEWLINE .)
    error           reduce using rule 22 (statement -> call NEWLINE .)
    INTEGER         reduce using rule 22 (statement -> call NEWLINE .)
    STRING          reduce using rule 22 (statement -> call NEWLINE .)
    BOOL            reduce using rule 22 (statement -> call NEWLINE .)
    VECTOR          reduce using rule 22 (statement -> call NEWLINE .)
    LEFT            reduce using rule 22 (statement -> call NEWLINE .)
    RIGHT           reduce using rule 22 (statement -> call NEWLINE .)
    FORWARD         reduce using rule 22 (statement -> call NEWLINE .)
    BACK            reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_RIGHT    reduce using rule 22 (statement -> call NEWLINE .)
    ROTATE_LEFT     reduce using rule 22 (statement -> call NEWLINE .)
    LMS             reduce using rule 22 (statement -> call NEWLINE .)
    REFLECT         reduce using rule 22 (statement -> call NEWLINE .)
    DRILL           reduce using rule 22 (statement -> call NEWLINE .)
    TRUE            reduce using rule 22 (statement -> call NEWLINE .)
    FALSE           reduce using rule 22 (statement -> call NEWLINE .)
    UNDEFINED       reduce using rule 22 (statement -> call NEWLINE .)
    DECIMAL         reduce using rule 22 (statement -> call NEWLINE .)
    EXIT            reduce using rule 22 (statement -> call NEWLINE .)
    WOOD            reduce using rule 22 (statement -> call NEWLINE .)
    STEEL           reduce using rule 22 (statement -> call NEWLINE .)
    GLASS           reduce using rule 22 (statement -> call NEWLINE .)
    CONCRETE        reduce using rule 22 (statement -> call NEWLINE .)
    PLASTIC         reduce using rule 22 (statement -> call NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 22 (statement -> call NEWLINE .)
    QUOTE           reduce using rule 22 (statement -> call NEWLINE .)
    MINUS           reduce using rule 22 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 22 (statement -> call NEWLINE .)
    $end            reduce using rule 22 (statement -> call NEWLINE .)
    END             reduce using rule 22 (statement -> call NEWLINE .)


state 65

    (23) statement -> RETURN expression . NEWLINE
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    NEWLINE         shift and go to state 110
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 66

    (42) expression -> variable .

    NEWLINE         reduce using rule 42 (expression -> variable .)
    PLUS            reduce using rule 42 (expression -> variable .)
    MINUS           reduce using rule 42 (expression -> variable .)
    LESS            reduce using rule 42 (expression -> variable .)
    GREATER         reduce using rule 42 (expression -> variable .)
    EQ              reduce using rule 42 (expression -> variable .)
    NOTEQ           reduce using rule 42 (expression -> variable .)
    THEN            reduce using rule 42 (expression -> variable .)
    TO              reduce using rule 42 (expression -> variable .)
    UNTIL           reduce using rule 42 (expression -> variable .)
    ELSE            reduce using rule 42 (expression -> variable .)
    COMMA           reduce using rule 42 (expression -> variable .)
    RBRACKET        reduce using rule 42 (expression -> variable .)
    CONTINUE        reduce using rule 42 (expression -> variable .)
    R_QBRACKET      reduce using rule 42 (expression -> variable .)


state 67

    (46) expression -> call .

    NEWLINE         reduce using rule 46 (expression -> call .)
    PLUS            reduce using rule 46 (expression -> call .)
    MINUS           reduce using rule 46 (expression -> call .)
    LESS            reduce using rule 46 (expression -> call .)
    GREATER         reduce using rule 46 (expression -> call .)
    EQ              reduce using rule 46 (expression -> call .)
    NOTEQ           reduce using rule 46 (expression -> call .)
    THEN            reduce using rule 46 (expression -> call .)
    TO              reduce using rule 46 (expression -> call .)
    UNTIL           reduce using rule 46 (expression -> call .)
    ELSE            reduce using rule 46 (expression -> call .)
    COMMA           reduce using rule 46 (expression -> call .)
    RBRACKET        reduce using rule 46 (expression -> call .)
    CONTINUE        reduce using rule 46 (expression -> call .)
    R_QBRACKET      reduce using rule 46 (expression -> call .)


state 68

    (40) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (41) variable -> VARIABLE .
    (91) call -> VARIABLE . LBRACKET parameters RBRACKET
    (92) call -> VARIABLE . BRACKETS

    L_QBRACKET      shift and go to state 102
    NEWLINE         reduce using rule 41 (variable -> VARIABLE .)
    PLUS            reduce using rule 41 (variable -> VARIABLE .)
    MINUS           reduce using rule 41 (variable -> VARIABLE .)
    LESS            reduce using rule 41 (variable -> VARIABLE .)
    GREATER         reduce using rule 41 (variable -> VARIABLE .)
    EQ              reduce using rule 41 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 41 (variable -> VARIABLE .)
    THEN            reduce using rule 41 (variable -> VARIABLE .)
    TO              reduce using rule 41 (variable -> VARIABLE .)
    UNTIL           reduce using rule 41 (variable -> VARIABLE .)
    ELSE            reduce using rule 41 (variable -> VARIABLE .)
    COMMA           reduce using rule 41 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 41 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 41 (variable -> VARIABLE .)
    R_QBRACKET      reduce using rule 41 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 100
    BRACKETS        shift and go to state 101


state 69

    (76) converting_command -> expression TO . type
    (77) converting_command -> expression TO . expression
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 111
    type                           shift and go to state 112
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 70

    (61) math_expression -> expression PLUS . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 113
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 71

    (62) math_expression -> expression MINUS . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 114
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 72

    (64) math_expression -> expression LESS . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 115
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 73

    (65) math_expression -> expression GREATER . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 116
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 74

    (66) math_expression -> expression EQ . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 117
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 75

    (67) math_expression -> expression NOTEQ . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 118
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 76

    (24) statement -> empty NEWLINE .

    RETURN          reduce using rule 24 (statement -> empty NEWLINE .)
    COMMENT         reduce using rule 24 (statement -> empty NEWLINE .)
    DO              reduce using rule 24 (statement -> empty NEWLINE .)
    IF              reduce using rule 24 (statement -> empty NEWLINE .)
    FUNCTION        reduce using rule 24 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 24 (statement -> empty NEWLINE .)
    error           reduce using rule 24 (statement -> empty NEWLINE .)
    INTEGER         reduce using rule 24 (statement -> empty NEWLINE .)
    STRING          reduce using rule 24 (statement -> empty NEWLINE .)
    BOOL            reduce using rule 24 (statement -> empty NEWLINE .)
    VECTOR          reduce using rule 24 (statement -> empty NEWLINE .)
    LEFT            reduce using rule 24 (statement -> empty NEWLINE .)
    RIGHT           reduce using rule 24 (statement -> empty NEWLINE .)
    FORWARD         reduce using rule 24 (statement -> empty NEWLINE .)
    BACK            reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_RIGHT    reduce using rule 24 (statement -> empty NEWLINE .)
    ROTATE_LEFT     reduce using rule 24 (statement -> empty NEWLINE .)
    LMS             reduce using rule 24 (statement -> empty NEWLINE .)
    REFLECT         reduce using rule 24 (statement -> empty NEWLINE .)
    DRILL           reduce using rule 24 (statement -> empty NEWLINE .)
    TRUE            reduce using rule 24 (statement -> empty NEWLINE .)
    FALSE           reduce using rule 24 (statement -> empty NEWLINE .)
    UNDEFINED       reduce using rule 24 (statement -> empty NEWLINE .)
    DECIMAL         reduce using rule 24 (statement -> empty NEWLINE .)
    EXIT            reduce using rule 24 (statement -> empty NEWLINE .)
    WOOD            reduce using rule 24 (statement -> empty NEWLINE .)
    STEEL           reduce using rule 24 (statement -> empty NEWLINE .)
    GLASS           reduce using rule 24 (statement -> empty NEWLINE .)
    CONCRETE        reduce using rule 24 (statement -> empty NEWLINE .)
    PLASTIC         reduce using rule 24 (statement -> empty NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 24 (statement -> empty NEWLINE .)
    QUOTE           reduce using rule 24 (statement -> empty NEWLINE .)
    MINUS           reduce using rule 24 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 24 (statement -> empty NEWLINE .)
    $end            reduce using rule 24 (statement -> empty NEWLINE .)
    END             reduce using rule 24 (statement -> empty NEWLINE .)


state 77

    (25) statement -> errors NEWLINE .

    RETURN          reduce using rule 25 (statement -> errors NEWLINE .)
    COMMENT         reduce using rule 25 (statement -> errors NEWLINE .)
    DO              reduce using rule 25 (statement -> errors NEWLINE .)
    IF              reduce using rule 25 (statement -> errors NEWLINE .)
    FUNCTION        reduce using rule 25 (statement -> errors NEWLINE .)
    VARIABLE        reduce using rule 25 (statement -> errors NEWLINE .)
    error           reduce using rule 25 (statement -> errors NEWLINE .)
    INTEGER         reduce using rule 25 (statement -> errors NEWLINE .)
    STRING          reduce using rule 25 (statement -> errors NEWLINE .)
    BOOL            reduce using rule 25 (statement -> errors NEWLINE .)
    VECTOR          reduce using rule 25 (statement -> errors NEWLINE .)
    LEFT            reduce using rule 25 (statement -> errors NEWLINE .)
    RIGHT           reduce using rule 25 (statement -> errors NEWLINE .)
    FORWARD         reduce using rule 25 (statement -> errors NEWLINE .)
    BACK            reduce using rule 25 (statement -> errors NEWLINE .)
    ROTATE_RIGHT    reduce using rule 25 (statement -> errors NEWLINE .)
    ROTATE_LEFT     reduce using rule 25 (statement -> errors NEWLINE .)
    LMS             reduce using rule 25 (statement -> errors NEWLINE .)
    REFLECT         reduce using rule 25 (statement -> errors NEWLINE .)
    DRILL           reduce using rule 25 (statement -> errors NEWLINE .)
    TRUE            reduce using rule 25 (statement -> errors NEWLINE .)
    FALSE           reduce using rule 25 (statement -> errors NEWLINE .)
    UNDEFINED       reduce using rule 25 (statement -> errors NEWLINE .)
    DECIMAL         reduce using rule 25 (statement -> errors NEWLINE .)
    EXIT            reduce using rule 25 (statement -> errors NEWLINE .)
    WOOD            reduce using rule 25 (statement -> errors NEWLINE .)
    STEEL           reduce using rule 25 (statement -> errors NEWLINE .)
    GLASS           reduce using rule 25 (statement -> errors NEWLINE .)
    CONCRETE        reduce using rule 25 (statement -> errors NEWLINE .)
    PLASTIC         reduce using rule 25 (statement -> errors NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 25 (statement -> errors NEWLINE .)
    QUOTE           reduce using rule 25 (statement -> errors NEWLINE .)
    MINUS           reduce using rule 25 (statement -> errors NEWLINE .)
    NEWLINE         reduce using rule 25 (statement -> errors NEWLINE .)
    $end            reduce using rule 25 (statement -> errors NEWLINE .)
    END             reduce using rule 25 (statement -> errors NEWLINE .)


state 78

    (99) errors -> errors error .

    NEWLINE         reduce using rule 99 (errors -> errors error .)
    error           reduce using rule 99 (errors -> errors error .)
    RETURN          reduce using rule 99 (errors -> errors error .)
    COMMENT         reduce using rule 99 (errors -> errors error .)
    DO              reduce using rule 99 (errors -> errors error .)
    IF              reduce using rule 99 (errors -> errors error .)
    FUNCTION        reduce using rule 99 (errors -> errors error .)
    VARIABLE        reduce using rule 99 (errors -> errors error .)
    INTEGER         reduce using rule 99 (errors -> errors error .)
    STRING          reduce using rule 99 (errors -> errors error .)
    BOOL            reduce using rule 99 (errors -> errors error .)
    VECTOR          reduce using rule 99 (errors -> errors error .)
    LEFT            reduce using rule 99 (errors -> errors error .)
    RIGHT           reduce using rule 99 (errors -> errors error .)
    FORWARD         reduce using rule 99 (errors -> errors error .)
    BACK            reduce using rule 99 (errors -> errors error .)
    ROTATE_RIGHT    reduce using rule 99 (errors -> errors error .)
    ROTATE_LEFT     reduce using rule 99 (errors -> errors error .)
    LMS             reduce using rule 99 (errors -> errors error .)
    REFLECT         reduce using rule 99 (errors -> errors error .)
    DRILL           reduce using rule 99 (errors -> errors error .)
    TRUE            reduce using rule 99 (errors -> errors error .)
    FALSE           reduce using rule 99 (errors -> errors error .)
    UNDEFINED       reduce using rule 99 (errors -> errors error .)
    DECIMAL         reduce using rule 99 (errors -> errors error .)
    EXIT            reduce using rule 99 (errors -> errors error .)
    WOOD            reduce using rule 99 (errors -> errors error .)
    STEEL           reduce using rule 99 (errors -> errors error .)
    GLASS           reduce using rule 99 (errors -> errors error .)
    CONCRETE        reduce using rule 99 (errors -> errors error .)
    PLASTIC         reduce using rule 99 (errors -> errors error .)
    DOUBLE_QUOTE    reduce using rule 99 (errors -> errors error .)
    QUOTE           reduce using rule 99 (errors -> errors error .)
    MINUS           reduce using rule 99 (errors -> errors error .)
    $end            reduce using rule 99 (errors -> errors error .)
    END             reduce using rule 99 (errors -> errors error .)


state 79

    (27) declaration -> type variables .

    NEWLINE         reduce using rule 27 (declaration -> type variables .)
    UNTIL           reduce using rule 27 (declaration -> type variables .)
    ELSE            reduce using rule 27 (declaration -> type variables .)


state 80

    (35) variables -> variable . COMMA variables
    (37) variables -> variable .
    (39) assignment -> variable . ASSIGNMENT expression

    COMMA           shift and go to state 119
    NEWLINE         reduce using rule 37 (variables -> variable .)
    UNTIL           reduce using rule 37 (variables -> variable .)
    ELSE            reduce using rule 37 (variables -> variable .)
    ASSIGNMENT      shift and go to state 85


state 81

    (36) variables -> assignment . COMMA variables
    (38) variables -> assignment .

    COMMA           shift and go to state 120
    NEWLINE         reduce using rule 38 (variables -> assignment .)
    UNTIL           reduce using rule 38 (variables -> assignment .)
    ELSE            reduce using rule 38 (variables -> assignment .)


state 82

    (40) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (41) variable -> VARIABLE .

    L_QBRACKET      shift and go to state 102
    COMMA           reduce using rule 41 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 41 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 41 (variable -> VARIABLE .)
    UNTIL           reduce using rule 41 (variable -> VARIABLE .)
    ELSE            reduce using rule 41 (variable -> VARIABLE .)


state 83

    (28) comment -> COMMENT any .
    (29) any -> any . VARIABLE

    NEWLINE         reduce using rule 28 (comment -> COMMENT any .)
    VARIABLE        shift and go to state 121


state 84

    (30) any -> VARIABLE .

    VARIABLE        reduce using rule 30 (any -> VARIABLE .)
    NEWLINE         reduce using rule 30 (any -> VARIABLE .)


state 85

    (39) assignment -> variable ASSIGNMENT . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    variable                       shift and go to state 66
    expression                     shift and go to state 122
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 86

    (68) while -> DO statements_group . UNTIL expression

    UNTIL           shift and go to state 123


state 87

    (2) statements_group -> BEGIN . statements END
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (99) errors -> . errors error
    (100) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 93 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    statements                     shift and go to state 124
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 88

    (3) statements_group -> inner_statement .

    UNTIL           reduce using rule 3 (statements_group -> inner_statement .)
    ELSE            reduce using rule 3 (statements_group -> inner_statement .)
    NEWLINE         reduce using rule 3 (statements_group -> inner_statement .)


state 89

    (4) inner_statement -> declaration .

    UNTIL           reduce using rule 4 (inner_statement -> declaration .)
    ELSE            reduce using rule 4 (inner_statement -> declaration .)
    NEWLINE         reduce using rule 4 (inner_statement -> declaration .)


state 90

    (5) inner_statement -> assignment .

    UNTIL           reduce using rule 5 (inner_statement -> assignment .)
    ELSE            reduce using rule 5 (inner_statement -> assignment .)
    NEWLINE         reduce using rule 5 (inner_statement -> assignment .)


state 91

    (6) inner_statement -> while .

    UNTIL           reduce using rule 6 (inner_statement -> while .)
    ELSE            reduce using rule 6 (inner_statement -> while .)
    NEWLINE         reduce using rule 6 (inner_statement -> while .)


state 92

    (7) inner_statement -> if .

    UNTIL           reduce using rule 7 (inner_statement -> if .)
    ELSE            reduce using rule 7 (inner_statement -> if .)
    NEWLINE         reduce using rule 7 (inner_statement -> if .)


state 93

    (8) inner_statement -> command .

    UNTIL           reduce using rule 8 (inner_statement -> command .)
    ELSE            reduce using rule 8 (inner_statement -> command .)
    NEWLINE         reduce using rule 8 (inner_statement -> command .)


state 94

    (9) inner_statement -> function .

    UNTIL           reduce using rule 9 (inner_statement -> function .)
    ELSE            reduce using rule 9 (inner_statement -> function .)
    NEWLINE         reduce using rule 9 (inner_statement -> function .)


state 95

    (10) inner_statement -> call .
    (46) expression -> call .

    UNTIL           reduce using rule 10 (inner_statement -> call .)
    ELSE            reduce using rule 10 (inner_statement -> call .)
    NEWLINE         reduce using rule 10 (inner_statement -> call .)
    TO              reduce using rule 46 (expression -> call .)
    PLUS            reduce using rule 46 (expression -> call .)
    MINUS           reduce using rule 46 (expression -> call .)
    LESS            reduce using rule 46 (expression -> call .)
    GREATER         reduce using rule 46 (expression -> call .)
    EQ              reduce using rule 46 (expression -> call .)
    NOTEQ           reduce using rule 46 (expression -> call .)


state 96

    (11) inner_statement -> RETURN . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 125
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 97

    (12) inner_statement -> empty .

    UNTIL           reduce using rule 12 (inner_statement -> empty .)
    ELSE            reduce using rule 12 (inner_statement -> empty .)
    NEWLINE         reduce using rule 12 (inner_statement -> empty .)


state 98

    (69) if -> IF expression . THEN statements_group
    (70) if -> IF expression . THEN statements_group ELSE statements_group
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    THEN            shift and go to state 126
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 99

    (71) function -> FUNCTION OF . type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> FUNCTION OF . type VARIABLE BRACKETS statements_group
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type

    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30

    type                           shift and go to state 127

state 100

    (91) call -> VARIABLE LBRACKET . parameters RBRACKET
    (94) parameters -> . parameters COMMA parameter
    (95) parameters -> . parameter
    (96) parameters -> . parameters CONTINUE
    (97) parameter -> . expression
    (98) parameter -> . VARIABLE EQ expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 128
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    parameters                     shift and go to state 129
    parameter                      shift and go to state 130
    expression                     shift and go to state 131
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 101

    (92) call -> VARIABLE BRACKETS .

    NEWLINE         reduce using rule 92 (call -> VARIABLE BRACKETS .)
    TO              reduce using rule 92 (call -> VARIABLE BRACKETS .)
    PLUS            reduce using rule 92 (call -> VARIABLE BRACKETS .)
    MINUS           reduce using rule 92 (call -> VARIABLE BRACKETS .)
    LESS            reduce using rule 92 (call -> VARIABLE BRACKETS .)
    GREATER         reduce using rule 92 (call -> VARIABLE BRACKETS .)
    EQ              reduce using rule 92 (call -> VARIABLE BRACKETS .)
    NOTEQ           reduce using rule 92 (call -> VARIABLE BRACKETS .)
    UNTIL           reduce using rule 92 (call -> VARIABLE BRACKETS .)
    THEN            reduce using rule 92 (call -> VARIABLE BRACKETS .)
    ELSE            reduce using rule 92 (call -> VARIABLE BRACKETS .)
    COMMA           reduce using rule 92 (call -> VARIABLE BRACKETS .)
    RBRACKET        reduce using rule 92 (call -> VARIABLE BRACKETS .)
    CONTINUE        reduce using rule 92 (call -> VARIABLE BRACKETS .)
    R_QBRACKET      reduce using rule 92 (call -> VARIABLE BRACKETS .)


state 102

    (40) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 132
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 103

    (78) vector_command -> VARIABLE PUSH . BACK expression
    (80) vector_command -> VARIABLE PUSH . FRONT expression

    BACK            shift and go to state 133
    FRONT           shift and go to state 134


state 104

    (79) vector_command -> VARIABLE POP . BACK
    (81) vector_command -> VARIABLE POP . FRONT

    BACK            shift and go to state 135
    FRONT           shift and go to state 136


state 105

    (34) type -> VECTOR OF . type
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type

    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30

    type                           shift and go to state 137

state 106

    (47) qstring -> DOUBLE_QUOTE string . DOUBLE_QUOTE
    (49) string -> string . VARIABLE

    DOUBLE_QUOTE    shift and go to state 138
    VARIABLE        shift and go to state 139


state 107

    (50) string -> VARIABLE .

    DOUBLE_QUOTE    reduce using rule 50 (string -> VARIABLE .)
    VARIABLE        reduce using rule 50 (string -> VARIABLE .)
    QUOTE           reduce using rule 50 (string -> VARIABLE .)


state 108

    (48) qstring -> QUOTE string . QUOTE
    (49) string -> string . VARIABLE

    QUOTE           shift and go to state 140
    VARIABLE        shift and go to state 139


state 109

    (63) math_expression -> MINUS expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 63 (math_expression -> MINUS expression .)
    NEWLINE         reduce using rule 63 (math_expression -> MINUS expression .)
    THEN            reduce using rule 63 (math_expression -> MINUS expression .)
    UNTIL           reduce using rule 63 (math_expression -> MINUS expression .)
    ELSE            reduce using rule 63 (math_expression -> MINUS expression .)
    COMMA           reduce using rule 63 (math_expression -> MINUS expression .)
    RBRACKET        reduce using rule 63 (math_expression -> MINUS expression .)
    CONTINUE        reduce using rule 63 (math_expression -> MINUS expression .)
    R_QBRACKET      reduce using rule 63 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 63 (math_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 63 (math_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 63 (math_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 63 (math_expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 63 (math_expression -> MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 63 (math_expression -> MINUS expression .) ]


state 110

    (23) statement -> RETURN expression NEWLINE .

    RETURN          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    COMMENT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DO              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    IF              reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FUNCTION        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VARIABLE        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    error           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    INTEGER         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    STRING          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BOOL            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    VECTOR          reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LEFT            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    RIGHT           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FORWARD         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    BACK            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_RIGHT    reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    ROTATE_LEFT     reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    LMS             reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    REFLECT         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DRILL           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    TRUE            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    FALSE           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    UNDEFINED       reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DECIMAL         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    EXIT            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    WOOD            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    STEEL           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    GLASS           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    CONCRETE        reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    PLASTIC         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    DOUBLE_QUOTE    reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    QUOTE           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    MINUS           reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    NEWLINE         reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 23 (statement -> RETURN expression NEWLINE .)
    END             reduce using rule 23 (statement -> RETURN expression NEWLINE .)


state 111

    (77) converting_command -> expression TO expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 77 (converting_command -> expression TO expression .)
    UNTIL           reduce using rule 77 (converting_command -> expression TO expression .)
    ELSE            reduce using rule 77 (converting_command -> expression TO expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 112

    (76) converting_command -> expression TO type .

    NEWLINE         reduce using rule 76 (converting_command -> expression TO type .)
    UNTIL           reduce using rule 76 (converting_command -> expression TO type .)
    ELSE            reduce using rule 76 (converting_command -> expression TO type .)


state 113

    (61) math_expression -> expression PLUS expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 61 (math_expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 61 (math_expression -> expression PLUS expression .)
    THEN            reduce using rule 61 (math_expression -> expression PLUS expression .)
    UNTIL           reduce using rule 61 (math_expression -> expression PLUS expression .)
    ELSE            reduce using rule 61 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 61 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 61 (math_expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 61 (math_expression -> expression PLUS expression .)
    R_QBRACKET      reduce using rule 61 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 61 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 61 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 61 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 61 (math_expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 61 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 61 (math_expression -> expression PLUS expression .) ]


state 114

    (62) math_expression -> expression MINUS expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 62 (math_expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 62 (math_expression -> expression MINUS expression .)
    THEN            reduce using rule 62 (math_expression -> expression MINUS expression .)
    UNTIL           reduce using rule 62 (math_expression -> expression MINUS expression .)
    ELSE            reduce using rule 62 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 62 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 62 (math_expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 62 (math_expression -> expression MINUS expression .)
    R_QBRACKET      reduce using rule 62 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 62 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 62 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 62 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 62 (math_expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 62 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 62 (math_expression -> expression MINUS expression .) ]


state 115

    (64) math_expression -> expression LESS expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 64 (math_expression -> expression LESS expression .)
    NEWLINE         reduce using rule 64 (math_expression -> expression LESS expression .)
    THEN            reduce using rule 64 (math_expression -> expression LESS expression .)
    UNTIL           reduce using rule 64 (math_expression -> expression LESS expression .)
    ELSE            reduce using rule 64 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 64 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 64 (math_expression -> expression LESS expression .)
    CONTINUE        reduce using rule 64 (math_expression -> expression LESS expression .)
    R_QBRACKET      reduce using rule 64 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 64 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 64 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 64 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 64 (math_expression -> expression LESS expression .) ]
  ! EQ              [ reduce using rule 64 (math_expression -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 64 (math_expression -> expression LESS expression .) ]


state 116

    (65) math_expression -> expression GREATER expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 65 (math_expression -> expression GREATER expression .)
    NEWLINE         reduce using rule 65 (math_expression -> expression GREATER expression .)
    THEN            reduce using rule 65 (math_expression -> expression GREATER expression .)
    UNTIL           reduce using rule 65 (math_expression -> expression GREATER expression .)
    ELSE            reduce using rule 65 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 65 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 65 (math_expression -> expression GREATER expression .)
    CONTINUE        reduce using rule 65 (math_expression -> expression GREATER expression .)
    R_QBRACKET      reduce using rule 65 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 65 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 65 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 65 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 65 (math_expression -> expression GREATER expression .) ]
  ! EQ              [ reduce using rule 65 (math_expression -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 65 (math_expression -> expression GREATER expression .) ]


state 117

    (66) math_expression -> expression EQ expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 66 (math_expression -> expression EQ expression .)
    NEWLINE         reduce using rule 66 (math_expression -> expression EQ expression .)
    THEN            reduce using rule 66 (math_expression -> expression EQ expression .)
    UNTIL           reduce using rule 66 (math_expression -> expression EQ expression .)
    ELSE            reduce using rule 66 (math_expression -> expression EQ expression .)
    COMMA           reduce using rule 66 (math_expression -> expression EQ expression .)
    RBRACKET        reduce using rule 66 (math_expression -> expression EQ expression .)
    CONTINUE        reduce using rule 66 (math_expression -> expression EQ expression .)
    R_QBRACKET      reduce using rule 66 (math_expression -> expression EQ expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 66 (math_expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 66 (math_expression -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 66 (math_expression -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 66 (math_expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 66 (math_expression -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 66 (math_expression -> expression EQ expression .) ]


state 118

    (67) math_expression -> expression NOTEQ expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    TO              reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    NEWLINE         reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    THEN            reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    UNTIL           reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    ELSE            reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    COMMA           reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    CONTINUE        reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    R_QBRACKET      reduce using rule 67 (math_expression -> expression NOTEQ expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75

  ! PLUS            [ reduce using rule 67 (math_expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 67 (math_expression -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 67 (math_expression -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 67 (math_expression -> expression NOTEQ expression .) ]
  ! EQ              [ reduce using rule 67 (math_expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 67 (math_expression -> expression NOTEQ expression .) ]


state 119

    (35) variables -> variable COMMA . variables
    (35) variables -> . variable COMMA variables
    (36) variables -> . assignment COMMA variables
    (37) variables -> . variable
    (38) variables -> . assignment
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (39) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 82

    variable                       shift and go to state 80
    variables                      shift and go to state 141
    assignment                     shift and go to state 81

state 120

    (36) variables -> assignment COMMA . variables
    (35) variables -> . variable COMMA variables
    (36) variables -> . assignment COMMA variables
    (37) variables -> . variable
    (38) variables -> . assignment
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (39) assignment -> . variable ASSIGNMENT expression

    VARIABLE        shift and go to state 82

    assignment                     shift and go to state 81
    variables                      shift and go to state 142
    variable                       shift and go to state 80

state 121

    (29) any -> any VARIABLE .

    VARIABLE        reduce using rule 29 (any -> any VARIABLE .)
    NEWLINE         reduce using rule 29 (any -> any VARIABLE .)


state 122

    (39) assignment -> variable ASSIGNMENT expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 39 (assignment -> variable ASSIGNMENT expression .)
    COMMA           reduce using rule 39 (assignment -> variable ASSIGNMENT expression .)
    UNTIL           reduce using rule 39 (assignment -> variable ASSIGNMENT expression .)
    ELSE            reduce using rule 39 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 123

    (68) while -> DO statements_group UNTIL . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 143
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 124

    (2) statements_group -> BEGIN statements . END
    (13) statements -> statements . statement
    (15) statement -> . declaration NEWLINE
    (16) statement -> . comment NEWLINE
    (17) statement -> . assignment NEWLINE
    (18) statement -> . while NEWLINE
    (19) statement -> . if NEWLINE
    (20) statement -> . command NEWLINE
    (21) statement -> . function NEWLINE
    (22) statement -> . call NEWLINE
    (23) statement -> . RETURN expression NEWLINE
    (24) statement -> . empty NEWLINE
    (25) statement -> . errors NEWLINE
    (26) statement -> . errors
    (27) declaration -> . type variables
    (28) comment -> . COMMENT any
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (99) errors -> . errors error
    (100) errors -> . error
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    END             shift and go to state 144
    RETURN          shift and go to state 12
    COMMENT         shift and go to state 17
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    NEWLINE         reduce using rule 93 (empty -> .)
    error           shift and go to state 26
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    statement                      shift and go to state 56
    declaration                    shift and go to state 4
    comment                        shift and go to state 5
    assignment                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    command                        shift and go to state 9
    function                       shift and go to state 10
    call                           shift and go to state 11
    expression                     shift and go to state 13
    empty                          shift and go to state 14
    errors                         shift and go to state 15
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 125

    (11) inner_statement -> RETURN expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    UNTIL           reduce using rule 11 (inner_statement -> RETURN expression .)
    ELSE            reduce using rule 11 (inner_statement -> RETURN expression .)
    NEWLINE         reduce using rule 11 (inner_statement -> RETURN expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 126

    (69) if -> IF expression THEN . statements_group
    (70) if -> IF expression THEN . statements_group ELSE statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 87
    RETURN          shift and go to state 96
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 93 (empty -> .)
    NEWLINE         reduce using rule 93 (empty -> .)
    UNTIL           reduce using rule 93 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 13
    statements_group               shift and go to state 145
    inner_statement                shift and go to state 88
    declaration                    shift and go to state 89
    assignment                     shift and go to state 90
    while                          shift and go to state 91
    if                             shift and go to state 92
    command                        shift and go to state 93
    function                       shift and go to state 94
    call                           shift and go to state 95
    empty                          shift and go to state 97
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 127

    (71) function -> FUNCTION OF type . VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> FUNCTION OF type . VARIABLE BRACKETS statements_group

    VARIABLE        shift and go to state 146


state 128

    (98) parameter -> VARIABLE . EQ expression
    (40) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (41) variable -> VARIABLE .
    (91) call -> VARIABLE . LBRACKET parameters RBRACKET
    (92) call -> VARIABLE . BRACKETS

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 147
    L_QBRACKET      shift and go to state 102
    PLUS            reduce using rule 41 (variable -> VARIABLE .)
    MINUS           reduce using rule 41 (variable -> VARIABLE .)
    LESS            reduce using rule 41 (variable -> VARIABLE .)
    GREATER         reduce using rule 41 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 41 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 41 (variable -> VARIABLE .)
    COMMA           reduce using rule 41 (variable -> VARIABLE .)
    CONTINUE        reduce using rule 41 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 100
    BRACKETS        shift and go to state 101

  ! EQ              [ reduce using rule 41 (variable -> VARIABLE .) ]


state 129

    (91) call -> VARIABLE LBRACKET parameters . RBRACKET
    (94) parameters -> parameters . COMMA parameter
    (96) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 148
    COMMA           shift and go to state 149
    CONTINUE        shift and go to state 150


state 130

    (95) parameters -> parameter .

    RBRACKET        reduce using rule 95 (parameters -> parameter .)
    COMMA           reduce using rule 95 (parameters -> parameter .)
    CONTINUE        reduce using rule 95 (parameters -> parameter .)


state 131

    (97) parameter -> expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 97 (parameter -> expression .)
    COMMA           reduce using rule 97 (parameter -> expression .)
    CONTINUE        reduce using rule 97 (parameter -> expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 132

    (40) variable -> VARIABLE L_QBRACKET expression . R_QBRACKET
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    R_QBRACKET      shift and go to state 151
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 133

    (78) vector_command -> VARIABLE PUSH BACK . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 152
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 134

    (80) vector_command -> VARIABLE PUSH FRONT . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 153
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 135

    (79) vector_command -> VARIABLE POP BACK .

    NEWLINE         reduce using rule 79 (vector_command -> VARIABLE POP BACK .)
    UNTIL           reduce using rule 79 (vector_command -> VARIABLE POP BACK .)
    ELSE            reduce using rule 79 (vector_command -> VARIABLE POP BACK .)


state 136

    (81) vector_command -> VARIABLE POP FRONT .

    NEWLINE         reduce using rule 81 (vector_command -> VARIABLE POP FRONT .)
    UNTIL           reduce using rule 81 (vector_command -> VARIABLE POP FRONT .)
    ELSE            reduce using rule 81 (vector_command -> VARIABLE POP FRONT .)


state 137

    (34) type -> VECTOR OF type .

    VARIABLE        reduce using rule 34 (type -> VECTOR OF type .)
    NEWLINE         reduce using rule 34 (type -> VECTOR OF type .)
    UNTIL           reduce using rule 34 (type -> VECTOR OF type .)
    ELSE            reduce using rule 34 (type -> VECTOR OF type .)


state 138

    (47) qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .

    TO              reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    PLUS            reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    MINUS           reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    LESS            reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    GREATER         reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    EQ              reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NOTEQ           reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    NEWLINE         reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    THEN            reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    UNTIL           reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    ELSE            reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    COMMA           reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    RBRACKET        reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    CONTINUE        reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)
    R_QBRACKET      reduce using rule 47 (qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE .)


state 139

    (49) string -> string VARIABLE .

    DOUBLE_QUOTE    reduce using rule 49 (string -> string VARIABLE .)
    VARIABLE        reduce using rule 49 (string -> string VARIABLE .)
    QUOTE           reduce using rule 49 (string -> string VARIABLE .)


state 140

    (48) qstring -> QUOTE string QUOTE .

    TO              reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    PLUS            reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    MINUS           reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    LESS            reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    GREATER         reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    EQ              reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    NOTEQ           reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    NEWLINE         reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    THEN            reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    UNTIL           reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    ELSE            reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    COMMA           reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    RBRACKET        reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    CONTINUE        reduce using rule 48 (qstring -> QUOTE string QUOTE .)
    R_QBRACKET      reduce using rule 48 (qstring -> QUOTE string QUOTE .)


state 141

    (35) variables -> variable COMMA variables .

    NEWLINE         reduce using rule 35 (variables -> variable COMMA variables .)
    UNTIL           reduce using rule 35 (variables -> variable COMMA variables .)
    ELSE            reduce using rule 35 (variables -> variable COMMA variables .)


state 142

    (36) variables -> assignment COMMA variables .

    NEWLINE         reduce using rule 36 (variables -> assignment COMMA variables .)
    UNTIL           reduce using rule 36 (variables -> assignment COMMA variables .)
    ELSE            reduce using rule 36 (variables -> assignment COMMA variables .)


state 143

    (68) while -> DO statements_group UNTIL expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 68 (while -> DO statements_group UNTIL expression .)
    UNTIL           reduce using rule 68 (while -> DO statements_group UNTIL expression .)
    ELSE            reduce using rule 68 (while -> DO statements_group UNTIL expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 144

    (2) statements_group -> BEGIN statements END .

    UNTIL           reduce using rule 2 (statements_group -> BEGIN statements END .)
    ELSE            reduce using rule 2 (statements_group -> BEGIN statements END .)
    NEWLINE         reduce using rule 2 (statements_group -> BEGIN statements END .)


state 145

    (69) if -> IF expression THEN statements_group .
    (70) if -> IF expression THEN statements_group . ELSE statements_group

  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 69 (if -> IF expression THEN statements_group .)
    UNTIL           reduce using rule 69 (if -> IF expression THEN statements_group .)
    ELSE            shift and go to state 154

  ! ELSE            [ reduce using rule 69 (if -> IF expression THEN statements_group .) ]


state 146

    (71) function -> FUNCTION OF type VARIABLE . LBRACKET parameters RBRACKET statements_group
    (72) function -> FUNCTION OF type VARIABLE . BRACKETS statements_group

    LBRACKET        shift and go to state 155
    BRACKETS        shift and go to state 156


state 147

    (98) parameter -> VARIABLE EQ . expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 68
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 157
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 148

    (91) call -> VARIABLE LBRACKET parameters RBRACKET .

    NEWLINE         reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    TO              reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    PLUS            reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    MINUS           reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    LESS            reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    GREATER         reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    EQ              reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    NOTEQ           reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    UNTIL           reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    THEN            reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    ELSE            reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    COMMA           reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    RBRACKET        reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    CONTINUE        reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)
    R_QBRACKET      reduce using rule 91 (call -> VARIABLE LBRACKET parameters RBRACKET .)


state 149

    (94) parameters -> parameters COMMA . parameter
    (97) parameter -> . expression
    (98) parameter -> . VARIABLE EQ expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 128
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    parameter                      shift and go to state 158
    expression                     shift and go to state 131
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 150

    (96) parameters -> parameters CONTINUE .

    RBRACKET        reduce using rule 96 (parameters -> parameters CONTINUE .)
    COMMA           reduce using rule 96 (parameters -> parameters CONTINUE .)
    CONTINUE        reduce using rule 96 (parameters -> parameters CONTINUE .)


state 151

    (40) variable -> VARIABLE L_QBRACKET expression R_QBRACKET .

    ASSIGNMENT      reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    TO              reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    PLUS            reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    MINUS           reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    LESS            reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    GREATER         reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    EQ              reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NOTEQ           reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NEWLINE         reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    COMMA           reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    UNTIL           reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    ELSE            reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    THEN            reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    RBRACKET        reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    CONTINUE        reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    R_QBRACKET      reduce using rule 40 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)


state 152

    (78) vector_command -> VARIABLE PUSH BACK expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 78 (vector_command -> VARIABLE PUSH BACK expression .)
    UNTIL           reduce using rule 78 (vector_command -> VARIABLE PUSH BACK expression .)
    ELSE            reduce using rule 78 (vector_command -> VARIABLE PUSH BACK expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 153

    (80) vector_command -> VARIABLE PUSH FRONT expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    NEWLINE         reduce using rule 80 (vector_command -> VARIABLE PUSH FRONT expression .)
    UNTIL           reduce using rule 80 (vector_command -> VARIABLE PUSH FRONT expression .)
    ELSE            reduce using rule 80 (vector_command -> VARIABLE PUSH FRONT expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 154

    (70) if -> IF expression THEN statements_group ELSE . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 87
    RETURN          shift and go to state 96
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 93 (empty -> .)
    NEWLINE         reduce using rule 93 (empty -> .)
    UNTIL           reduce using rule 93 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    expression                     shift and go to state 13
    statements_group               shift and go to state 159
    inner_statement                shift and go to state 88
    declaration                    shift and go to state 89
    assignment                     shift and go to state 90
    while                          shift and go to state 91
    if                             shift and go to state 92
    command                        shift and go to state 93
    function                       shift and go to state 94
    call                           shift and go to state 95
    empty                          shift and go to state 97
    type                           shift and go to state 16
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 155

    (71) function -> FUNCTION OF type VARIABLE LBRACKET . parameters RBRACKET statements_group
    (94) parameters -> . parameters COMMA parameter
    (95) parameters -> . parameter
    (96) parameters -> . parameters CONTINUE
    (97) parameter -> . expression
    (98) parameter -> . VARIABLE EQ expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS

    VARIABLE        shift and go to state 128
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    parameters                     shift and go to state 160
    parameter                      shift and go to state 130
    expression                     shift and go to state 131
    variable                       shift and go to state 66
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42
    call                           shift and go to state 67

state 156

    (72) function -> FUNCTION OF type VARIABLE BRACKETS . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 87
    RETURN          shift and go to state 96
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 93 (empty -> .)
    NEWLINE         reduce using rule 93 (empty -> .)
    UNTIL           reduce using rule 93 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    type                           shift and go to state 16
    statements_group               shift and go to state 161
    inner_statement                shift and go to state 88
    declaration                    shift and go to state 89
    assignment                     shift and go to state 90
    while                          shift and go to state 91
    if                             shift and go to state 92
    command                        shift and go to state 93
    function                       shift and go to state 94
    call                           shift and go to state 95
    expression                     shift and go to state 13
    empty                          shift and go to state 97
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 157

    (98) parameter -> VARIABLE EQ expression .
    (61) math_expression -> expression . PLUS expression
    (62) math_expression -> expression . MINUS expression
    (64) math_expression -> expression . LESS expression
    (65) math_expression -> expression . GREATER expression
    (66) math_expression -> expression . EQ expression
    (67) math_expression -> expression . NOTEQ expression

    RBRACKET        reduce using rule 98 (parameter -> VARIABLE EQ expression .)
    COMMA           reduce using rule 98 (parameter -> VARIABLE EQ expression .)
    CONTINUE        reduce using rule 98 (parameter -> VARIABLE EQ expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LESS            shift and go to state 72
    GREATER         shift and go to state 73
    EQ              shift and go to state 74
    NOTEQ           shift and go to state 75


state 158

    (94) parameters -> parameters COMMA parameter .

    RBRACKET        reduce using rule 94 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 94 (parameters -> parameters COMMA parameter .)
    CONTINUE        reduce using rule 94 (parameters -> parameters COMMA parameter .)


state 159

    (70) if -> IF expression THEN statements_group ELSE statements_group .

    NEWLINE         reduce using rule 70 (if -> IF expression THEN statements_group ELSE statements_group .)
    UNTIL           reduce using rule 70 (if -> IF expression THEN statements_group ELSE statements_group .)
    ELSE            reduce using rule 70 (if -> IF expression THEN statements_group ELSE statements_group .)


state 160

    (71) function -> FUNCTION OF type VARIABLE LBRACKET parameters . RBRACKET statements_group
    (94) parameters -> parameters . COMMA parameter
    (96) parameters -> parameters . CONTINUE

    RBRACKET        shift and go to state 162
    COMMA           shift and go to state 149
    CONTINUE        shift and go to state 150


state 161

    (72) function -> FUNCTION OF type VARIABLE BRACKETS statements_group .

    NEWLINE         reduce using rule 72 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    UNTIL           reduce using rule 72 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)
    ELSE            reduce using rule 72 (function -> FUNCTION OF type VARIABLE BRACKETS statements_group .)


state 162

    (71) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET . statements_group
    (2) statements_group -> . BEGIN statements END
    (3) statements_group -> . inner_statement
    (4) inner_statement -> . declaration
    (5) inner_statement -> . assignment
    (6) inner_statement -> . while
    (7) inner_statement -> . if
    (8) inner_statement -> . command
    (9) inner_statement -> . function
    (10) inner_statement -> . call
    (11) inner_statement -> . RETURN expression
    (12) inner_statement -> . empty
    (27) declaration -> . type variables
    (39) assignment -> . variable ASSIGNMENT expression
    (68) while -> . DO statements_group UNTIL expression
    (69) if -> . IF expression THEN statements_group
    (70) if -> . IF expression THEN statements_group ELSE statements_group
    (73) command -> . vector_command
    (74) command -> . robot_command
    (75) command -> . converting_command
    (71) function -> . FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group
    (72) function -> . FUNCTION OF type VARIABLE BRACKETS statements_group
    (91) call -> . VARIABLE LBRACKET parameters RBRACKET
    (92) call -> . VARIABLE BRACKETS
    (93) empty -> .
    (31) type -> . INTEGER
    (32) type -> . STRING
    (33) type -> . BOOL
    (34) type -> . VECTOR OF type
    (40) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (41) variable -> . VARIABLE
    (78) vector_command -> . VARIABLE PUSH BACK expression
    (79) vector_command -> . VARIABLE POP BACK
    (80) vector_command -> . VARIABLE PUSH FRONT expression
    (81) vector_command -> . VARIABLE POP FRONT
    (82) robot_command -> . LEFT
    (83) robot_command -> . RIGHT
    (84) robot_command -> . FORWARD
    (85) robot_command -> . BACK
    (86) robot_command -> . ROTATE_RIGHT
    (87) robot_command -> . ROTATE_LEFT
    (88) robot_command -> . LMS
    (89) robot_command -> . REFLECT
    (90) robot_command -> . DRILL
    (76) converting_command -> . expression TO type
    (77) converting_command -> . expression TO expression
    (42) expression -> . variable
    (43) expression -> . const
    (44) expression -> . qstring
    (45) expression -> . math_expression
    (46) expression -> . call
    (51) const -> . TRUE
    (52) const -> . FALSE
    (53) const -> . UNDEFINED
    (54) const -> . DECIMAL
    (55) const -> . EXIT
    (56) const -> . WOOD
    (57) const -> . STEEL
    (58) const -> . GLASS
    (59) const -> . CONCRETE
    (60) const -> . PLASTIC
    (47) qstring -> . DOUBLE_QUOTE string DOUBLE_QUOTE
    (48) qstring -> . QUOTE string QUOTE
    (61) math_expression -> . expression PLUS expression
    (62) math_expression -> . expression MINUS expression
    (63) math_expression -> . MINUS expression
    (64) math_expression -> . expression LESS expression
    (65) math_expression -> . expression GREATER expression
    (66) math_expression -> . expression EQ expression
    (67) math_expression -> . expression NOTEQ expression

    BEGIN           shift and go to state 87
    RETURN          shift and go to state 96
    DO              shift and go to state 19
    IF              shift and go to state 20
    FUNCTION        shift and go to state 24
    VARIABLE        shift and go to state 25
    ELSE            reduce using rule 93 (empty -> .)
    NEWLINE         reduce using rule 93 (empty -> .)
    UNTIL           reduce using rule 93 (empty -> .)
    INTEGER         shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    VECTOR          shift and go to state 30
    LEFT            shift and go to state 32
    RIGHT           shift and go to state 33
    FORWARD         shift and go to state 34
    BACK            shift and go to state 31
    ROTATE_RIGHT    shift and go to state 35
    ROTATE_LEFT     shift and go to state 36
    LMS             shift and go to state 37
    REFLECT         shift and go to state 38
    DRILL           shift and go to state 39
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    UNDEFINED       shift and go to state 45
    DECIMAL         shift and go to state 46
    EXIT            shift and go to state 47
    WOOD            shift and go to state 48
    STEEL           shift and go to state 49
    GLASS           shift and go to state 50
    CONCRETE        shift and go to state 51
    PLASTIC         shift and go to state 52
    DOUBLE_QUOTE    shift and go to state 53
    QUOTE           shift and go to state 54
    MINUS           shift and go to state 55

    type                           shift and go to state 16
    statements_group               shift and go to state 163
    inner_statement                shift and go to state 88
    declaration                    shift and go to state 89
    assignment                     shift and go to state 90
    while                          shift and go to state 91
    if                             shift and go to state 92
    command                        shift and go to state 93
    function                       shift and go to state 94
    call                           shift and go to state 95
    expression                     shift and go to state 13
    empty                          shift and go to state 97
    variable                       shift and go to state 18
    vector_command                 shift and go to state 21
    robot_command                  shift and go to state 22
    converting_command             shift and go to state 23
    const                          shift and go to state 40
    qstring                        shift and go to state 41
    math_expression                shift and go to state 42

state 163

    (71) function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .

    NEWLINE         reduce using rule 71 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    UNTIL           reduce using rule 71 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)
    ELSE            reduce using rule 71 (function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 15 resolved as shift
WARNING: shift/reduce conflict for error in state 15 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 113 resolved as shift
WARNING: shift/reduce conflict for EQ in state 113 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 128 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
