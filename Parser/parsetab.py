
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTOleftLESSGREATEREQNOTEQleftPLUSMINUSrightTHENELSEASSIGNMENT BACK BEGIN BOOL BRACKETS COMMA COMMENT CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODprogram : statementsstatements_group : BEGIN statements END\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | function\n                     | call\n                     | RETURN expression\n                     | emptystatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | comment NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN expression NEWLINE\n                     | empty NEWLINEstatement : errordeclaration : type variablesdeclaration : type errorcomment : COMMENT anyany : any VARIABLE\n               | VARIABLEtype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF type\n        variables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expression\n                      | variable ASSIGNMENT assignmentassignment : variable ASSIGNMENT errorvariable : VARIABLE indexing\n                    | VARIABLEindexing : L_QBRACKET expression R_QBRACKET indexing\n                    | L_QBRACKET expression R_QBRACKETexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | robot_command\n                      | converting_command\n                      | vector_pop\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : VARIABLE string\n                   | DECIMAL string\n                   | FALSE string\n                   | TRUE string\n                   | FALSE\n                   | TRUE\n                   | DECIMAL\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expression\n                           | expression PLUS expression\n                           | expression MINUS expressionwhile : DO statements_group UNTIL expressionwhile : DO errorif : IF expression THEN statements_group if : IF expression THEN statements_group ELSE statements_groupif : IF errorfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group\n                    | FUNCTION OF type VARIABLE BRACKETS statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters CONTINUE RBRACKET statements_group\n                    | FUNCTION OF type VARIABLE LBRACKET CONTINUE RBRACKET statements_groupfunction : FUNCTION errorcommand : vector_command\n                   | robot_commandcommand : vector_command error\n                   | robot_command errorconverting_command : expression TO type\n                              | expression TO expression\n                              | expression TO vector_ofvector_of : VECTOR OF vector_of\n                    | VECTORvector_command : variable PUSH BACK expression\n                          | variable PUSH FRONT expressionvector_command : variable PUSH BACK error\n                          | variable PUSH FRONT errorvector_pop : variable POP BACK\n                      | variable POP FRONTrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKET\n                | VARIABLE BRACKETScall : VARIABLE LBRACKET error RBRACKETempty : parameters : parameters COMMA parameter\n                      | parameterparameter : expression\n                     | VARIABLE EQ expression'
    
_lr_action_items = {'RETURN':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,102,127,129,172,174,183,185,187,],[12,12,-14,-25,89,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,12,-23,12,89,89,89,89,89,89,]),'error':([0,2,3,14,15,18,19,20,21,22,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,76,80,97,98,99,102,124,125,127,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,159,160,161,167,169,170,177,178,],[14,14,-14,-25,70,79,92,93,94,96,-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-13,-15,-16,-17,-18,-19,-20,-21,-22,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-24,123,14,133,-115,-42,-23,159,161,14,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-99,-101,-100,-102,-114,-116,-45,-44,-97,]),'COMMENT':([0,2,3,14,37,38,39,40,41,42,43,44,45,68,80,102,127,],[16,16,-14,-25,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,16,-23,16,]),'DO':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,102,127,129,172,174,183,185,187,],[18,18,-14,-25,18,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,18,-23,18,18,18,18,18,18,18,]),'IF':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,102,127,129,172,174,183,185,187,],[19,19,-14,-25,19,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,19,-23,19,19,19,19,19,19,19,]),'FUNCTION':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,102,127,129,172,174,183,185,187,],[22,22,-14,-25,22,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,22,-23,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,12,14,15,16,18,19,24,25,26,37,38,39,40,41,42,43,44,45,66,67,68,74,75,76,80,89,97,100,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,124,125,126,127,129,130,137,166,168,172,173,174,183,185,187,],[23,23,-14,55,-25,73,75,23,55,-31,-32,-33,-13,-15,-16,-17,-18,-19,-20,-21,-22,112,112,-24,119,-30,55,23,55,131,55,-23,55,55,55,55,55,55,55,112,112,112,112,73,73,-29,55,55,55,23,23,165,-34,55,131,23,131,23,23,23,23,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,13,14,20,21,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,90,92,93,94,96,98,99,102,119,120,121,122,123,127,128,129,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,156,157,158,159,160,161,162,163,164,167,169,170,172,174,177,178,179,182,183,185,186,187,188,189,],[-117,-117,-14,38,39,40,41,42,43,44,45,68,-25,-90,-91,-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-13,-15,-16,-17,-18,-19,-20,-21,-22,102,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-24,-26,-27,-37,-38,-43,-28,-30,-81,-117,-3,-4,-5,-6,-7,-8,-9,-10,-12,-84,-92,-93,-89,-115,-42,-23,-29,-46,-39,-40,-41,-117,-11,-117,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-35,-36,-99,-101,-100,-102,-80,-2,-82,-114,-116,-45,-117,-117,-44,-97,-83,-86,-117,-117,-85,-117,-88,-87,]),'INTEGER':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,95,101,102,109,127,129,171,172,174,183,185,187,],[24,24,-14,-25,24,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,24,24,24,-23,24,24,24,24,24,24,24,24,24,]),'STRING':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,95,101,102,109,127,129,171,172,174,183,185,187,],[25,25,-14,-25,25,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,25,25,25,-23,25,25,25,25,25,25,25,25,25,]),'BOOL':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,95,101,102,109,127,129,171,172,174,183,185,187,],[26,26,-14,-25,26,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,26,26,26,-23,26,26,26,26,26,26,26,26,26,]),'VECTOR':([0,2,3,14,18,37,38,39,40,41,42,43,44,45,68,80,95,101,102,109,127,129,171,172,174,183,185,187,],[27,27,-14,-25,27,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,27,27,27,-23,147,27,27,147,27,27,27,27,27,]),'LEFT':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[29,29,-14,29,-25,29,29,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,29,29,29,29,29,-23,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'RIGHT':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[30,30,-14,30,-25,30,30,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,30,30,30,30,30,-23,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'FORWARD':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[31,31,-14,31,-25,31,31,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,31,31,31,31,31,-23,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BACK':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,77,80,89,97,100,102,103,104,105,106,107,108,109,110,124,125,126,127,129,166,168,172,173,174,183,185,187,],[28,28,-14,28,-25,28,28,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,28,124,28,28,28,28,-23,28,28,28,28,28,28,28,148,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ROTATE_RIGHT':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[32,32,-14,32,-25,32,32,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,32,32,32,32,32,-23,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'ROTATE_LEFT':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[33,33,-14,33,-25,33,33,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,33,33,33,33,33,-23,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'LMS':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[34,34,-14,34,-25,34,34,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,34,34,34,34,34,-23,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'REFLECT':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[35,35,-14,35,-25,35,35,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,35,35,35,35,35,-23,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DRILL':([0,2,3,12,14,18,19,37,38,39,40,41,42,43,44,45,68,76,80,89,97,100,102,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[36,36,-14,36,-25,36,36,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,36,36,36,36,36,-23,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'$end':([1,2,3,14,37,38,39,40,41,42,43,44,45,68,102,],[0,-1,-14,-25,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-23,]),'END':([3,14,37,38,39,40,41,42,43,44,45,68,102,127,],[-14,-25,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-23,163,]),'TRUE':([12,19,66,67,76,89,97,100,103,104,105,106,107,108,109,112,113,114,115,124,125,126,166,168,173,],[56,56,115,115,56,56,56,56,56,56,56,56,56,56,56,115,115,115,115,56,56,56,56,56,56,]),'FALSE':([12,19,66,67,76,89,97,100,103,104,105,106,107,108,109,112,113,114,115,124,125,126,166,168,173,],[57,57,114,114,57,57,57,57,57,57,57,57,57,57,57,114,114,114,114,57,57,57,57,57,57,]),'UNDEFINED':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'DECIMAL':([12,19,66,67,76,89,97,100,103,104,105,106,107,108,109,112,113,114,115,124,125,126,166,168,173,],[59,59,113,113,59,59,59,59,59,59,59,59,59,59,59,113,113,113,113,59,59,59,59,59,59,]),'EXIT':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'WOOD':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'STEEL':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'GLASS':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'CONCRETE':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'PLASTIC':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'DOUBLE_QUOTE':([12,19,76,89,97,100,103,104,105,106,107,108,109,111,112,113,114,115,124,125,126,151,152,153,154,166,168,173,],[66,66,66,66,66,66,66,66,66,66,66,66,66,150,-63,-62,-60,-61,66,66,66,-56,-57,-58,-59,66,66,66,]),'QUOTE':([12,19,76,89,97,100,103,104,105,106,107,108,109,112,113,114,115,116,124,125,126,151,152,153,154,166,168,173,],[67,67,67,67,67,67,67,67,67,67,67,67,67,-63,-62,-60,-61,155,67,67,67,-56,-57,-58,-59,67,67,67,]),'ASSIGNMENT':([17,23,55,71,73,99,120,170,177,],[76,-43,-43,76,-43,-42,76,-45,-44,]),'PUSH':([17,23,99,170,177,],[77,-43,-42,-45,-44,]),'BEGIN':([18,129,172,174,183,185,187,],[80,80,80,80,80,80,80,]),'UNTIL':([18,20,21,24,25,26,28,29,30,31,32,33,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,69,70,71,72,73,78,79,81,82,83,84,85,86,87,88,90,92,93,94,96,98,99,120,121,122,123,128,129,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,156,157,158,159,160,161,162,163,164,167,169,170,172,174,177,178,179,182,183,185,186,187,188,189,],[-117,-90,-91,-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-26,-27,-37,-38,-43,126,-81,-3,-4,-5,-6,-7,-8,-9,-10,-12,-84,-92,-93,-89,-115,-42,-46,-39,-40,-41,-11,-117,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-35,-36,-99,-101,-100,-102,-80,-2,-82,-114,-116,-45,-117,-117,-44,-97,-83,-86,-117,-117,-85,-117,-88,-87,]),'ELSE':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,69,70,71,72,73,79,81,82,83,84,85,86,87,88,90,92,93,94,96,98,99,120,121,122,123,128,129,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,156,157,158,159,160,161,162,163,164,167,169,170,172,174,177,178,179,182,183,185,186,187,188,189,],[-90,-91,-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-26,-27,-37,-38,-43,-81,-3,-4,-5,-6,-7,-8,-9,-10,-12,-84,-92,-93,-89,-115,-42,-46,-39,-40,-41,-11,-117,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-35,-36,-99,-101,-100,-102,-80,-2,172,-114,-116,-45,-117,-117,-44,-97,-83,-86,-117,-117,-85,-117,-88,-87,]),'OF':([22,27,147,],[95,101,171,]),'LBRACKET':([23,55,131,165,],[97,97,97,173,]),'BRACKETS':([23,55,131,165,],[98,98,98,174,]),'L_QBRACKET':([23,55,73,131,170,],[100,100,100,100,100,]),'LESS':([24,25,26,28,29,30,31,32,33,34,35,36,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,120,121,128,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,160,162,167,169,170,175,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,103,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,103,-115,-42,-46,103,103,-43,103,103,-34,-74,-75,-76,-77,-78,-79,103,-94,-96,-98,-103,-104,-54,-55,103,103,103,-114,-116,-45,103,-44,-97,]),'GREATER':([24,25,26,28,29,30,31,32,33,34,35,36,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,120,121,128,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,160,162,167,169,170,175,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,104,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,104,-115,-42,-46,104,104,-43,104,104,-34,-74,-75,-76,-77,-78,-79,104,-94,-96,-98,-103,-104,-54,-55,104,104,104,-114,-116,-45,104,-44,-97,]),'EQ':([24,25,26,28,29,30,31,32,33,34,35,36,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,120,121,128,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,160,162,167,169,170,175,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,105,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,105,-115,-42,-46,105,105,166,105,105,-34,-74,-75,-76,-77,-78,-79,105,-94,-96,-98,-103,-104,-54,-55,105,105,105,-114,-116,-45,105,-44,-97,]),'NOTEQ':([24,25,26,28,29,30,31,32,33,34,35,36,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,120,121,128,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,160,162,167,169,170,175,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,106,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,106,-115,-42,-46,106,106,-43,106,106,-34,-74,-75,-76,-77,-78,-79,106,-94,-96,-98,-103,-104,-54,-55,106,106,106,-114,-116,-45,106,-44,-97,]),'PLUS':([24,25,26,28,29,30,31,32,33,34,35,36,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,120,121,128,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,160,162,167,169,170,175,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,107,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,107,-115,-42,-46,107,107,-43,107,107,-34,107,107,107,107,-78,-79,107,-94,-96,-98,-103,-104,-54,-55,107,107,107,-114,-116,-45,107,-44,-97,]),'MINUS':([24,25,26,28,29,30,31,32,33,34,35,36,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,120,121,128,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,160,162,167,169,170,175,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,108,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,108,-115,-42,-46,108,108,-43,108,108,-34,108,108,108,108,-78,-79,108,-94,-96,-98,-103,-104,-54,-55,108,108,108,-114,-116,-45,108,-44,-97,]),'TO':([24,25,26,28,29,30,31,32,33,34,35,36,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,120,121,128,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,158,160,162,167,169,170,175,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,109,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,109,-115,-42,-46,109,109,-43,109,109,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,109,109,109,-114,-116,-45,109,-44,-97,]),'THEN':([24,25,26,28,29,30,31,32,33,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,91,98,99,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,167,169,170,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,129,-115,-42,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-114,-116,-45,-44,-97,]),'COMMA':([24,25,26,28,29,30,31,32,33,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,72,73,98,99,120,121,122,123,131,132,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,167,169,170,175,176,177,178,180,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,117,118,-43,-115,-42,-46,-39,-40,-41,-43,168,-119,-120,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-114,-116,-45,-121,-118,-44,-97,168,]),'RBRACKET':([24,25,26,28,29,30,31,32,33,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,98,99,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,167,169,170,175,176,177,178,180,181,184,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-115,-42,-43,167,169,-119,-120,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-114,-116,-45,-121,-118,-44,-97,183,185,187,]),'R_QBRACKET':([24,25,26,28,29,30,31,32,33,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,98,99,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,167,169,170,177,178,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-115,-42,170,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-114,-116,-45,-44,-97,]),'CONTINUE':([24,25,26,28,29,30,31,32,33,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,98,99,131,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,155,167,169,170,173,175,176,177,178,180,],[-31,-32,-33,-108,-105,-106,-107,-109,-110,-111,-112,-113,-46,-47,-48,-49,-50,-51,-52,-53,-43,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-115,-42,-43,-119,-120,-34,-74,-75,-76,-77,-78,-79,-95,-94,-96,-98,-103,-104,-54,-55,-114,-116,-45,181,-121,-118,-44,-97,184,]),'POP':([47,55,99,120,131,170,177,],[110,-43,-42,110,-43,-45,-44,]),'FRONT':([77,110,],[125,149,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,80,],[2,127,]),'statement':([0,2,80,127,],[3,37,3,37,]),'declaration':([0,2,18,80,127,129,172,174,183,185,187,],[4,4,82,4,4,82,82,82,82,82,82,]),'comment':([0,2,80,127,],[5,5,5,5,]),'assignment':([0,2,15,18,76,80,117,118,127,129,172,174,183,185,187,],[6,6,72,83,122,6,72,72,6,83,83,83,83,83,83,]),'while':([0,2,18,80,127,129,172,174,183,185,187,],[7,7,84,7,7,84,84,84,84,84,84,]),'if':([0,2,18,80,127,129,172,174,183,185,187,],[8,8,85,8,8,85,85,85,85,85,85,]),'command':([0,2,18,80,127,129,172,174,183,185,187,],[9,9,86,9,9,86,86,86,86,86,86,]),'function':([0,2,18,80,127,129,172,174,183,185,187,],[10,10,87,10,10,87,87,87,87,87,87,]),'call':([0,2,12,18,19,76,80,89,97,100,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[11,11,54,88,54,54,11,54,54,54,54,54,54,54,54,54,54,54,54,54,11,88,54,54,88,54,88,88,88,88,]),'empty':([0,2,18,80,127,129,172,174,183,185,187,],[13,13,90,13,13,90,90,90,90,90,90,]),'type':([0,2,18,80,95,101,109,127,129,171,172,174,183,185,187,],[15,15,15,15,130,137,145,15,15,137,15,15,15,15,15,]),'variable':([0,2,12,15,18,19,76,80,89,97,100,103,104,105,106,107,108,109,117,118,124,125,126,127,129,166,168,172,173,174,183,185,187,],[17,17,47,71,17,47,120,17,47,47,47,47,47,47,47,47,47,47,71,71,47,47,47,17,17,47,47,17,47,17,17,17,17,]),'vector_command':([0,2,18,80,127,129,172,174,183,185,187,],[20,20,20,20,20,20,20,20,20,20,20,]),'robot_command':([0,2,12,18,19,76,80,89,97,100,103,104,105,106,107,108,109,124,125,126,127,129,166,168,172,173,174,183,185,187,],[21,21,51,21,51,51,21,51,51,51,51,51,51,51,51,51,51,51,51,51,21,21,51,51,21,51,21,21,21,21,]),'expression':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[46,91,121,128,135,136,138,139,140,141,142,143,144,158,160,162,175,135,135,]),'const':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'qstring':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'math_expression':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'converting_command':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'vector_pop':([12,19,76,89,97,100,103,104,105,106,107,108,109,124,125,126,166,168,173,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'variables':([15,117,118,],[69,156,157,]),'any':([16,],[74,]),'statements_group':([18,129,172,174,183,185,187,],[78,164,179,182,186,188,189,]),'inner_statement':([18,129,172,174,183,185,187,],[81,81,81,81,81,81,81,]),'indexing':([23,55,73,131,170,],[99,99,99,99,177,]),'string':([66,67,112,113,114,115,],[111,116,151,152,153,154,]),'parameters':([97,173,],[132,180,]),'parameter':([97,168,173,],[134,176,134,]),'vector_of':([109,171,],[146,178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',29),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',34),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',35),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',43),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',44),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',45),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',46),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',47),
  ('inner_statement -> function','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',49),
  ('inner_statement -> RETURN expression','inner_statement',2,'p_inner_statement','parser.py',50),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',51),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',60),
  ('statements -> statement','statements',1,'p_statements','parser.py',61),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',69),
  ('statement -> comment NEWLINE','statement',2,'p_statement','parser.py',70),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',71),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',72),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',73),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',75),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',76),
  ('statement -> RETURN expression NEWLINE','statement',3,'p_statement','parser.py',77),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',78),
  ('statement -> error','statement',1,'p_statement_error_no_nl','parser.py',87),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',93),
  ('declaration -> type error','declaration',2,'p_declaration_error','parser.py',98),
  ('comment -> COMMENT any','comment',2,'p_comment','parser.py',104),
  ('any -> any VARIABLE','any',2,'p_any','parser.py',109),
  ('any -> VARIABLE','any',1,'p_any','parser.py',110),
  ('type -> INTEGER','type',1,'p_type','parser.py',118),
  ('type -> STRING','type',1,'p_type','parser.py',119),
  ('type -> BOOL','type',1,'p_type','parser.py',120),
  ('type -> VECTOR OF type','type',3,'p_type','parser.py',121),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',131),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',132),
  ('variables -> variable','variables',1,'p_variables','parser.py',133),
  ('variables -> assignment','variables',1,'p_variables','parser.py',134),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',142),
  ('assignment -> variable ASSIGNMENT assignment','assignment',3,'p_assignment','parser.py',143),
  ('assignment -> variable ASSIGNMENT error','assignment',3,'p_assignment_err','parser.py',148),
  ('variable -> VARIABLE indexing','variable',2,'p_variable','parser.py',154),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',155),
  ('indexing -> L_QBRACKET expression R_QBRACKET indexing','indexing',4,'p_indexing','parser.py',163),
  ('indexing -> L_QBRACKET expression R_QBRACKET','indexing',3,'p_indexing','parser.py',164),
  ('expression -> variable','expression',1,'p_expression','parser.py',172),
  ('expression -> const','expression',1,'p_expression','parser.py',173),
  ('expression -> qstring','expression',1,'p_expression','parser.py',174),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',175),
  ('expression -> robot_command','expression',1,'p_expression','parser.py',176),
  ('expression -> converting_command','expression',1,'p_expression','parser.py',177),
  ('expression -> vector_pop','expression',1,'p_expression','parser.py',178),
  ('expression -> call','expression',1,'p_expression','parser.py',179),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',184),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',185),
  ('string -> VARIABLE string','string',2,'p_string','parser.py',190),
  ('string -> DECIMAL string','string',2,'p_string','parser.py',191),
  ('string -> FALSE string','string',2,'p_string','parser.py',192),
  ('string -> TRUE string','string',2,'p_string','parser.py',193),
  ('string -> FALSE','string',1,'p_string','parser.py',194),
  ('string -> TRUE','string',1,'p_string','parser.py',195),
  ('string -> DECIMAL','string',1,'p_string','parser.py',196),
  ('string -> VARIABLE','string',1,'p_string','parser.py',197),
  ('const -> TRUE','const',1,'p_const','parser.py',208),
  ('const -> FALSE','const',1,'p_const','parser.py',209),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',210),
  ('const -> DECIMAL','const',1,'p_const','parser.py',211),
  ('const -> EXIT','const',1,'p_const','parser.py',212),
  ('const -> WOOD','const',1,'p_const','parser.py',213),
  ('const -> STEEL','const',1,'p_const','parser.py',214),
  ('const -> GLASS','const',1,'p_const','parser.py',215),
  ('const -> CONCRETE','const',1,'p_const','parser.py',216),
  ('const -> PLASTIC','const',1,'p_const','parser.py',217),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',222),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',223),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',224),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',225),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',226),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',227),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',232),
  ('while -> DO error','while',2,'p_while_err','parser.py',237),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',243),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if_else','parser.py',248),
  ('if -> IF error','if',2,'p_if_err','parser.py',253),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',259),
  ('function -> FUNCTION OF type VARIABLE BRACKETS statements_group','function',6,'p_function','parser.py',260),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters CONTINUE RBRACKET statements_group','function',9,'p_function_continue','parser.py',273),
  ('function -> FUNCTION OF type VARIABLE LBRACKET CONTINUE RBRACKET statements_group','function',8,'p_function_continue','parser.py',274),
  ('function -> FUNCTION error','function',2,'p_function_err','parser.py',289),
  ('command -> vector_command','command',1,'p_command','parser.py',295),
  ('command -> robot_command','command',1,'p_command','parser.py',296),
  ('command -> vector_command error','command',2,'p_command_error','parser.py',301),
  ('command -> robot_command error','command',2,'p_command_error','parser.py',302),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',308),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',309),
  ('converting_command -> expression TO vector_of','converting_command',3,'p_converting_command','parser.py',310),
  ('vector_of -> VECTOR OF vector_of','vector_of',3,'p_vector_of','parser.py',315),
  ('vector_of -> VECTOR','vector_of',1,'p_vector_of','parser.py',316),
  ('vector_command -> variable PUSH BACK expression','vector_command',4,'p_vector_command','parser.py',324),
  ('vector_command -> variable PUSH FRONT expression','vector_command',4,'p_vector_command','parser.py',325),
  ('vector_command -> variable PUSH BACK error','vector_command',4,'p_vector_command_err','parser.py',330),
  ('vector_command -> variable PUSH FRONT error','vector_command',4,'p_vector_command_err','parser.py',331),
  ('vector_pop -> variable POP BACK','vector_pop',3,'p_vector_command_pop','parser.py',337),
  ('vector_pop -> variable POP FRONT','vector_pop',3,'p_vector_command_pop','parser.py',338),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',343),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',344),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',345),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',346),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',347),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',348),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',349),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',350),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',351),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',356),
  ('call -> VARIABLE BRACKETS','call',2,'p_call','parser.py',357),
  ('call -> VARIABLE LBRACKET error RBRACKET','call',4,'p_call_err','parser.py',365),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',371),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',376),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',377),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',385),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',386),
]
