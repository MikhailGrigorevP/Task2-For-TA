
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BACK BEGIN BOOL COMMA CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODapplication : statementsstatements_group : BEGIN statements END\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | function\n                     | call\n                     | RETURN expression\n                     | emptystatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN expression NEWLINE\n                     | empty NEWLINEdeclaration : type variablestype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF type\n        variables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expressionvariable : VARIABLE R_QBRACKET expression L_QBRACKET\n                    | VARIABLEexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : string VARIABLE\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | MINUS expression\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expressionwhile : DO statements_group UNTIL expressionif : IF expression THEN statements_group\n              | IF expression THEN statements_group ELSE statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_groupcommand : vector_command\n                   | robot_command\n                   | converting_commandconverting_command : expression TO type\n                              | expression TO expressionvector_command : PUSH BACK expression\n                          | POP BACK expression\n                          | PUSH FRONT expression\n                          | POP FRONT expressionrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKETempty : parameters : parameters COMMA parameter\n                     | parameter\n                     | parameters CONTINUE\n                     | emptyparameter : expression\n                    | VARIABLE EQ expression'
    
_lr_action_items = {'RETURN':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[11,11,-14,89,-13,-15,-16,-17,-18,-19,-20,-21,-23,11,-22,11,89,89,89,]),'DO':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[16,16,-14,16,-13,-15,-16,-17,-18,-19,-20,-21,-23,16,-22,16,16,16,16,]),'IF':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[17,17,-14,17,-13,-15,-16,-17,-18,-19,-20,-21,-23,17,-22,17,17,17,17,]),'FUNCTION':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[21,21,-14,21,-13,-15,-16,-17,-18,-19,-20,-21,-23,21,-22,21,21,21,21,]),'VARIABLE':([0,2,3,11,14,16,17,23,24,25,51,52,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,100,101,102,104,113,114,116,117,119,120,127,133,141,143,146,147,152,],[22,22,-14,65,77,22,65,-25,-26,-27,101,101,65,-13,-15,-16,-17,-18,-19,-20,-21,65,65,65,65,65,65,65,-23,65,22,65,121,65,65,65,65,65,133,-44,133,-22,77,77,65,22,22,140,-28,-43,65,121,22,121,22,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,13,18,19,20,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,73,74,75,76,77,80,81,82,83,84,85,86,87,88,90,103,104,105,106,107,108,109,110,111,112,115,117,118,119,127,128,129,130,131,132,134,135,136,137,138,139,142,145,146,150,152,153,],[-85,-85,-14,55,56,57,58,59,60,61,73,-66,-67,-68,-25,-26,-27,-78,-75,-76,-77,-79,-80,-81,-82,-83,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-13,-15,-16,-17,-18,-19,-20,-21,104,-36,-40,-35,-23,-24,-31,-32,-35,-85,-3,-4,-5,-6,-7,-8,-9,-10,-12,-57,-22,-70,-69,-55,-56,-58,-59,-60,-61,-33,-85,-11,-85,-28,-71,-73,-72,-74,-41,-42,-29,-30,-62,-2,-63,-84,-34,-85,-64,-85,-65,]),'INTEGER':([0,2,3,16,54,55,56,57,58,59,60,61,66,73,80,92,95,104,117,119,146,152,],[23,23,-14,23,-13,-15,-16,-17,-18,-19,-20,-21,23,-23,23,23,23,-22,23,23,23,23,]),'STRING':([0,2,3,16,54,55,56,57,58,59,60,61,66,73,80,92,95,104,117,119,146,152,],[24,24,-14,24,-13,-15,-16,-17,-18,-19,-20,-21,24,-23,24,24,24,-22,24,24,24,24,]),'BOOL':([0,2,3,16,54,55,56,57,58,59,60,61,66,73,80,92,95,104,117,119,146,152,],[25,25,-14,25,-13,-15,-16,-17,-18,-19,-20,-21,25,-23,25,25,25,-22,25,25,25,25,]),'VECTOR':([0,2,3,16,54,55,56,57,58,59,60,61,66,73,80,92,95,104,117,119,146,152,],[26,26,-14,26,-13,-15,-16,-17,-18,-19,-20,-21,26,-23,26,26,26,-22,26,26,26,26,]),'PUSH':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[27,27,-14,27,-13,-15,-16,-17,-18,-19,-20,-21,-23,27,-22,27,27,27,27,]),'POP':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[29,29,-14,29,-13,-15,-16,-17,-18,-19,-20,-21,-23,29,-22,29,29,29,29,]),'LEFT':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[30,30,-14,30,-13,-15,-16,-17,-18,-19,-20,-21,-23,30,-22,30,30,30,30,]),'RIGHT':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[31,31,-14,31,-13,-15,-16,-17,-18,-19,-20,-21,-23,31,-22,31,31,31,31,]),'FORWARD':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[32,32,-14,32,-13,-15,-16,-17,-18,-19,-20,-21,-23,32,-22,32,32,32,32,]),'BACK':([0,2,3,16,27,29,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[28,28,-14,28,96,98,-13,-15,-16,-17,-18,-19,-20,-21,-23,28,-22,28,28,28,28,]),'ROTATE_RIGHT':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[33,33,-14,33,-13,-15,-16,-17,-18,-19,-20,-21,-23,33,-22,33,33,33,33,]),'ROTATE_LEFT':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[34,34,-14,34,-13,-15,-16,-17,-18,-19,-20,-21,-23,34,-22,34,34,34,34,]),'LMS':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[35,35,-14,35,-13,-15,-16,-17,-18,-19,-20,-21,-23,35,-22,35,35,35,35,]),'REFLECT':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[36,36,-14,36,-13,-15,-16,-17,-18,-19,-20,-21,-23,36,-22,36,36,36,36,]),'DRILL':([0,2,3,16,54,55,56,57,58,59,60,61,73,80,104,117,119,146,152,],[37,37,-14,37,-13,-15,-16,-17,-18,-19,-20,-21,-23,37,-22,37,37,37,37,]),'TRUE':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[41,41,-14,41,41,41,41,-13,-15,-16,-17,-18,-19,-20,-21,41,41,41,41,41,41,41,-23,41,41,41,41,41,41,41,41,41,-22,41,41,41,41,41,41,41,41,]),'FALSE':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[42,42,-14,42,42,42,42,-13,-15,-16,-17,-18,-19,-20,-21,42,42,42,42,42,42,42,-23,42,42,42,42,42,42,42,42,42,-22,42,42,42,42,42,42,42,42,]),'UNDEFINED':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[43,43,-14,43,43,43,43,-13,-15,-16,-17,-18,-19,-20,-21,43,43,43,43,43,43,43,-23,43,43,43,43,43,43,43,43,43,-22,43,43,43,43,43,43,43,43,]),'DECIMAL':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[44,44,-14,44,44,44,44,-13,-15,-16,-17,-18,-19,-20,-21,44,44,44,44,44,44,44,-23,44,44,44,44,44,44,44,44,44,-22,44,44,44,44,44,44,44,44,]),'EXIT':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[45,45,-14,45,45,45,45,-13,-15,-16,-17,-18,-19,-20,-21,45,45,45,45,45,45,45,-23,45,45,45,45,45,45,45,45,45,-22,45,45,45,45,45,45,45,45,]),'WOOD':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[46,46,-14,46,46,46,46,-13,-15,-16,-17,-18,-19,-20,-21,46,46,46,46,46,46,46,-23,46,46,46,46,46,46,46,46,46,-22,46,46,46,46,46,46,46,46,]),'STEEL':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[47,47,-14,47,47,47,47,-13,-15,-16,-17,-18,-19,-20,-21,47,47,47,47,47,47,47,-23,47,47,47,47,47,47,47,47,47,-22,47,47,47,47,47,47,47,47,]),'GLASS':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[48,48,-14,48,48,48,48,-13,-15,-16,-17,-18,-19,-20,-21,48,48,48,48,48,48,48,-23,48,48,48,48,48,48,48,48,48,-22,48,48,48,48,48,48,48,48,]),'CONCRETE':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[49,49,-14,49,49,49,49,-13,-15,-16,-17,-18,-19,-20,-21,49,49,49,49,49,49,49,-23,49,49,49,49,49,49,49,49,49,-22,49,49,49,49,49,49,49,49,]),'PLASTIC':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,104,116,117,119,141,143,146,147,152,],[50,50,-14,50,50,50,50,-13,-15,-16,-17,-18,-19,-20,-21,50,50,50,50,50,50,50,-23,50,50,50,50,50,50,50,50,50,-22,50,50,50,50,50,50,50,50,]),'DOUBLE_QUOTE':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,100,101,104,116,117,119,133,141,143,146,147,152,],[51,51,-14,51,51,51,51,-13,-15,-16,-17,-18,-19,-20,-21,51,51,51,51,51,51,51,-23,51,51,51,51,51,51,51,51,51,132,-44,-22,51,51,51,-43,51,51,51,51,51,]),'QUOTE':([0,2,3,11,16,17,53,54,55,56,57,58,59,60,61,66,67,68,69,70,71,72,73,78,80,89,93,94,96,97,98,99,101,102,104,116,117,119,133,141,143,146,147,152,],[52,52,-14,52,52,52,52,-13,-15,-16,-17,-18,-19,-20,-21,52,52,52,52,52,52,52,-23,52,52,52,52,52,52,52,52,52,-44,134,-22,52,52,52,-43,52,52,52,52,52,]),'MINUS':([0,2,3,10,11,12,15,16,17,22,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,78,80,88,89,91,93,94,96,97,98,99,103,104,105,107,108,109,110,111,112,115,116,117,118,119,121,125,126,128,129,130,131,132,134,137,141,142,143,145,146,147,148,152,],[53,53,-14,-40,53,68,-36,53,53,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,53,-13,-15,-16,-17,-18,-19,-20,-21,68,-36,-40,-35,53,53,53,53,53,53,53,-23,53,53,-40,53,68,53,53,53,53,53,53,68,-22,68,68,68,68,68,68,68,68,53,53,68,53,-35,68,68,68,68,68,68,-41,-42,68,53,-84,53,-34,53,53,68,53,]),'$end':([1,2,3,54,55,56,57,58,59,60,61,73,104,],[0,-1,-14,-13,-15,-16,-17,-18,-19,-20,-21,-23,-22,]),'END':([3,54,55,56,57,58,59,60,61,73,104,117,],[-14,-13,-15,-16,-17,-18,-19,-20,-21,-23,-22,138,]),'TO':([10,12,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,88,103,107,108,109,110,111,112,132,134,142,145,],[-40,66,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-40,-57,-55,-56,-58,-59,-60,-61,-41,-42,-84,-34,]),'PLUS':([10,12,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,62,63,64,65,88,91,103,105,107,108,109,110,111,112,115,118,121,125,126,128,129,130,131,132,134,137,142,145,148,],[-40,67,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,67,-36,-40,-35,-40,67,67,67,67,67,67,67,67,67,67,67,-35,67,67,67,67,67,67,-41,-42,67,-84,-34,67,]),'LESS':([10,12,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,62,63,64,65,88,91,103,105,107,108,109,110,111,112,115,118,121,125,126,128,129,130,131,132,134,137,142,145,148,],[-40,69,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,69,-36,-40,-35,-40,69,69,69,69,69,69,69,69,69,69,69,-35,69,69,69,69,69,69,-41,-42,69,-84,-34,69,]),'GREATER':([10,12,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,62,63,64,65,88,91,103,105,107,108,109,110,111,112,115,118,121,125,126,128,129,130,131,132,134,137,142,145,148,],[-40,70,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,70,-36,-40,-35,-40,70,70,70,70,70,70,70,70,70,70,70,-35,70,70,70,70,70,70,-41,-42,70,-84,-34,70,]),'EQ':([10,12,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,62,63,64,65,88,91,103,105,107,108,109,110,111,112,115,118,121,125,126,128,129,130,131,132,134,137,142,145,148,],[-40,71,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,71,-36,-40,-35,-40,71,71,71,71,71,71,71,71,71,71,71,141,71,71,71,71,71,71,-41,-42,71,-84,-34,71,]),'NOTEQ':([10,12,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,62,63,64,65,88,91,103,105,107,108,109,110,111,112,115,118,121,125,126,128,129,130,131,132,134,137,142,145,148,],[-40,72,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,72,-36,-40,-35,-40,72,72,72,72,72,72,72,72,72,72,72,-35,72,72,72,72,72,72,-41,-42,72,-84,-34,72,]),'ASSIGNMENT':([15,22,75,77,145,],[78,-35,78,-35,-34,]),'BEGIN':([16,119,146,152,],[80,80,80,80,]),'UNTIL':([16,18,19,20,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,74,75,76,77,79,81,82,83,84,85,86,87,88,90,103,105,106,107,108,109,110,111,112,115,118,119,127,128,129,130,131,132,134,135,136,137,138,139,142,145,146,150,152,153,],[-85,-66,-67,-68,-25,-26,-27,-78,-75,-76,-77,-79,-80,-81,-82,-83,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-24,-31,-32,-35,116,-3,-4,-5,-6,-7,-8,-9,-10,-12,-57,-70,-69,-55,-56,-58,-59,-60,-61,-33,-11,-85,-28,-71,-73,-72,-74,-41,-42,-29,-30,-62,-2,-63,-84,-34,-85,-64,-85,-65,]),'ELSE':([18,19,20,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,74,75,76,77,81,82,83,84,85,86,87,88,90,103,105,106,107,108,109,110,111,112,115,118,119,127,128,129,130,131,132,134,135,136,137,138,139,142,145,146,150,152,153,],[-66,-67,-68,-25,-26,-27,-78,-75,-76,-77,-79,-80,-81,-82,-83,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-24,-31,-32,-35,-3,-4,-5,-6,-7,-8,-9,-10,-12,-57,-70,-69,-55,-56,-58,-59,-60,-61,-33,-11,-85,-28,-71,-73,-72,-74,-41,-42,-29,-30,-62,-2,146,-84,-34,-85,-64,-85,-65,]),'OF':([21,26,],[92,95,]),'LBRACKET':([22,65,121,140,],[93,93,93,147,]),'R_QBRACKET':([22,65,77,121,],[94,94,94,94,]),'FRONT':([27,29,],[97,99,]),'THEN':([38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,91,103,107,108,109,110,111,112,132,134,142,145,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,119,-57,-55,-56,-58,-59,-60,-61,-41,-42,-84,-34,]),'COMMA':([38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,75,76,77,93,103,107,108,109,110,111,112,115,121,122,123,124,125,132,134,142,144,145,147,148,149,151,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,113,114,-35,-85,-57,-55,-56,-58,-59,-60,-61,-33,-35,143,-87,-89,-90,-41,-42,-84,-88,-34,-85,-91,-86,143,]),'RBRACKET':([38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,93,103,107,108,109,110,111,112,121,122,123,124,125,132,134,142,144,145,147,148,149,151,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-85,-57,-55,-56,-58,-59,-60,-61,-35,142,-87,-89,-90,-41,-42,-84,-88,-34,-85,-91,-86,152,]),'CONTINUE':([38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,93,103,107,108,109,110,111,112,121,122,123,124,125,132,134,142,144,145,147,148,149,151,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-85,-57,-55,-56,-58,-59,-60,-61,-35,144,-87,-89,-90,-41,-42,-84,-88,-34,-85,-91,-86,144,]),'L_QBRACKET':([38,39,40,41,42,43,44,45,46,47,48,49,50,63,64,65,103,107,108,109,110,111,112,126,132,134,142,145,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-57,-55,-56,-58,-59,-60,-61,145,-41,-42,-84,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'application':([0,],[1,]),'statements':([0,80,],[2,117,]),'statement':([0,2,80,117,],[3,54,3,54,]),'declaration':([0,2,16,80,117,119,146,152,],[4,4,82,4,4,82,82,82,]),'assignment':([0,2,14,16,80,113,114,117,119,146,152,],[5,5,76,83,5,76,76,5,83,83,83,]),'while':([0,2,16,80,117,119,146,152,],[6,6,84,6,6,84,84,84,]),'if':([0,2,16,80,117,119,146,152,],[7,7,85,7,7,85,85,85,]),'command':([0,2,16,80,117,119,146,152,],[8,8,86,8,8,86,86,86,]),'function':([0,2,16,80,117,119,146,152,],[9,9,87,9,9,87,87,87,]),'call':([0,2,11,16,17,53,66,67,68,69,70,71,72,78,80,89,93,94,96,97,98,99,116,117,119,141,143,146,147,152,],[10,10,64,88,64,64,64,64,64,64,64,64,64,64,10,64,64,64,64,64,64,64,64,10,88,64,64,88,64,88,]),'expression':([0,2,11,16,17,53,66,67,68,69,70,71,72,78,80,89,93,94,96,97,98,99,116,117,119,141,143,146,147,152,],[12,12,62,12,91,103,105,107,108,109,110,111,112,115,12,118,125,126,128,129,130,131,137,12,12,148,125,12,125,12,]),'empty':([0,2,16,80,93,117,119,146,147,152,],[13,13,90,13,124,13,90,90,124,90,]),'type':([0,2,16,66,80,92,95,117,119,146,152,],[14,14,14,106,14,120,127,14,14,14,14,]),'variable':([0,2,11,14,16,17,53,66,67,68,69,70,71,72,78,80,89,93,94,96,97,98,99,113,114,116,117,119,141,143,146,147,152,],[15,15,63,75,15,63,63,63,63,63,63,63,63,63,63,15,63,63,63,63,63,63,63,75,75,63,15,15,63,63,15,63,15,]),'vector_command':([0,2,16,80,117,119,146,152,],[18,18,18,18,18,18,18,18,]),'robot_command':([0,2,16,80,117,119,146,152,],[19,19,19,19,19,19,19,19,]),'converting_command':([0,2,16,80,117,119,146,152,],[20,20,20,20,20,20,20,20,]),'const':([0,2,11,16,17,53,66,67,68,69,70,71,72,78,80,89,93,94,96,97,98,99,116,117,119,141,143,146,147,152,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'qstring':([0,2,11,16,17,53,66,67,68,69,70,71,72,78,80,89,93,94,96,97,98,99,116,117,119,141,143,146,147,152,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'math_expression':([0,2,11,16,17,53,66,67,68,69,70,71,72,78,80,89,93,94,96,97,98,99,116,117,119,141,143,146,147,152,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'variables':([14,113,114,],[74,135,136,]),'statements_group':([16,119,146,152,],[79,139,150,153,]),'inner_statement':([16,119,146,152,],[81,81,81,81,]),'string':([51,52,],[100,102,]),'parameters':([93,147,],[122,151,]),'parameter':([93,143,147,],[123,149,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> application","S'",1,None,None,None),
  ('application -> statements','application',1,'p_application','parser.py',34),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',39),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',40),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',49),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',50),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',51),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',52),
  ('inner_statement -> function','inner_statement',1,'p_inner_statement','parser.py',53),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',54),
  ('inner_statement -> RETURN expression','inner_statement',2,'p_inner_statement','parser.py',55),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',56),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',65),
  ('statements -> statement','statements',1,'p_statements','parser.py',66),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',75),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',76),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',77),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',78),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',79),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',80),
  ('statement -> RETURN expression NEWLINE','statement',3,'p_statement','parser.py',81),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',82),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',90),
  ('type -> INTEGER','type',1,'p_type','parser.py',95),
  ('type -> STRING','type',1,'p_type','parser.py',96),
  ('type -> BOOL','type',1,'p_type','parser.py',97),
  ('type -> VECTOR OF type','type',3,'p_type','parser.py',98),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',107),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',108),
  ('variables -> variable','variables',1,'p_variables','parser.py',109),
  ('variables -> assignment','variables',1,'p_variables','parser.py',110),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',118),
  ('variable -> VARIABLE R_QBRACKET expression L_QBRACKET','variable',4,'p_variable','parser.py',123),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',124),
  ('expression -> variable','expression',1,'p_expression','parser.py',132),
  ('expression -> const','expression',1,'p_expression','parser.py',133),
  ('expression -> qstring','expression',1,'p_expression','parser.py',134),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',135),
  ('expression -> call','expression',1,'p_expression','parser.py',136),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',141),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',142),
  ('string -> string VARIABLE','string',2,'p_string','parser.py',147),
  ('string -> VARIABLE','string',1,'p_string','parser.py',148),
  ('const -> TRUE','const',1,'p_const','parser.py',156),
  ('const -> FALSE','const',1,'p_const','parser.py',157),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',158),
  ('const -> DECIMAL','const',1,'p_const','parser.py',159),
  ('const -> EXIT','const',1,'p_const','parser.py',160),
  ('const -> WOOD','const',1,'p_const','parser.py',161),
  ('const -> STEEL','const',1,'p_const','parser.py',162),
  ('const -> GLASS','const',1,'p_const','parser.py',163),
  ('const -> CONCRETE','const',1,'p_const','parser.py',164),
  ('const -> PLASTIC','const',1,'p_const','parser.py',165),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',170),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',171),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',172),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',173),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',174),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',175),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',176),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',184),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',189),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if','parser.py',190),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',198),
  ('command -> vector_command','command',1,'p_command','parser.py',203),
  ('command -> robot_command','command',1,'p_command','parser.py',204),
  ('command -> converting_command','command',1,'p_command','parser.py',205),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',210),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',211),
  ('vector_command -> PUSH BACK expression','vector_command',3,'p_vector_command','parser.py',216),
  ('vector_command -> POP BACK expression','vector_command',3,'p_vector_command','parser.py',217),
  ('vector_command -> PUSH FRONT expression','vector_command',3,'p_vector_command','parser.py',218),
  ('vector_command -> POP FRONT expression','vector_command',3,'p_vector_command','parser.py',219),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',224),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',225),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',226),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',227),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',228),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',229),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',230),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',231),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',232),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',237),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',244),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',249),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',250),
  ('parameters -> parameters CONTINUE','parameters',2,'p_parameters','parser.py',251),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',252),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',260),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',261),
]
