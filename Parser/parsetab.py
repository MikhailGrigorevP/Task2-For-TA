
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BACK BEGIN BOOL COMMA CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODapplication : statementsstatements_group : BEGIN statements END\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | function\n                     | call\n                     | RETURN\n                     | emptystatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN NEWLINE\n                     | empty NEWLINEdeclaration : type variablestype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF\n        variables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expressionvariable : VARIABLE R_QBRACKET expression L_QBRACKET\n                    | VARIABLEexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : string VARIABLE\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | MINUS expression\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expressionwhile : DO statements_group UNTIL expressionif : IF expression THEN statements_group\n              | IF expression THEN statements_group ELSE statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_groupcommand : vector_command\n                   | robot_command\n                   | converting_commandconverting_command : expression TO type\n                              | expression TO expressionvector_command : PUSH BACK expression\n                          | POP BACK expression\n                          | PUSH FRONT expression\n                          | POP FRONT expressionrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKETempty : parameters : parameters COMMA parameter\n                     | parameter\n                     | parameters CONTINUE\n                     | emptyparameter : expression\n                    | VARIABLE EQ expression'
    
_lr_action_items = {'RETURN':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[11,11,-14,86,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,11,11,86,86,86,]),'DO':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[16,16,-14,16,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,16,16,16,16,16,]),'IF':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[17,17,-14,17,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,17,17,17,17,17,]),'FUNCTION':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[21,21,-14,21,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,21,21,21,21,21,]),'VARIABLE':([0,2,3,13,16,17,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,95,96,97,98,99,100,101,102,104,105,115,116,117,118,130,138,140,143,144,149,],[22,22,-14,67,22,91,-25,-26,-27,101,101,91,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,91,91,91,91,91,91,91,91,22,119,91,-28,91,91,91,91,130,-44,130,67,67,91,22,22,137,-43,91,119,22,119,22,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,18,19,20,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,80,81,82,83,84,85,86,87,89,90,91,95,103,106,107,108,109,110,111,112,113,114,116,117,125,126,127,128,129,131,132,133,134,135,136,139,142,143,147,149,150,],[-85,-85,-14,55,56,57,58,59,60,61,62,63,-66,-67,-68,-25,-26,-27,-78,-75,-76,-77,-79,-80,-81,-82,-83,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-31,-32,-35,-85,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-36,-40,-35,-28,-57,-33,-70,-69,-55,-56,-58,-59,-60,-61,-85,-85,-71,-73,-72,-74,-41,-42,-29,-30,-62,-2,-63,-84,-34,-85,-64,-85,-65,]),'INTEGER':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,92,116,117,143,149,],[23,23,-14,23,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,23,23,23,23,23,23,23,]),'STRING':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,92,116,117,143,149,],[24,24,-14,24,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,24,24,24,24,24,24,24,]),'BOOL':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,92,116,117,143,149,],[25,25,-14,25,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,25,25,25,25,25,25,25,]),'VECTOR':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,92,116,117,143,149,],[26,26,-14,26,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,26,26,26,26,26,26,26,]),'PUSH':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[27,27,-14,27,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,27,27,27,27,27,]),'POP':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[29,29,-14,29,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,29,29,29,29,29,]),'LEFT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[30,30,-14,30,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,30,30,30,30,30,]),'RIGHT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[31,31,-14,31,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,31,31,31,31,31,]),'FORWARD':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[32,32,-14,32,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,32,32,32,32,32,]),'BACK':([0,2,3,16,27,29,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[28,28,-14,28,96,98,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,28,28,28,28,28,]),'ROTATE_RIGHT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[33,33,-14,33,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,33,33,33,33,33,]),'ROTATE_LEFT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[34,34,-14,34,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,34,34,34,34,34,]),'LMS':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[35,35,-14,35,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,35,35,35,35,35,]),'REFLECT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[36,36,-14,36,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,36,36,36,36,36,]),'DRILL':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,116,117,143,149,],[37,37,-14,37,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,37,37,37,37,37,]),'TRUE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[41,41,-14,41,41,41,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FALSE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[42,42,-14,42,42,42,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'UNDEFINED':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[43,43,-14,43,43,43,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'DECIMAL':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[44,44,-14,44,44,44,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'EXIT':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[45,45,-14,45,45,45,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'WOOD':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[46,46,-14,46,46,46,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'STEEL':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[47,47,-14,47,47,47,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'GLASS':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[48,48,-14,48,48,48,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'CONCRETE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[49,49,-14,49,49,49,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'PLASTIC':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[50,50,-14,50,50,50,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'DOUBLE_QUOTE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,100,101,115,116,117,130,138,140,143,144,149,],[51,51,-14,51,51,51,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,129,-44,51,51,51,-43,51,51,51,51,51,]),'QUOTE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,101,102,115,116,117,130,138,140,143,144,149,],[52,52,-14,52,52,52,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-44,131,52,52,52,-43,52,52,52,52,52,]),'MINUS':([0,2,3,10,14,15,16,17,22,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,85,88,89,90,91,93,94,96,97,98,99,103,106,107,109,110,111,112,113,114,115,116,117,119,123,124,125,126,127,128,129,131,134,138,139,140,142,143,144,145,149,],[53,53,-14,-40,-36,71,53,53,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,53,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,53,53,53,53,53,53,53,53,53,-40,71,-36,-40,-35,53,53,53,53,53,53,71,71,71,71,71,71,71,71,71,53,53,53,-35,71,71,71,71,71,71,-41,-42,71,53,-84,53,-34,53,53,71,53,]),'$end':([1,2,3,54,55,56,57,58,59,60,61,62,63,],[0,-1,-14,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,]),'END':([3,54,55,56,57,58,59,60,61,62,63,116,],[-14,-13,-15,-16,-17,-18,-19,-20,-21,-22,-23,135,]),'TO':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,85,89,90,91,103,109,110,111,112,113,114,129,131,139,142,],[-40,-36,69,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-36,-40,-35,-57,-55,-56,-58,-59,-60,-61,-41,-42,-84,-34,]),'PLUS':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,85,88,89,90,91,103,106,107,109,110,111,112,113,114,119,123,124,125,126,127,128,129,131,134,139,142,145,],[-40,-36,70,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,70,-36,-40,-35,70,70,70,70,70,70,70,70,70,-35,70,70,70,70,70,70,-41,-42,70,-84,-34,70,]),'LESS':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,85,88,89,90,91,103,106,107,109,110,111,112,113,114,119,123,124,125,126,127,128,129,131,134,139,142,145,],[-40,-36,72,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,72,-36,-40,-35,72,72,72,72,72,72,72,72,72,-35,72,72,72,72,72,72,-41,-42,72,-84,-34,72,]),'GREATER':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,85,88,89,90,91,103,106,107,109,110,111,112,113,114,119,123,124,125,126,127,128,129,131,134,139,142,145,],[-40,-36,73,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,73,-36,-40,-35,73,73,73,73,73,73,73,73,73,-35,73,73,73,73,73,73,-41,-42,73,-84,-34,73,]),'EQ':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,85,88,89,90,91,103,106,107,109,110,111,112,113,114,119,123,124,125,126,127,128,129,131,134,139,142,145,],[-40,-36,74,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,74,-36,-40,-35,74,74,74,74,74,74,74,74,74,138,74,74,74,74,74,74,-41,-42,74,-84,-34,74,]),'NOTEQ':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,85,88,89,90,91,103,106,107,109,110,111,112,113,114,119,123,124,125,126,127,128,129,131,134,139,142,145,],[-40,-36,75,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,75,-36,-40,-35,75,75,75,75,75,75,75,75,75,-35,75,75,75,75,75,75,-41,-42,75,-84,-34,75,]),'ASSIGNMENT':([14,22,65,67,142,],[68,-35,68,-35,-34,]),'BEGIN':([16,117,143,149,],[77,77,77,77,]),'UNTIL':([16,18,19,20,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,64,65,66,67,76,78,79,80,81,82,83,84,85,86,87,89,90,91,95,103,106,107,108,109,110,111,112,113,114,117,125,126,127,128,129,131,132,133,134,135,136,139,142,143,147,149,150,],[-85,-66,-67,-68,-25,-26,-27,-78,-75,-76,-77,-79,-80,-81,-82,-83,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-24,-31,-32,-35,115,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-36,-40,-35,-28,-57,-33,-70,-69,-55,-56,-58,-59,-60,-61,-85,-71,-73,-72,-74,-41,-42,-29,-30,-62,-2,-63,-84,-34,-85,-64,-85,-65,]),'ELSE':([18,19,20,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,64,65,66,67,78,79,80,81,82,83,84,85,86,87,89,90,91,95,103,106,107,108,109,110,111,112,113,114,117,125,126,127,128,129,131,132,133,134,135,136,139,142,143,147,149,150,],[-66,-67,-68,-25,-26,-27,-78,-75,-76,-77,-79,-80,-81,-82,-83,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-24,-31,-32,-35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-36,-40,-35,-28,-57,-33,-70,-69,-55,-56,-58,-59,-60,-61,-85,-71,-73,-72,-74,-41,-42,-29,-30,-62,-2,143,-84,-34,-85,-64,-85,-65,]),'OF':([21,26,],[92,95,]),'LBRACKET':([22,91,119,137,],[93,93,93,144,]),'R_QBRACKET':([22,67,91,119,],[94,94,94,94,]),'FRONT':([27,29,],[97,99,]),'THEN':([38,39,40,41,42,43,44,45,46,47,48,49,50,88,89,90,91,103,109,110,111,112,113,114,129,131,139,142,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,117,-36,-40,-35,-57,-55,-56,-58,-59,-60,-61,-41,-42,-84,-34,]),'COMMA':([38,39,40,41,42,43,44,45,46,47,48,49,50,65,66,67,89,90,91,93,103,106,109,110,111,112,113,114,119,120,121,122,123,129,131,139,141,142,144,145,146,148,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,104,105,-35,-36,-40,-35,-85,-57,-33,-55,-56,-58,-59,-60,-61,-35,140,-87,-89,-90,-41,-42,-84,-88,-34,-85,-91,-86,140,]),'RBRACKET':([38,39,40,41,42,43,44,45,46,47,48,49,50,89,90,91,93,103,109,110,111,112,113,114,119,120,121,122,123,129,131,139,141,142,144,145,146,148,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-85,-57,-55,-56,-58,-59,-60,-61,-35,139,-87,-89,-90,-41,-42,-84,-88,-34,-85,-91,-86,149,]),'CONTINUE':([38,39,40,41,42,43,44,45,46,47,48,49,50,89,90,91,93,103,109,110,111,112,113,114,119,120,121,122,123,129,131,139,141,142,144,145,146,148,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-85,-57,-55,-56,-58,-59,-60,-61,-35,141,-87,-89,-90,-41,-42,-84,-88,-34,-85,-91,-86,141,]),'L_QBRACKET':([38,39,40,41,42,43,44,45,46,47,48,49,50,89,90,91,103,109,110,111,112,113,114,124,129,131,139,142,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-57,-55,-56,-58,-59,-60,-61,142,-41,-42,-84,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'application':([0,],[1,]),'statements':([0,77,],[2,116,]),'statement':([0,2,77,116,],[3,54,3,54,]),'declaration':([0,2,16,77,116,117,143,149,],[4,4,79,4,4,79,79,79,]),'assignment':([0,2,13,16,77,104,105,116,117,143,149,],[5,5,66,80,5,66,66,5,80,80,80,]),'while':([0,2,16,77,116,117,143,149,],[6,6,81,6,6,81,81,81,]),'if':([0,2,16,77,116,117,143,149,],[7,7,82,7,7,82,82,82,]),'command':([0,2,16,77,116,117,143,149,],[8,8,83,8,8,83,83,83,]),'function':([0,2,16,77,116,117,143,149,],[9,9,84,9,9,84,84,84,]),'call':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[10,10,85,90,90,90,90,90,90,90,90,90,90,10,90,90,90,90,90,90,90,10,85,90,90,85,90,85,]),'empty':([0,2,16,77,93,116,117,143,144,149,],[12,12,87,12,122,12,87,87,122,87,]),'type':([0,2,16,69,77,92,116,117,143,149,],[13,13,13,108,13,118,13,13,13,13,]),'variable':([0,2,13,16,17,53,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,104,105,115,116,117,138,140,143,144,149,],[14,14,65,14,89,89,89,89,89,89,89,89,89,89,14,89,89,89,89,89,89,65,65,89,14,14,89,89,14,89,14,]),'expression':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[15,15,15,88,103,106,107,109,110,111,112,113,114,15,123,124,125,126,127,128,134,15,15,145,123,15,123,15,]),'vector_command':([0,2,16,77,116,117,143,149,],[18,18,18,18,18,18,18,18,]),'robot_command':([0,2,16,77,116,117,143,149,],[19,19,19,19,19,19,19,19,]),'converting_command':([0,2,16,77,116,117,143,149,],[20,20,20,20,20,20,20,20,]),'const':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'qstring':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'math_expression':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,93,94,96,97,98,99,115,116,117,138,140,143,144,149,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'variables':([13,104,105,],[64,132,133,]),'statements_group':([16,117,143,149,],[76,136,147,150,]),'inner_statement':([16,117,143,149,],[78,78,78,78,]),'string':([51,52,],[100,102,]),'parameters':([93,144,],[120,148,]),'parameter':([93,140,144,],[121,146,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> application","S'",1,None,None,None),
  ('application -> statements','application',1,'p_application','parser.py',34),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',39),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',40),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',49),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',50),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',51),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',52),
  ('inner_statement -> function','inner_statement',1,'p_inner_statement','parser.py',53),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',54),
  ('inner_statement -> RETURN','inner_statement',1,'p_inner_statement','parser.py',55),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',56),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',61),
  ('statements -> statement','statements',1,'p_statements','parser.py',62),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',70),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',71),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',72),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',73),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',75),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',76),
  ('statement -> RETURN NEWLINE','statement',2,'p_statement','parser.py',77),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',78),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',83),
  ('type -> INTEGER','type',1,'p_type','parser.py',88),
  ('type -> STRING','type',1,'p_type','parser.py',89),
  ('type -> BOOL','type',1,'p_type','parser.py',90),
  ('type -> VECTOR OF','type',2,'p_type','parser.py',91),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',97),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',98),
  ('variables -> variable','variables',1,'p_variables','parser.py',99),
  ('variables -> assignment','variables',1,'p_variables','parser.py',100),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',108),
  ('variable -> VARIABLE R_QBRACKET expression L_QBRACKET','variable',4,'p_variable','parser.py',113),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',114),
  ('expression -> variable','expression',1,'p_expression','parser.py',122),
  ('expression -> const','expression',1,'p_expression','parser.py',123),
  ('expression -> qstring','expression',1,'p_expression','parser.py',124),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',125),
  ('expression -> call','expression',1,'p_expression','parser.py',126),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',131),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',132),
  ('string -> string VARIABLE','string',2,'p_string','parser.py',137),
  ('string -> VARIABLE','string',1,'p_string','parser.py',138),
  ('const -> TRUE','const',1,'p_const','parser.py',146),
  ('const -> FALSE','const',1,'p_const','parser.py',147),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',148),
  ('const -> DECIMAL','const',1,'p_const','parser.py',149),
  ('const -> EXIT','const',1,'p_const','parser.py',150),
  ('const -> WOOD','const',1,'p_const','parser.py',151),
  ('const -> STEEL','const',1,'p_const','parser.py',152),
  ('const -> GLASS','const',1,'p_const','parser.py',153),
  ('const -> CONCRETE','const',1,'p_const','parser.py',154),
  ('const -> PLASTIC','const',1,'p_const','parser.py',155),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',160),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',161),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',162),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',163),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',164),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',165),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',166),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',174),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',179),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if','parser.py',180),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',188),
  ('command -> vector_command','command',1,'p_command','parser.py',194),
  ('command -> robot_command','command',1,'p_command','parser.py',195),
  ('command -> converting_command','command',1,'p_command','parser.py',196),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',201),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',202),
  ('vector_command -> PUSH BACK expression','vector_command',3,'p_vector_command','parser.py',207),
  ('vector_command -> POP BACK expression','vector_command',3,'p_vector_command','parser.py',208),
  ('vector_command -> PUSH FRONT expression','vector_command',3,'p_vector_command','parser.py',209),
  ('vector_command -> POP FRONT expression','vector_command',3,'p_vector_command','parser.py',210),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',215),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',216),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',217),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',218),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',219),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',220),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',221),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',222),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',223),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',228),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',235),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',240),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',241),
  ('parameters -> parameters CONTINUE','parameters',2,'p_parameters','parser.py',242),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',243),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',251),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',252),
]
