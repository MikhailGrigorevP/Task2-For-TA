
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BACK BEGIN BOOL COMMA CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODapplication : statementsstatements_group : BEGIN statements END\n                            | statementstatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN NEWLINE\n                     | empty NEWLINEdeclaration : type variablestype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF\n        variables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expressionvariable : VARIABLE R_QBRACKET expression L_QBRACKET\n                    | VARIABLEexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : string VARIABLE\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | MINUS expression\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expressionwhile : DO statements_group UNTIL expressionif : IF expression THEN statements_group\n              | IF expression THEN statements_group ELSE statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_groupcommand : vector_command\n                   | robot_command\n                   | converting_commandconverting_command : expression TO type\n                              | expression TO expressionvector_command : PUSH BACK expression\n                          | POP BACK expression\n                          | PUSH FRONT expression\n                          | POP FRONT expressionrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKETempty : parameters : parameters COMMA parameter\n                     | parameter\n                     | parameters CONTINUE\n                     | emptyparameter : expression\n                    | VARIABLE EQ expression'
    
_lr_action_items = {'RETURN':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[11,11,-5,11,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,11,11,11,11,11,]),'DO':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[16,16,-5,16,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,16,16,16,16,16,]),'IF':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[17,17,-5,17,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,17,17,17,17,17,]),'FUNCTION':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[21,21,-5,21,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,21,21,21,21,21,]),'VARIABLE':([0,2,3,13,16,17,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,86,87,88,89,90,91,92,93,95,96,106,107,108,109,121,129,131,134,135,140,],[22,22,-5,67,22,82,-16,-17,-18,92,92,82,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,82,82,82,82,82,82,82,82,22,110,82,-19,82,82,82,82,121,-35,121,67,67,82,22,22,128,-34,82,110,22,110,22,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,19,20,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,80,81,82,86,94,97,98,99,100,101,102,103,104,105,107,108,116,117,118,119,120,122,123,124,125,126,127,130,133,134,138,140,141,],[-76,-76,-5,55,56,57,58,59,60,61,62,63,-76,-57,-58,-59,-16,-17,-18,-69,-66,-67,-68,-70,-71,-72,-73,-74,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-22,-23,-26,-76,-3,-27,-31,-26,-19,-48,-24,-61,-60,-46,-47,-49,-50,-51,-52,-76,-76,-62,-64,-63,-65,-32,-33,-20,-21,-53,-2,-54,-75,-25,-76,-55,-76,-56,]),'INTEGER':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,83,107,108,134,140,],[23,23,-5,23,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,23,23,23,23,23,23,23,]),'STRING':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,83,107,108,134,140,],[24,24,-5,24,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,24,24,24,24,24,24,24,]),'BOOL':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,83,107,108,134,140,],[25,25,-5,25,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,25,25,25,25,25,25,25,]),'VECTOR':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,69,77,83,107,108,134,140,],[26,26,-5,26,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,26,26,26,26,26,26,26,]),'PUSH':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[27,27,-5,27,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,27,27,27,27,27,]),'POP':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[29,29,-5,29,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,29,29,29,29,29,]),'LEFT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[30,30,-5,30,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,30,30,30,30,30,]),'RIGHT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[31,31,-5,31,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,31,31,31,31,31,]),'FORWARD':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[32,32,-5,32,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,32,32,32,32,32,]),'BACK':([0,2,3,16,27,29,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[28,28,-5,28,87,89,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,28,28,28,28,28,]),'ROTATE_RIGHT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[33,33,-5,33,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,33,33,33,33,33,]),'ROTATE_LEFT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[34,34,-5,34,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,34,34,34,34,34,]),'LMS':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[35,35,-5,35,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,35,35,35,35,35,]),'REFLECT':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[36,36,-5,36,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,36,36,36,36,36,]),'DRILL':([0,2,3,16,54,55,56,57,58,59,60,61,62,63,77,107,108,134,140,],[37,37,-5,37,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,37,37,37,37,37,]),'TRUE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[41,41,-5,41,41,41,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FALSE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[42,42,-5,42,42,42,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'UNDEFINED':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[43,43,-5,43,43,43,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'DECIMAL':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[44,44,-5,44,44,44,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'EXIT':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[45,45,-5,45,45,45,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'WOOD':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[46,46,-5,46,46,46,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'STEEL':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[47,47,-5,47,47,47,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'GLASS':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[48,48,-5,48,48,48,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'CONCRETE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[49,49,-5,49,49,49,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'PLASTIC':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[50,50,-5,50,50,50,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'DOUBLE_QUOTE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,91,92,106,107,108,121,129,131,134,135,140,],[51,51,-5,51,51,51,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,120,-35,51,51,51,-34,51,51,51,51,51,]),'QUOTE':([0,2,3,16,17,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,92,93,106,107,108,121,129,131,134,135,140,],[52,52,-5,52,52,52,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-35,122,52,52,52,-34,52,52,52,52,52,]),'MINUS':([0,2,3,10,14,15,16,17,22,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,77,79,80,81,82,84,85,87,88,89,90,94,97,98,100,101,102,103,104,105,106,107,108,110,114,115,116,117,118,119,120,122,125,129,130,131,133,134,135,136,140,],[53,53,-5,-31,-27,71,53,53,-26,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,53,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,53,53,53,53,53,53,53,53,53,71,-27,-31,-26,53,53,53,53,53,53,71,71,71,71,71,71,71,71,71,53,53,53,-26,71,71,71,71,71,71,-32,-33,71,53,-75,53,-25,53,53,71,53,]),'$end':([1,2,3,54,55,56,57,58,59,60,61,62,63,],[0,-1,-5,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,]),'END':([3,54,55,56,57,58,59,60,61,62,63,107,],[-5,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,126,]),'TO':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,80,81,82,94,100,101,102,103,104,105,120,122,130,133,],[-31,-27,69,-26,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-27,-31,-26,-48,-46,-47,-49,-50,-51,-52,-32,-33,-75,-25,]),'PLUS':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,79,80,81,82,94,97,98,100,101,102,103,104,105,110,114,115,116,117,118,119,120,122,125,130,133,136,],[-31,-27,70,-26,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,70,-27,-31,-26,70,70,70,70,70,70,70,70,70,-26,70,70,70,70,70,70,-32,-33,70,-75,-25,70,]),'LESS':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,79,80,81,82,94,97,98,100,101,102,103,104,105,110,114,115,116,117,118,119,120,122,125,130,133,136,],[-31,-27,72,-26,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,72,-27,-31,-26,72,72,72,72,72,72,72,72,72,-26,72,72,72,72,72,72,-32,-33,72,-75,-25,72,]),'GREATER':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,79,80,81,82,94,97,98,100,101,102,103,104,105,110,114,115,116,117,118,119,120,122,125,130,133,136,],[-31,-27,73,-26,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,73,-27,-31,-26,73,73,73,73,73,73,73,73,73,-26,73,73,73,73,73,73,-32,-33,73,-75,-25,73,]),'EQ':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,79,80,81,82,94,97,98,100,101,102,103,104,105,110,114,115,116,117,118,119,120,122,125,130,133,136,],[-31,-27,74,-26,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,74,-27,-31,-26,74,74,74,74,74,74,74,74,74,129,74,74,74,74,74,74,-32,-33,74,-75,-25,74,]),'NOTEQ':([10,14,15,22,38,39,40,41,42,43,44,45,46,47,48,49,50,79,80,81,82,94,97,98,100,101,102,103,104,105,110,114,115,116,117,118,119,120,122,125,130,133,136,],[-31,-27,75,-26,-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,75,-27,-31,-26,75,75,75,75,75,75,75,75,75,-26,75,75,75,75,75,75,-32,-33,75,-75,-25,75,]),'ASSIGNMENT':([14,22,65,67,133,],[68,-26,68,-26,-25,]),'BEGIN':([16,108,134,140,],[77,77,77,77,]),'OF':([21,26,],[83,86,]),'LBRACKET':([22,82,110,128,],[84,84,84,135,]),'R_QBRACKET':([22,67,82,110,],[85,85,85,85,]),'FRONT':([27,29,],[88,90,]),'THEN':([38,39,40,41,42,43,44,45,46,47,48,49,50,79,80,81,82,94,100,101,102,103,104,105,120,122,130,133,],[-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,108,-27,-31,-26,-48,-46,-47,-49,-50,-51,-52,-32,-33,-75,-25,]),'COMMA':([38,39,40,41,42,43,44,45,46,47,48,49,50,65,66,67,80,81,82,84,94,97,100,101,102,103,104,105,110,111,112,113,114,120,122,130,132,133,135,136,137,139,],[-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,95,96,-26,-27,-31,-26,-76,-48,-24,-46,-47,-49,-50,-51,-52,-26,131,-78,-80,-81,-32,-33,-75,-79,-25,-76,-82,-77,131,]),'RBRACKET':([38,39,40,41,42,43,44,45,46,47,48,49,50,80,81,82,84,94,100,101,102,103,104,105,110,111,112,113,114,120,122,130,132,133,135,136,137,139,],[-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-27,-31,-26,-76,-48,-46,-47,-49,-50,-51,-52,-26,130,-78,-80,-81,-32,-33,-75,-79,-25,-76,-82,-77,140,]),'CONTINUE':([38,39,40,41,42,43,44,45,46,47,48,49,50,80,81,82,84,94,100,101,102,103,104,105,110,111,112,113,114,120,122,130,132,133,135,136,137,139,],[-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-27,-31,-26,-76,-48,-46,-47,-49,-50,-51,-52,-26,132,-78,-80,-81,-32,-33,-75,-79,-25,-76,-82,-77,132,]),'L_QBRACKET':([38,39,40,41,42,43,44,45,46,47,48,49,50,80,81,82,94,100,101,102,103,104,105,115,120,122,130,133,],[-28,-29,-30,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-27,-31,-26,-48,-46,-47,-49,-50,-51,-52,133,-32,-33,-75,-25,]),'UNTIL':([55,56,57,58,59,60,61,62,63,76,78,126,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,106,-3,-2,]),'ELSE':([55,56,57,58,59,60,61,62,63,78,126,127,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-2,134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'application':([0,],[1,]),'statements':([0,77,],[2,107,]),'statement':([0,2,16,77,107,108,134,140,],[3,54,78,3,54,78,78,78,]),'declaration':([0,2,16,77,107,108,134,140,],[4,4,4,4,4,4,4,4,]),'assignment':([0,2,13,16,77,95,96,107,108,134,140,],[5,5,66,5,5,66,66,5,5,5,5,]),'while':([0,2,16,77,107,108,134,140,],[6,6,6,6,6,6,6,6,]),'if':([0,2,16,77,107,108,134,140,],[7,7,7,7,7,7,7,7,]),'command':([0,2,16,77,107,108,134,140,],[8,8,8,8,8,8,8,8,]),'function':([0,2,16,77,107,108,134,140,],[9,9,9,9,9,9,9,9,]),'call':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[10,10,10,81,81,81,81,81,81,81,81,81,81,10,81,81,81,81,81,81,81,10,10,81,81,10,81,10,]),'empty':([0,2,16,77,84,107,108,134,135,140,],[12,12,12,12,113,12,12,12,113,12,]),'type':([0,2,16,69,77,83,107,108,134,140,],[13,13,13,99,13,109,13,13,13,13,]),'variable':([0,2,13,16,17,53,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,95,96,106,107,108,129,131,134,135,140,],[14,14,65,14,80,80,80,80,80,80,80,80,80,80,14,80,80,80,80,80,80,65,65,80,14,14,80,80,14,80,14,]),'expression':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[15,15,15,79,94,97,98,100,101,102,103,104,105,15,114,115,116,117,118,119,125,15,15,136,114,15,114,15,]),'vector_command':([0,2,16,77,107,108,134,140,],[18,18,18,18,18,18,18,18,]),'robot_command':([0,2,16,77,107,108,134,140,],[19,19,19,19,19,19,19,19,]),'converting_command':([0,2,16,77,107,108,134,140,],[20,20,20,20,20,20,20,20,]),'const':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'qstring':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'math_expression':([0,2,16,17,53,68,69,70,71,72,73,74,75,77,84,85,87,88,89,90,106,107,108,129,131,134,135,140,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'variables':([13,95,96,],[64,123,124,]),'statements_group':([16,108,134,140,],[76,127,138,141,]),'string':([51,52,],[91,93,]),'parameters':([84,135,],[111,139,]),'parameter':([84,131,135,],[112,137,112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> application","S'",1,None,None,None),
  ('application -> statements','application',1,'p_application','parser.py',34),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',39),
  ('statements_group -> statement','statements_group',1,'p_statements_group','parser.py',40),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',48),
  ('statements -> statement','statements',1,'p_statements','parser.py',49),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',57),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',58),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',59),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',60),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',61),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',62),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',63),
  ('statement -> RETURN NEWLINE','statement',2,'p_statement','parser.py',64),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',65),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',70),
  ('type -> INTEGER','type',1,'p_type','parser.py',75),
  ('type -> STRING','type',1,'p_type','parser.py',76),
  ('type -> BOOL','type',1,'p_type','parser.py',77),
  ('type -> VECTOR OF','type',2,'p_type','parser.py',78),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',84),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',85),
  ('variables -> variable','variables',1,'p_variables','parser.py',86),
  ('variables -> assignment','variables',1,'p_variables','parser.py',87),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',95),
  ('variable -> VARIABLE R_QBRACKET expression L_QBRACKET','variable',4,'p_variable','parser.py',100),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',101),
  ('expression -> variable','expression',1,'p_expression','parser.py',109),
  ('expression -> const','expression',1,'p_expression','parser.py',110),
  ('expression -> qstring','expression',1,'p_expression','parser.py',111),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',112),
  ('expression -> call','expression',1,'p_expression','parser.py',113),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',118),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',119),
  ('string -> string VARIABLE','string',2,'p_string','parser.py',124),
  ('string -> VARIABLE','string',1,'p_string','parser.py',125),
  ('const -> TRUE','const',1,'p_const','parser.py',133),
  ('const -> FALSE','const',1,'p_const','parser.py',134),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',135),
  ('const -> DECIMAL','const',1,'p_const','parser.py',136),
  ('const -> EXIT','const',1,'p_const','parser.py',137),
  ('const -> WOOD','const',1,'p_const','parser.py',138),
  ('const -> STEEL','const',1,'p_const','parser.py',139),
  ('const -> GLASS','const',1,'p_const','parser.py',140),
  ('const -> CONCRETE','const',1,'p_const','parser.py',141),
  ('const -> PLASTIC','const',1,'p_const','parser.py',142),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',147),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',148),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',149),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',150),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',151),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',152),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',153),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',161),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',166),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if','parser.py',167),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',175),
  ('command -> vector_command','command',1,'p_command','parser.py',181),
  ('command -> robot_command','command',1,'p_command','parser.py',182),
  ('command -> converting_command','command',1,'p_command','parser.py',183),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',188),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',189),
  ('vector_command -> PUSH BACK expression','vector_command',3,'p_vector_command','parser.py',194),
  ('vector_command -> POP BACK expression','vector_command',3,'p_vector_command','parser.py',195),
  ('vector_command -> PUSH FRONT expression','vector_command',3,'p_vector_command','parser.py',196),
  ('vector_command -> POP FRONT expression','vector_command',3,'p_vector_command','parser.py',197),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',202),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',203),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',204),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',205),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',206),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',207),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',208),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',209),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',210),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',215),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',222),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',227),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',228),
  ('parameters -> parameters CONTINUE','parameters',2,'p_parameters','parser.py',229),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',230),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',238),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',239),
]
