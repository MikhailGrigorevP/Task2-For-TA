
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTOleftLESSGREATEREQNOTEQleftPLUSMINUSASSIGNMENT BACK BEGIN BOOL BRACKETS COMMA COMMENT CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODprogram : statementsstatements_group : BEGIN statements END\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | function\n                     | call\n                     | RETURN expression\n                     | emptystatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | comment NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN expression NEWLINE\n                     | empty NEWLINEstatement : error NEWLINEstatement : errordeclaration : type variablesdeclaration : type errorcomment : COMMENT anyany : any VARIABLE\n               | VARIABLEtype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF type\n        type : errorsvariables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expressionassignment : variable ASSIGNMENT errorvariable : VARIABLE indexing\n                    | VARIABLEindexing : L_QBRACKET expression R_QBRACKET indexing\n                    | L_QBRACKET expression R_QBRACKETexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | robot_command\n                      | converting_command\n                      | vector_pop\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : VARIABLE string\n                   | DECIMAL string\n                   | FALSE string\n                   | TRUE string\n                   | FALSE\n                   | TRUE\n                   | DECIMAL\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expression\n                           | expression PLUS expression\n                           | expression MINUS expressionwhile : DO statements_group UNTIL expressionif : IF expression THEN statements_group\n              | IF expression THEN statements_group ELSE statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group\n                    | FUNCTION OF type VARIABLE BRACKETS statements_groupfunction : FUNCTION OF type errorfunction : FUNCTION OF type VARIABLE errorcommand : vector_command\n                   | robot_commandconverting_command : expression TO type\n                              | expression TO expression\n                              | expression TO vector_ofvector_of : VECTOR OF vector_of\n                    | VECTORvector_command : variable PUSH BACK expression\n                          | variable PUSH FRONT expressionvector_command : variable PUSH BACK errorvector_pop : variable POP BACK\n                      | variable POP FRONTrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKET\n                | VARIABLE BRACKETSempty : parameters : parameters COMMA parameter\n                      | parameter\n                      | CONTINUEparameter : expression\n                     | VARIABLE EQ expressionerrors : errors error\n                    | error'
    
_lr_action_items = {'RETURN':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,101,124,126,168,170,179,],[12,12,-14,-26,90,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,12,-23,12,90,90,90,90,]),'error':([0,2,3,14,15,18,24,25,26,28,38,39,40,41,42,43,44,45,46,69,70,78,81,92,94,99,100,101,108,121,124,126,127,134,161,167,168,170,179,],[14,14,-14,-26,72,92,-32,-33,-34,100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,120,14,-118,92,92,-117,-23,92,156,14,92,162,-35,171,92,92,92,92,]),'COMMENT':([0,2,3,14,38,39,40,41,42,43,44,45,46,69,70,81,101,124,],[16,16,-14,-26,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,16,-23,16,]),'DO':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,101,124,126,168,170,179,],[18,18,-14,-26,18,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,18,-23,18,18,18,18,18,]),'IF':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,101,124,126,168,170,179,],[19,19,-14,-26,19,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,19,-23,19,19,19,19,19,]),'FUNCTION':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,101,124,126,168,170,179,],[22,22,-14,-26,22,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,22,-23,22,22,22,22,22,]),'VARIABLE':([0,2,3,12,14,15,16,18,19,24,25,26,28,38,39,40,41,42,43,44,45,46,67,68,69,70,76,77,78,81,90,92,95,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,121,122,123,124,126,127,134,163,165,168,169,170,179,],[23,23,-14,56,-26,75,77,23,56,-32,-33,-34,-36,-13,-15,-16,-17,-18,-19,-20,-21,-22,111,111,-24,-25,118,-31,56,23,56,-118,128,56,-117,-23,56,56,56,56,56,56,56,111,111,111,111,75,75,-30,56,56,56,23,23,161,-35,56,128,23,128,23,23,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,13,14,20,21,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,75,76,77,81,82,83,84,85,86,87,88,89,91,92,96,97,100,101,118,119,120,124,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,153,154,155,156,157,158,159,160,162,164,166,168,170,171,174,175,176,178,179,180,],[-111,-111,-14,39,40,41,42,43,44,45,46,69,70,-88,-89,-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,-13,-15,-16,-17,-18,-19,-20,-21,-22,101,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-24,-25,-27,-28,-39,-40,-44,-29,-31,-111,-3,-4,-5,-6,-7,-8,-9,-10,-12,-118,-110,-43,-117,-23,-30,-41,-42,-111,-11,-111,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,-37,-38,-95,-97,-96,-81,-2,-82,-86,-109,-46,-111,-111,-87,-45,-93,-83,-85,-111,-84,]),'INTEGER':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,94,99,101,108,124,126,167,168,170,179,],[24,24,-14,-26,24,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,24,24,24,-23,24,24,24,24,24,24,24,]),'STRING':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,94,99,101,108,124,126,167,168,170,179,],[25,25,-14,-26,25,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,25,25,25,-23,25,25,25,25,25,25,25,]),'BOOL':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,94,99,101,108,124,126,167,168,170,179,],[26,26,-14,-26,26,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,26,26,26,-23,26,26,26,26,26,26,26,]),'VECTOR':([0,2,3,14,18,38,39,40,41,42,43,44,45,46,69,70,81,94,99,101,108,124,126,167,168,170,179,],[27,27,-14,-26,27,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,27,27,27,-23,144,27,27,144,27,27,27,]),'LEFT':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[30,30,-14,30,-26,30,30,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,30,30,30,30,30,-23,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'RIGHT':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[31,31,-14,31,-26,31,31,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,31,31,31,31,31,-23,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FORWARD':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[32,32,-14,32,-26,32,32,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,32,32,32,32,32,-23,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'BACK':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,79,81,90,95,98,101,102,103,104,105,106,107,108,109,121,122,123,124,126,163,165,168,169,170,179,],[29,29,-14,29,-26,29,29,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,29,121,29,29,29,29,-23,29,29,29,29,29,29,29,145,29,29,29,29,29,29,29,29,29,29,29,]),'ROTATE_RIGHT':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[33,33,-14,33,-26,33,33,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,33,33,33,33,33,-23,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'ROTATE_LEFT':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[34,34,-14,34,-26,34,34,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,34,34,34,34,34,-23,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'LMS':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[35,35,-14,35,-26,35,35,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,35,35,35,35,35,-23,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'REFLECT':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[36,36,-14,36,-26,36,36,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,36,36,36,36,36,-23,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'DRILL':([0,2,3,12,14,18,19,38,39,40,41,42,43,44,45,46,69,70,78,81,90,95,98,101,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[37,37,-14,37,-26,37,37,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,37,37,37,37,37,-23,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'$end':([1,2,3,14,38,39,40,41,42,43,44,45,46,69,70,101,],[0,-1,-14,-26,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-23,]),'END':([3,14,38,39,40,41,42,43,44,45,46,69,70,101,124,],[-14,-26,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-23,159,]),'TRUE':([12,19,67,68,78,90,95,98,102,103,104,105,106,107,108,111,112,113,114,121,122,123,163,165,169,],[57,57,114,114,57,57,57,57,57,57,57,57,57,57,57,114,114,114,114,57,57,57,57,57,57,]),'FALSE':([12,19,67,68,78,90,95,98,102,103,104,105,106,107,108,111,112,113,114,121,122,123,163,165,169,],[58,58,113,113,58,58,58,58,58,58,58,58,58,58,58,113,113,113,113,58,58,58,58,58,58,]),'UNDEFINED':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'DECIMAL':([12,19,67,68,78,90,95,98,102,103,104,105,106,107,108,111,112,113,114,121,122,123,163,165,169,],[60,60,112,112,60,60,60,60,60,60,60,60,60,60,60,112,112,112,112,60,60,60,60,60,60,]),'EXIT':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'WOOD':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'STEEL':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'GLASS':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'CONCRETE':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'PLASTIC':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'DOUBLE_QUOTE':([12,19,78,90,95,98,102,103,104,105,106,107,108,110,111,112,113,114,121,122,123,148,149,150,151,163,165,169,],[67,67,67,67,67,67,67,67,67,67,67,67,67,147,-64,-63,-61,-62,67,67,67,-57,-58,-59,-60,67,67,67,]),'QUOTE':([12,19,78,90,95,98,102,103,104,105,106,107,108,111,112,113,114,115,121,122,123,148,149,150,151,163,165,169,],[68,68,68,68,68,68,68,68,68,68,68,68,68,-64,-63,-61,-62,152,68,68,68,-57,-58,-59,-60,68,68,68,]),'ASSIGNMENT':([17,23,73,75,97,166,174,],[78,-44,78,-44,-43,-46,-45,]),'PUSH':([17,23,97,166,174,],[79,-44,-43,-46,-45,]),'BEGIN':([18,126,168,170,179,],[81,81,81,81,81,]),'UNTIL':([18,20,21,24,25,26,28,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,80,82,83,84,85,86,87,88,89,91,92,96,97,100,119,120,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,153,154,155,156,157,158,159,160,162,164,166,168,170,171,174,175,176,178,179,180,],[-111,-88,-89,-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-27,-28,-39,-40,-44,123,-3,-4,-5,-6,-7,-8,-9,-10,-12,-118,-110,-43,-117,-41,-42,-11,-111,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,-37,-38,-95,-97,-96,-81,-2,-82,-86,-109,-46,-111,-111,-87,-45,-93,-83,-85,-111,-84,]),'ELSE':([20,21,24,25,26,28,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,82,83,84,85,86,87,88,89,91,92,96,97,100,119,120,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,153,154,155,156,157,158,159,160,162,164,166,168,170,171,174,175,176,178,179,180,],[-88,-89,-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-27,-28,-39,-40,-44,-3,-4,-5,-6,-7,-8,-9,-10,-12,-118,-110,-43,-117,-41,-42,-11,-111,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,-37,-38,-95,-97,-96,-81,-2,168,-86,-109,-46,-111,-111,-87,-45,-93,-83,-85,-111,-84,]),'OF':([22,27,144,],[94,99,167,]),'LBRACKET':([23,56,128,161,],[95,95,95,169,]),'BRACKETS':([23,56,128,161,],[96,96,96,170,]),'L_QBRACKET':([23,56,75,128,166,],[98,98,98,98,98,]),'LESS':([24,25,26,28,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,119,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,157,158,164,166,172,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,102,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,102,-110,-43,-117,102,102,-44,102,102,-35,-75,-76,-77,-78,-79,-80,102,-90,-92,-94,-98,-99,-55,-56,102,102,102,-109,-46,102,-45,-93,]),'GREATER':([24,25,26,28,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,119,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,157,158,164,166,172,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,103,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,103,-110,-43,-117,103,103,-44,103,103,-35,-75,-76,-77,-78,-79,-80,103,-90,-92,-94,-98,-99,-55,-56,103,103,103,-109,-46,103,-45,-93,]),'EQ':([24,25,26,28,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,119,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,157,158,164,166,172,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,104,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,104,-110,-43,-117,104,104,163,104,104,-35,-75,-76,-77,-78,-79,-80,104,-90,-92,-94,-98,-99,-55,-56,104,104,104,-109,-46,104,-45,-93,]),'NOTEQ':([24,25,26,28,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,119,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,157,158,164,166,172,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,105,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,105,-110,-43,-117,105,105,-44,105,105,-35,-75,-76,-77,-78,-79,-80,105,-90,-92,-94,-98,-99,-55,-56,105,105,105,-109,-46,105,-45,-93,]),'PLUS':([24,25,26,28,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,119,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,157,158,164,166,172,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,106,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,106,-110,-43,-117,106,106,-44,106,106,-35,106,106,106,106,-79,-80,106,-90,-92,-94,-98,-99,-55,-56,106,106,106,-109,-46,106,-45,-93,]),'MINUS':([24,25,26,28,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,119,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,157,158,164,166,172,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,107,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,107,-110,-43,-117,107,107,-44,107,107,-35,107,107,107,107,-79,-80,107,-90,-92,-94,-98,-99,-55,-56,107,107,107,-109,-46,107,-45,-93,]),'TO':([24,25,26,28,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,119,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,157,158,164,166,172,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,108,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,108,-110,-43,-117,108,108,-44,108,108,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,108,108,108,-109,-46,108,-45,-93,]),'THEN':([24,25,26,28,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,93,96,97,100,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,164,166,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,126,-110,-43,-117,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,-109,-46,-45,-93,]),'COMMA':([24,25,26,28,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,73,74,75,92,96,97,100,119,120,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,164,166,172,173,174,175,177,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,116,117,-44,-118,-110,-43,-117,-41,-42,-44,165,-113,-114,-115,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,-109,-46,-116,-112,-45,-93,165,]),'RBRACKET':([24,25,26,28,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,96,97,100,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,164,166,172,173,174,175,177,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,-110,-43,-117,-44,164,-113,-114,-115,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,-109,-46,-116,-112,-45,-93,179,]),'R_QBRACKET':([24,25,26,28,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,92,96,97,100,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,164,166,174,175,],[-32,-33,-34,-36,-103,-100,-101,-102,-104,-105,-106,-107,-108,-47,-48,-49,-50,-51,-52,-53,-54,-44,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-118,-110,-43,-117,166,-35,-75,-76,-77,-78,-79,-80,-91,-90,-92,-94,-98,-99,-55,-56,-109,-46,-45,-93,]),'POP':([48,56,97,128,166,174,],[109,-44,-43,-44,-46,-45,]),'FRONT':([79,109,],[122,146,]),'CONTINUE':([95,169,],[131,131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,81,],[2,124,]),'statement':([0,2,81,124,],[3,38,3,38,]),'declaration':([0,2,18,81,124,126,168,170,179,],[4,4,83,4,4,83,83,83,83,]),'comment':([0,2,81,124,],[5,5,5,5,]),'assignment':([0,2,15,18,81,116,117,124,126,168,170,179,],[6,6,74,84,6,74,74,6,84,84,84,84,]),'while':([0,2,18,81,124,126,168,170,179,],[7,7,85,7,7,85,85,85,85,]),'if':([0,2,18,81,124,126,168,170,179,],[8,8,86,8,8,86,86,86,86,]),'command':([0,2,18,81,124,126,168,170,179,],[9,9,87,9,9,87,87,87,87,]),'function':([0,2,18,81,124,126,168,170,179,],[10,10,88,10,10,88,88,88,88,]),'call':([0,2,12,18,19,78,81,90,95,98,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[11,11,55,89,55,55,11,55,55,55,55,55,55,55,55,55,55,55,55,55,11,89,55,55,89,55,89,89,]),'empty':([0,2,18,81,124,126,168,170,179,],[13,13,91,13,13,91,91,91,91,]),'type':([0,2,18,81,94,99,108,124,126,167,168,170,179,],[15,15,15,15,127,134,142,15,15,134,15,15,15,]),'variable':([0,2,12,15,18,19,78,81,90,95,98,102,103,104,105,106,107,108,116,117,121,122,123,124,126,163,165,168,169,170,179,],[17,17,48,73,17,48,48,17,48,48,48,48,48,48,48,48,48,48,73,73,48,48,48,17,17,48,48,17,48,17,17,]),'vector_command':([0,2,18,81,124,126,168,170,179,],[20,20,20,20,20,20,20,20,20,]),'robot_command':([0,2,12,18,19,78,81,90,95,98,102,103,104,105,106,107,108,121,122,123,124,126,163,165,168,169,170,179,],[21,21,52,21,52,52,21,52,52,52,52,52,52,52,52,52,52,52,52,52,21,21,52,52,21,52,21,21,]),'errors':([0,2,18,81,94,99,108,124,126,167,168,170,179,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'expression':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[47,93,119,125,132,133,135,136,137,138,139,140,141,155,157,158,172,132,132,]),'const':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'qstring':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'math_expression':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'converting_command':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'vector_pop':([12,19,78,90,95,98,102,103,104,105,106,107,108,121,122,123,163,165,169,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'variables':([15,116,117,],[71,153,154,]),'any':([16,],[76,]),'statements_group':([18,126,168,170,179,],[80,160,176,178,180,]),'inner_statement':([18,126,168,170,179,],[82,82,82,82,82,]),'indexing':([23,56,75,128,166,],[97,97,97,97,174,]),'string':([67,68,111,112,113,114,],[110,115,148,149,150,151,]),'parameters':([95,169,],[129,177,]),'parameter':([95,165,169,],[130,173,130,]),'vector_of':([108,167,],[143,175,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',29),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',34),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',35),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',43),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',44),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',45),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',46),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',47),
  ('inner_statement -> function','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',49),
  ('inner_statement -> RETURN expression','inner_statement',2,'p_inner_statement','parser.py',50),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',51),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',60),
  ('statements -> statement','statements',1,'p_statements','parser.py',61),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',69),
  ('statement -> comment NEWLINE','statement',2,'p_statement','parser.py',70),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',71),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',72),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',73),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',75),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',76),
  ('statement -> RETURN expression NEWLINE','statement',3,'p_statement','parser.py',77),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',78),
  ('statement -> error NEWLINE','statement',2,'p_statement_error','parser.py',87),
  ('statement -> error','statement',1,'p_statement_error_no_nl','parser.py',95),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',103),
  ('declaration -> type error','declaration',2,'p_declaration_error','parser.py',108),
  ('comment -> COMMENT any','comment',2,'p_comment','parser.py',114),
  ('any -> any VARIABLE','any',2,'p_any','parser.py',119),
  ('any -> VARIABLE','any',1,'p_any','parser.py',120),
  ('type -> INTEGER','type',1,'p_type','parser.py',128),
  ('type -> STRING','type',1,'p_type','parser.py',129),
  ('type -> BOOL','type',1,'p_type','parser.py',130),
  ('type -> VECTOR OF type','type',3,'p_type','parser.py',131),
  ('type -> errors','type',1,'p_type_error','parser.py',141),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',148),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',149),
  ('variables -> variable','variables',1,'p_variables','parser.py',150),
  ('variables -> assignment','variables',1,'p_variables','parser.py',151),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',159),
  ('assignment -> variable ASSIGNMENT error','assignment',3,'p_assignment_err','parser.py',164),
  ('variable -> VARIABLE indexing','variable',2,'p_variable','parser.py',170),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',171),
  ('indexing -> L_QBRACKET expression R_QBRACKET indexing','indexing',4,'p_indexing','parser.py',179),
  ('indexing -> L_QBRACKET expression R_QBRACKET','indexing',3,'p_indexing','parser.py',180),
  ('expression -> variable','expression',1,'p_expression','parser.py',188),
  ('expression -> const','expression',1,'p_expression','parser.py',189),
  ('expression -> qstring','expression',1,'p_expression','parser.py',190),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',191),
  ('expression -> robot_command','expression',1,'p_expression','parser.py',192),
  ('expression -> converting_command','expression',1,'p_expression','parser.py',193),
  ('expression -> vector_pop','expression',1,'p_expression','parser.py',194),
  ('expression -> call','expression',1,'p_expression','parser.py',195),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',200),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',201),
  ('string -> VARIABLE string','string',2,'p_string','parser.py',206),
  ('string -> DECIMAL string','string',2,'p_string','parser.py',207),
  ('string -> FALSE string','string',2,'p_string','parser.py',208),
  ('string -> TRUE string','string',2,'p_string','parser.py',209),
  ('string -> FALSE','string',1,'p_string','parser.py',210),
  ('string -> TRUE','string',1,'p_string','parser.py',211),
  ('string -> DECIMAL','string',1,'p_string','parser.py',212),
  ('string -> VARIABLE','string',1,'p_string','parser.py',213),
  ('const -> TRUE','const',1,'p_const','parser.py',224),
  ('const -> FALSE','const',1,'p_const','parser.py',225),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',226),
  ('const -> DECIMAL','const',1,'p_const','parser.py',227),
  ('const -> EXIT','const',1,'p_const','parser.py',228),
  ('const -> WOOD','const',1,'p_const','parser.py',229),
  ('const -> STEEL','const',1,'p_const','parser.py',230),
  ('const -> GLASS','const',1,'p_const','parser.py',231),
  ('const -> CONCRETE','const',1,'p_const','parser.py',232),
  ('const -> PLASTIC','const',1,'p_const','parser.py',233),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',238),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',239),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',240),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',241),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',242),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',243),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',248),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',253),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if','parser.py',254),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',262),
  ('function -> FUNCTION OF type VARIABLE BRACKETS statements_group','function',6,'p_function','parser.py',263),
  ('function -> FUNCTION OF type error','function',4,'p_function_err1','parser.py',272),
  ('function -> FUNCTION OF type VARIABLE error','function',5,'p_function_err2','parser.py',278),
  ('command -> vector_command','command',1,'p_command','parser.py',284),
  ('command -> robot_command','command',1,'p_command','parser.py',285),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',290),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',291),
  ('converting_command -> expression TO vector_of','converting_command',3,'p_converting_command','parser.py',292),
  ('vector_of -> VECTOR OF vector_of','vector_of',3,'p_vector_of','parser.py',297),
  ('vector_of -> VECTOR','vector_of',1,'p_vector_of','parser.py',298),
  ('vector_command -> variable PUSH BACK expression','vector_command',4,'p_vector_command','parser.py',306),
  ('vector_command -> variable PUSH FRONT expression','vector_command',4,'p_vector_command','parser.py',307),
  ('vector_command -> variable PUSH BACK error','vector_command',4,'p_vector_command_err','parser.py',312),
  ('vector_pop -> variable POP BACK','vector_pop',3,'p_vector_command_pop','parser.py',318),
  ('vector_pop -> variable POP FRONT','vector_pop',3,'p_vector_command_pop','parser.py',319),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',324),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',325),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',326),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',327),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',328),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',329),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',330),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',331),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',332),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',337),
  ('call -> VARIABLE BRACKETS','call',2,'p_call','parser.py',338),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',346),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',351),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',352),
  ('parameters -> CONTINUE','parameters',1,'p_parameters','parser.py',353),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',361),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',362),
  ('errors -> errors error','errors',2,'p_errors','parser.py',370),
  ('errors -> error','errors',1,'p_errors','parser.py',371),
]
