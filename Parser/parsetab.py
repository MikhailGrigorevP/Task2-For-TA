
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BACK BEGIN BOOL BRACKETS COMMA CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODapplication : statementsstatements_group : BEGIN statements END\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | function\n                     | call\n                     | RETURN expression\n                     | emptystatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN expression NEWLINE\n                     | empty NEWLINEdeclaration : type variablestype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF type\n        variables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expressionvariable : VARIABLE R_QBRACKET expression L_QBRACKET\n                    | VARIABLEexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : string VARIABLE\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | MINUS expression\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expressionwhile : DO statements_group UNTIL expressionif : IF expression THEN statements_group\n              | IF expression THEN statements_group ELSE statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group\n                    | FUNCTION OF type VARIABLE BRACKETS statements_groupcommand : vector_command\n                   | robot_command\n                   | converting_commandconverting_command : expression TO type\n                              | expression TO expressionvector_command : VARIABLE PUSH BACK expression\n                          | VARIABLE POP BACK\n                          | VARIABLE PUSH FRONT expression\n                          | VARIABLE POP FRONTrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKET\n                | VARIABLE BRACKETSempty : parameters : parameters COMMA parameter\n                     | parameter\n                     | parameters CONTINUEparameter : expression\n                    | VARIABLE EQ expression'
    
_lr_action_items = {'RETURN':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[11,11,-14,87,-13,-15,-16,-17,-18,-19,-20,-21,-23,11,-22,11,87,87,87,87,]),'DO':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[16,16,-14,16,-13,-15,-16,-17,-18,-19,-20,-21,-23,16,-22,16,16,16,16,16,]),'IF':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[17,17,-14,17,-13,-15,-16,-17,-18,-19,-20,-21,-23,17,-22,17,17,17,17,17,]),'FUNCTION':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[21,21,-14,21,-13,-15,-16,-17,-18,-19,-20,-21,-23,21,-22,21,21,21,21,21,]),'VARIABLE':([0,2,3,11,14,16,17,23,24,25,49,50,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,97,98,99,101,110,111,113,114,116,117,123,124,127,129,137,139,144,145,146,152,],[22,22,-14,63,75,22,63,-25,-26,-27,98,98,63,-13,-15,-16,-17,-18,-19,-20,-21,63,63,63,63,63,63,63,-23,63,22,63,118,63,129,-44,129,-22,75,75,63,22,22,136,63,63,-28,-43,63,118,22,118,22,22,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,13,18,19,20,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,75,78,79,80,81,82,83,84,85,86,88,92,100,101,102,103,104,105,106,107,108,109,112,114,115,116,125,126,127,128,130,131,132,133,134,135,138,141,142,143,144,146,149,151,152,153,],[-87,-87,-14,53,54,55,56,57,58,59,71,-67,-68,-69,-25,-26,-27,-79,-76,-77,-78,-80,-81,-82,-83,-84,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-13,-15,-16,-17,-18,-19,-20,-21,101,-36,-40,-35,-23,-24,-31,-32,-35,-87,-3,-4,-5,-6,-7,-8,-9,-10,-12,-86,-57,-22,-71,-70,-55,-56,-58,-59,-60,-61,-33,-87,-11,-87,-73,-75,-28,-41,-42,-29,-30,-62,-2,-63,-85,-34,-72,-74,-87,-87,-64,-66,-87,-65,]),'INTEGER':([0,2,3,16,52,53,54,55,56,57,58,59,64,71,78,90,96,101,114,116,144,146,152,],[23,23,-14,23,-13,-15,-16,-17,-18,-19,-20,-21,23,-23,23,23,23,-22,23,23,23,23,23,]),'STRING':([0,2,3,16,52,53,54,55,56,57,58,59,64,71,78,90,96,101,114,116,144,146,152,],[24,24,-14,24,-13,-15,-16,-17,-18,-19,-20,-21,24,-23,24,24,24,-22,24,24,24,24,24,]),'BOOL':([0,2,3,16,52,53,54,55,56,57,58,59,64,71,78,90,96,101,114,116,144,146,152,],[25,25,-14,25,-13,-15,-16,-17,-18,-19,-20,-21,25,-23,25,25,25,-22,25,25,25,25,25,]),'VECTOR':([0,2,3,16,52,53,54,55,56,57,58,59,64,71,78,90,96,101,114,116,144,146,152,],[26,26,-14,26,-13,-15,-16,-17,-18,-19,-20,-21,26,-23,26,26,26,-22,26,26,26,26,26,]),'LEFT':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[28,28,-14,28,-13,-15,-16,-17,-18,-19,-20,-21,-23,28,-22,28,28,28,28,28,]),'RIGHT':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[29,29,-14,29,-13,-15,-16,-17,-18,-19,-20,-21,-23,29,-22,29,29,29,29,29,]),'FORWARD':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[30,30,-14,30,-13,-15,-16,-17,-18,-19,-20,-21,-23,30,-22,30,30,30,30,30,]),'BACK':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,94,95,101,114,116,144,146,152,],[27,27,-14,27,-13,-15,-16,-17,-18,-19,-20,-21,-23,27,123,125,-22,27,27,27,27,27,]),'ROTATE_RIGHT':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[31,31,-14,31,-13,-15,-16,-17,-18,-19,-20,-21,-23,31,-22,31,31,31,31,31,]),'ROTATE_LEFT':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[32,32,-14,32,-13,-15,-16,-17,-18,-19,-20,-21,-23,32,-22,32,32,32,32,32,]),'LMS':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[33,33,-14,33,-13,-15,-16,-17,-18,-19,-20,-21,-23,33,-22,33,33,33,33,33,]),'REFLECT':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[34,34,-14,34,-13,-15,-16,-17,-18,-19,-20,-21,-23,34,-22,34,34,34,34,34,]),'DRILL':([0,2,3,16,52,53,54,55,56,57,58,59,71,78,101,114,116,144,146,152,],[35,35,-14,35,-13,-15,-16,-17,-18,-19,-20,-21,-23,35,-22,35,35,35,35,35,]),'TRUE':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[39,39,-14,39,39,39,39,-13,-15,-16,-17,-18,-19,-20,-21,39,39,39,39,39,39,39,-23,39,39,39,39,39,-22,39,39,39,39,39,39,39,39,39,39,39,]),'FALSE':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[40,40,-14,40,40,40,40,-13,-15,-16,-17,-18,-19,-20,-21,40,40,40,40,40,40,40,-23,40,40,40,40,40,-22,40,40,40,40,40,40,40,40,40,40,40,]),'UNDEFINED':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[41,41,-14,41,41,41,41,-13,-15,-16,-17,-18,-19,-20,-21,41,41,41,41,41,41,41,-23,41,41,41,41,41,-22,41,41,41,41,41,41,41,41,41,41,41,]),'DECIMAL':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[42,42,-14,42,42,42,42,-13,-15,-16,-17,-18,-19,-20,-21,42,42,42,42,42,42,42,-23,42,42,42,42,42,-22,42,42,42,42,42,42,42,42,42,42,42,]),'EXIT':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[43,43,-14,43,43,43,43,-13,-15,-16,-17,-18,-19,-20,-21,43,43,43,43,43,43,43,-23,43,43,43,43,43,-22,43,43,43,43,43,43,43,43,43,43,43,]),'WOOD':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[44,44,-14,44,44,44,44,-13,-15,-16,-17,-18,-19,-20,-21,44,44,44,44,44,44,44,-23,44,44,44,44,44,-22,44,44,44,44,44,44,44,44,44,44,44,]),'STEEL':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[45,45,-14,45,45,45,45,-13,-15,-16,-17,-18,-19,-20,-21,45,45,45,45,45,45,45,-23,45,45,45,45,45,-22,45,45,45,45,45,45,45,45,45,45,45,]),'GLASS':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[46,46,-14,46,46,46,46,-13,-15,-16,-17,-18,-19,-20,-21,46,46,46,46,46,46,46,-23,46,46,46,46,46,-22,46,46,46,46,46,46,46,46,46,46,46,]),'CONCRETE':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[47,47,-14,47,47,47,47,-13,-15,-16,-17,-18,-19,-20,-21,47,47,47,47,47,47,47,-23,47,47,47,47,47,-22,47,47,47,47,47,47,47,47,47,47,47,]),'PLASTIC':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,101,113,114,116,123,124,137,139,144,145,146,152,],[48,48,-14,48,48,48,48,-13,-15,-16,-17,-18,-19,-20,-21,48,48,48,48,48,48,48,-23,48,48,48,48,48,-22,48,48,48,48,48,48,48,48,48,48,48,]),'DOUBLE_QUOTE':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,97,98,101,113,114,116,123,124,129,137,139,144,145,146,152,],[49,49,-14,49,49,49,49,-13,-15,-16,-17,-18,-19,-20,-21,49,49,49,49,49,49,49,-23,49,49,49,49,49,128,-44,-22,49,49,49,49,49,-43,49,49,49,49,49,49,]),'QUOTE':([0,2,3,11,16,17,51,52,53,54,55,56,57,58,59,64,65,66,67,68,69,70,71,76,78,87,91,93,98,99,101,113,114,116,123,124,129,137,139,144,145,146,152,],[50,50,-14,50,50,50,50,-13,-15,-16,-17,-18,-19,-20,-21,50,50,50,50,50,50,50,-23,50,50,50,50,50,-44,130,-22,50,50,50,50,50,-43,50,50,50,50,50,50,]),'MINUS':([0,2,3,10,11,12,15,16,17,22,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,78,86,87,89,91,92,93,100,101,102,104,105,106,107,108,109,112,113,114,115,116,118,121,122,123,124,128,130,133,137,138,139,141,142,143,144,145,146,147,152,],[51,51,-14,-40,51,66,-36,51,51,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,51,-13,-15,-16,-17,-18,-19,-20,-21,66,-36,-40,-35,51,51,51,51,51,51,51,-23,51,51,-40,51,66,51,-86,51,66,-22,66,66,66,66,66,66,66,66,51,51,66,51,-35,66,66,51,51,-41,-42,66,51,-85,51,-34,66,66,51,51,51,66,51,]),'$end':([1,2,3,52,53,54,55,56,57,58,59,71,101,],[0,-1,-14,-13,-15,-16,-17,-18,-19,-20,-21,-23,-22,]),'END':([3,52,53,54,55,56,57,58,59,71,101,114,],[-14,-13,-15,-16,-17,-18,-19,-20,-21,-23,-22,134,]),'TO':([10,12,15,22,36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,86,92,100,104,105,106,107,108,109,128,130,138,141,],[-40,64,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-40,-86,-57,-55,-56,-58,-59,-60,-61,-41,-42,-85,-34,]),'PLUS':([10,12,15,22,36,37,38,39,40,41,42,43,44,45,46,47,48,60,61,62,63,86,89,92,100,102,104,105,106,107,108,109,112,115,118,121,122,128,130,133,138,141,142,143,147,],[-40,65,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,65,-36,-40,-35,-40,65,-86,65,65,65,65,65,65,65,65,65,65,-35,65,65,-41,-42,65,-85,-34,65,65,65,]),'LESS':([10,12,15,22,36,37,38,39,40,41,42,43,44,45,46,47,48,60,61,62,63,86,89,92,100,102,104,105,106,107,108,109,112,115,118,121,122,128,130,133,138,141,142,143,147,],[-40,67,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,67,-36,-40,-35,-40,67,-86,67,67,67,67,67,67,67,67,67,67,-35,67,67,-41,-42,67,-85,-34,67,67,67,]),'GREATER':([10,12,15,22,36,37,38,39,40,41,42,43,44,45,46,47,48,60,61,62,63,86,89,92,100,102,104,105,106,107,108,109,112,115,118,121,122,128,130,133,138,141,142,143,147,],[-40,68,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,68,-36,-40,-35,-40,68,-86,68,68,68,68,68,68,68,68,68,68,-35,68,68,-41,-42,68,-85,-34,68,68,68,]),'EQ':([10,12,15,22,36,37,38,39,40,41,42,43,44,45,46,47,48,60,61,62,63,86,89,92,100,102,104,105,106,107,108,109,112,115,118,121,122,128,130,133,138,141,142,143,147,],[-40,69,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,69,-36,-40,-35,-40,69,-86,69,69,69,69,69,69,69,69,69,69,137,69,69,-41,-42,69,-85,-34,69,69,69,]),'NOTEQ':([10,12,15,22,36,37,38,39,40,41,42,43,44,45,46,47,48,60,61,62,63,86,89,92,100,102,104,105,106,107,108,109,112,115,118,121,122,128,130,133,138,141,142,143,147,],[-40,70,-36,-35,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,70,-36,-40,-35,-40,70,-86,70,70,70,70,70,70,70,70,70,70,-35,70,70,-41,-42,70,-85,-34,70,70,70,]),'ASSIGNMENT':([15,22,73,75,141,],[76,-35,76,-35,-34,]),'BEGIN':([16,116,144,146,152,],[78,78,78,78,78,]),'UNTIL':([16,18,19,20,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,72,73,74,75,77,79,80,81,82,83,84,85,86,88,92,100,102,103,104,105,106,107,108,109,112,115,116,125,126,127,128,130,131,132,133,134,135,138,141,142,143,144,146,149,151,152,153,],[-87,-67,-68,-69,-25,-26,-27,-79,-76,-77,-78,-80,-81,-82,-83,-84,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-24,-31,-32,-35,113,-3,-4,-5,-6,-7,-8,-9,-10,-12,-86,-57,-71,-70,-55,-56,-58,-59,-60,-61,-33,-11,-87,-73,-75,-28,-41,-42,-29,-30,-62,-2,-63,-85,-34,-72,-74,-87,-87,-64,-66,-87,-65,]),'ELSE':([18,19,20,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,72,73,74,75,79,80,81,82,83,84,85,86,88,92,100,102,103,104,105,106,107,108,109,112,115,116,125,126,127,128,130,131,132,133,134,135,138,141,142,143,144,146,149,151,152,153,],[-67,-68,-69,-25,-26,-27,-79,-76,-77,-78,-80,-81,-82,-83,-84,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-24,-31,-32,-35,-3,-4,-5,-6,-7,-8,-9,-10,-12,-86,-57,-71,-70,-55,-56,-58,-59,-60,-61,-33,-11,-87,-73,-75,-28,-41,-42,-29,-30,-62,-2,144,-85,-34,-72,-74,-87,-87,-64,-66,-87,-65,]),'OF':([21,26,],[90,96,]),'LBRACKET':([22,63,118,136,],[91,91,91,145,]),'BRACKETS':([22,63,118,136,],[92,92,92,146,]),'R_QBRACKET':([22,63,75,118,],[93,93,93,93,]),'PUSH':([22,],[94,]),'POP':([22,],[95,]),'THEN':([36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,89,92,100,104,105,106,107,108,109,128,130,138,141,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,116,-86,-57,-55,-56,-58,-59,-60,-61,-41,-42,-85,-34,]),'COMMA':([36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,73,74,75,92,100,104,105,106,107,108,109,112,118,119,120,121,128,130,138,140,141,147,148,150,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,110,111,-35,-86,-57,-55,-56,-58,-59,-60,-61,-33,-35,139,-89,-91,-41,-42,-85,-90,-34,-92,-88,139,]),'RBRACKET':([36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,92,100,104,105,106,107,108,109,118,119,120,121,128,130,138,140,141,147,148,150,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-86,-57,-55,-56,-58,-59,-60,-61,-35,138,-89,-91,-41,-42,-85,-90,-34,-92,-88,152,]),'CONTINUE':([36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,92,100,104,105,106,107,108,109,118,119,120,121,128,130,138,140,141,147,148,150,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-86,-57,-55,-56,-58,-59,-60,-61,-35,140,-89,-91,-41,-42,-85,-90,-34,-92,-88,140,]),'L_QBRACKET':([36,37,38,39,40,41,42,43,44,45,46,47,48,61,62,63,92,100,104,105,106,107,108,109,122,128,130,138,141,],[-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-40,-35,-86,-57,-55,-56,-58,-59,-60,-61,141,-41,-42,-85,-34,]),'FRONT':([94,95,],[124,126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'application':([0,],[1,]),'statements':([0,78,],[2,114,]),'statement':([0,2,78,114,],[3,52,3,52,]),'declaration':([0,2,16,78,114,116,144,146,152,],[4,4,80,4,4,80,80,80,80,]),'assignment':([0,2,14,16,78,110,111,114,116,144,146,152,],[5,5,74,81,5,74,74,5,81,81,81,81,]),'while':([0,2,16,78,114,116,144,146,152,],[6,6,82,6,6,82,82,82,82,]),'if':([0,2,16,78,114,116,144,146,152,],[7,7,83,7,7,83,83,83,83,]),'command':([0,2,16,78,114,116,144,146,152,],[8,8,84,8,8,84,84,84,84,]),'function':([0,2,16,78,114,116,144,146,152,],[9,9,85,9,9,85,85,85,85,]),'call':([0,2,11,16,17,51,64,65,66,67,68,69,70,76,78,87,91,93,113,114,116,123,124,137,139,144,145,146,152,],[10,10,62,86,62,62,62,62,62,62,62,62,62,62,10,62,62,62,62,10,86,62,62,62,62,86,62,86,86,]),'expression':([0,2,11,16,17,51,64,65,66,67,68,69,70,76,78,87,91,93,113,114,116,123,124,137,139,144,145,146,152,],[12,12,60,12,89,100,102,104,105,106,107,108,109,112,12,115,121,122,133,12,12,142,143,147,121,12,121,12,12,]),'empty':([0,2,16,78,114,116,144,146,152,],[13,13,88,13,13,88,88,88,88,]),'type':([0,2,16,64,78,90,96,114,116,144,146,152,],[14,14,14,103,14,117,127,14,14,14,14,14,]),'variable':([0,2,11,14,16,17,51,64,65,66,67,68,69,70,76,78,87,91,93,110,111,113,114,116,123,124,137,139,144,145,146,152,],[15,15,61,73,15,61,61,61,61,61,61,61,61,61,61,15,61,61,61,73,73,61,15,15,61,61,61,61,15,61,15,15,]),'vector_command':([0,2,16,78,114,116,144,146,152,],[18,18,18,18,18,18,18,18,18,]),'robot_command':([0,2,16,78,114,116,144,146,152,],[19,19,19,19,19,19,19,19,19,]),'converting_command':([0,2,16,78,114,116,144,146,152,],[20,20,20,20,20,20,20,20,20,]),'const':([0,2,11,16,17,51,64,65,66,67,68,69,70,76,78,87,91,93,113,114,116,123,124,137,139,144,145,146,152,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'qstring':([0,2,11,16,17,51,64,65,66,67,68,69,70,76,78,87,91,93,113,114,116,123,124,137,139,144,145,146,152,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'math_expression':([0,2,11,16,17,51,64,65,66,67,68,69,70,76,78,87,91,93,113,114,116,123,124,137,139,144,145,146,152,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'variables':([14,110,111,],[72,131,132,]),'statements_group':([16,116,144,146,152,],[77,135,149,151,153,]),'inner_statement':([16,116,144,146,152,],[79,79,79,79,79,]),'string':([49,50,],[97,99,]),'parameters':([91,145,],[119,150,]),'parameter':([91,139,145,],[120,148,120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> application","S'",1,None,None,None),
  ('application -> statements','application',1,'p_application','parser.py',29),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',34),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',35),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',43),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',44),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',45),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',46),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',47),
  ('inner_statement -> function','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',49),
  ('inner_statement -> RETURN expression','inner_statement',2,'p_inner_statement','parser.py',50),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',51),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',60),
  ('statements -> statement','statements',1,'p_statements','parser.py',61),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',69),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',70),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',71),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',72),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',73),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',75),
  ('statement -> RETURN expression NEWLINE','statement',3,'p_statement','parser.py',76),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',77),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',85),
  ('type -> INTEGER','type',1,'p_type','parser.py',90),
  ('type -> STRING','type',1,'p_type','parser.py',91),
  ('type -> BOOL','type',1,'p_type','parser.py',92),
  ('type -> VECTOR OF type','type',3,'p_type','parser.py',93),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',102),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',103),
  ('variables -> variable','variables',1,'p_variables','parser.py',104),
  ('variables -> assignment','variables',1,'p_variables','parser.py',105),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',113),
  ('variable -> VARIABLE R_QBRACKET expression L_QBRACKET','variable',4,'p_variable','parser.py',118),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',119),
  ('expression -> variable','expression',1,'p_expression','parser.py',127),
  ('expression -> const','expression',1,'p_expression','parser.py',128),
  ('expression -> qstring','expression',1,'p_expression','parser.py',129),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',130),
  ('expression -> call','expression',1,'p_expression','parser.py',131),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',136),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',137),
  ('string -> string VARIABLE','string',2,'p_string','parser.py',142),
  ('string -> VARIABLE','string',1,'p_string','parser.py',143),
  ('const -> TRUE','const',1,'p_const','parser.py',151),
  ('const -> FALSE','const',1,'p_const','parser.py',152),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',153),
  ('const -> DECIMAL','const',1,'p_const','parser.py',154),
  ('const -> EXIT','const',1,'p_const','parser.py',155),
  ('const -> WOOD','const',1,'p_const','parser.py',156),
  ('const -> STEEL','const',1,'p_const','parser.py',157),
  ('const -> GLASS','const',1,'p_const','parser.py',158),
  ('const -> CONCRETE','const',1,'p_const','parser.py',159),
  ('const -> PLASTIC','const',1,'p_const','parser.py',160),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',165),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',166),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',167),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',168),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',169),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',170),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',171),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',179),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',184),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if','parser.py',185),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',193),
  ('function -> FUNCTION OF type VARIABLE BRACKETS statements_group','function',6,'p_function','parser.py',194),
  ('command -> vector_command','command',1,'p_command','parser.py',203),
  ('command -> robot_command','command',1,'p_command','parser.py',204),
  ('command -> converting_command','command',1,'p_command','parser.py',205),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',210),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',211),
  ('vector_command -> VARIABLE PUSH BACK expression','vector_command',4,'p_vector_command','parser.py',216),
  ('vector_command -> VARIABLE POP BACK','vector_command',3,'p_vector_command','parser.py',217),
  ('vector_command -> VARIABLE PUSH FRONT expression','vector_command',4,'p_vector_command','parser.py',218),
  ('vector_command -> VARIABLE POP FRONT','vector_command',3,'p_vector_command','parser.py',219),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',227),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',228),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',229),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',230),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',231),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',232),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',233),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',234),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',235),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',240),
  ('call -> VARIABLE BRACKETS','call',2,'p_call','parser.py',241),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',249),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',254),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',255),
  ('parameters -> parameters CONTINUE','parameters',2,'p_parameters','parser.py',256),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',266),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',267),
]
