
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BACK BEGIN BOOL BRACKETS COMMA COMMENT CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODprogram : statementsstatements_group : BEGIN statements END\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | function\n                     | call\n                     | RETURN expression\n                     | emptystatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | comment NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN expression NEWLINE\n                     | empty NEWLINEstatement : errors NEWLINEstatement : errorsdeclaration : type variablescomment : COMMENT anyany : any VARIABLE\n               | VARIABLEtype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF type\n        variables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expressionvariable : VARIABLE L_QBRACKET expression R_QBRACKET\n                    | VARIABLEexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : string VARIABLE\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | MINUS expression\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expressionwhile : DO statements_group UNTIL expressionif : IF expression THEN statements_group\n              | IF expression THEN statements_group ELSE statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group\n                    | FUNCTION OF type VARIABLE BRACKETS statements_groupcommand : vector_command\n                   | robot_command\n                   | converting_commandconverting_command : expression TO type\n                              | expression TO expressionvector_command : VARIABLE PUSH BACK expression\n                          | VARIABLE POP BACK\n                          | VARIABLE PUSH FRONT expression\n                          | VARIABLE POP FRONTrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKET\n                | VARIABLE BRACKETSempty : parameters : parameters COMMA parameter\n                      | parameter\n                      | parameters CONTINUEparameter : expression\n                     | VARIABLE EQ expressionerrors : errors error\n        | error'
    
_lr_action_items = {'RETURN':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[12,12,-14,-26,96,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,12,-23,12,96,96,96,96,]),'COMMENT':([0,2,3,15,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,],[17,17,-14,-26,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,17,-23,17,]),'DO':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[19,19,-14,-26,19,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,19,-23,19,19,19,19,19,]),'IF':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[20,20,-14,-26,20,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,20,-23,20,20,20,20,20,]),'FUNCTION':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[24,24,-14,-26,24,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,24,-23,24,24,24,24,24,]),'VARIABLE':([0,2,3,12,15,16,17,19,20,26,27,28,29,53,54,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,83,84,85,87,96,100,102,106,107,108,110,119,120,121,123,124,126,127,133,134,137,139,147,149,154,155,156,162,],[25,25,-14,68,-26,82,84,25,68,-100,-31,-32,-33,107,107,68,-13,-15,-16,-17,-18,-19,-20,-21,-22,68,68,68,68,68,68,68,-24,-25,-99,121,-30,68,25,68,128,68,139,-50,139,-23,82,82,-29,68,25,25,146,68,68,-34,-49,68,128,25,128,25,25,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,14,15,21,22,23,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,76,77,78,79,80,81,82,83,84,87,88,89,90,91,92,93,94,95,97,101,109,110,111,112,113,114,115,116,117,118,121,122,124,125,126,135,136,137,138,140,141,142,143,144,145,148,151,152,153,154,156,159,161,162,163,],[-93,-93,-14,57,58,59,60,61,62,63,64,76,77,-73,-74,-75,-100,-31,-32,-33,-85,-82,-83,-84,-86,-87,-88,-89,-90,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-13,-15,-16,-17,-18,-19,-20,-21,-22,110,-42,-46,-41,-24,-25,-99,-27,-37,-38,-41,-28,-30,-93,-3,-4,-5,-6,-7,-8,-9,-10,-12,-92,-63,-23,-77,-76,-61,-62,-64,-65,-66,-67,-29,-39,-93,-11,-93,-79,-81,-34,-47,-48,-35,-36,-68,-2,-69,-91,-40,-78,-80,-93,-93,-70,-72,-93,-71,]),'error':([0,2,3,15,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,],[26,26,-14,78,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,26,-23,26,]),'INTEGER':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,69,76,77,78,87,99,105,110,124,126,154,156,162,],[27,27,-14,-26,27,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,27,-24,-25,-99,27,27,27,-23,27,27,27,27,27,]),'STRING':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,69,76,77,78,87,99,105,110,124,126,154,156,162,],[28,28,-14,-26,28,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,28,-24,-25,-99,28,28,28,-23,28,28,28,28,28,]),'BOOL':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,69,76,77,78,87,99,105,110,124,126,154,156,162,],[29,29,-14,-26,29,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,29,-24,-25,-99,29,29,29,-23,29,29,29,29,29,]),'VECTOR':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,69,76,77,78,87,99,105,110,124,126,154,156,162,],[30,30,-14,-26,30,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,30,-24,-25,-99,30,30,30,-23,30,30,30,30,30,]),'LEFT':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[32,32,-14,-26,32,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,32,-23,32,32,32,32,32,]),'RIGHT':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[33,33,-14,-26,33,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,33,-23,33,33,33,33,33,]),'FORWARD':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[34,34,-14,-26,34,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,34,-23,34,34,34,34,34,]),'BACK':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,103,104,110,124,126,154,156,162,],[31,31,-14,-26,31,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,31,133,135,-23,31,31,31,31,31,]),'ROTATE_RIGHT':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[35,35,-14,-26,35,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,35,-23,35,35,35,35,35,]),'ROTATE_LEFT':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[36,36,-14,-26,36,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,36,-23,36,36,36,36,36,]),'LMS':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[37,37,-14,-26,37,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,37,-23,37,37,37,37,37,]),'REFLECT':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[38,38,-14,-26,38,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,38,-23,38,38,38,38,38,]),'DRILL':([0,2,3,15,19,26,56,57,58,59,60,61,62,63,64,76,77,78,87,110,124,126,154,156,162,],[39,39,-14,-26,39,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,39,-23,39,39,39,39,39,]),'TRUE':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[43,43,-14,43,-26,43,43,-100,43,-13,-15,-16,-17,-18,-19,-20,-21,-22,43,43,43,43,43,43,43,-24,-25,-99,43,43,43,43,43,-23,43,43,43,43,43,43,43,43,43,43,43,]),'FALSE':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[44,44,-14,44,-26,44,44,-100,44,-13,-15,-16,-17,-18,-19,-20,-21,-22,44,44,44,44,44,44,44,-24,-25,-99,44,44,44,44,44,-23,44,44,44,44,44,44,44,44,44,44,44,]),'UNDEFINED':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[45,45,-14,45,-26,45,45,-100,45,-13,-15,-16,-17,-18,-19,-20,-21,-22,45,45,45,45,45,45,45,-24,-25,-99,45,45,45,45,45,-23,45,45,45,45,45,45,45,45,45,45,45,]),'DECIMAL':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[46,46,-14,46,-26,46,46,-100,46,-13,-15,-16,-17,-18,-19,-20,-21,-22,46,46,46,46,46,46,46,-24,-25,-99,46,46,46,46,46,-23,46,46,46,46,46,46,46,46,46,46,46,]),'EXIT':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[47,47,-14,47,-26,47,47,-100,47,-13,-15,-16,-17,-18,-19,-20,-21,-22,47,47,47,47,47,47,47,-24,-25,-99,47,47,47,47,47,-23,47,47,47,47,47,47,47,47,47,47,47,]),'WOOD':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[48,48,-14,48,-26,48,48,-100,48,-13,-15,-16,-17,-18,-19,-20,-21,-22,48,48,48,48,48,48,48,-24,-25,-99,48,48,48,48,48,-23,48,48,48,48,48,48,48,48,48,48,48,]),'STEEL':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[49,49,-14,49,-26,49,49,-100,49,-13,-15,-16,-17,-18,-19,-20,-21,-22,49,49,49,49,49,49,49,-24,-25,-99,49,49,49,49,49,-23,49,49,49,49,49,49,49,49,49,49,49,]),'GLASS':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[50,50,-14,50,-26,50,50,-100,50,-13,-15,-16,-17,-18,-19,-20,-21,-22,50,50,50,50,50,50,50,-24,-25,-99,50,50,50,50,50,-23,50,50,50,50,50,50,50,50,50,50,50,]),'CONCRETE':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[51,51,-14,51,-26,51,51,-100,51,-13,-15,-16,-17,-18,-19,-20,-21,-22,51,51,51,51,51,51,51,-24,-25,-99,51,51,51,51,51,-23,51,51,51,51,51,51,51,51,51,51,51,]),'PLASTIC':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,110,123,124,126,133,134,147,149,154,155,156,162,],[52,52,-14,52,-26,52,52,-100,52,-13,-15,-16,-17,-18,-19,-20,-21,-22,52,52,52,52,52,52,52,-24,-25,-99,52,52,52,52,52,-23,52,52,52,52,52,52,52,52,52,52,52,]),'DOUBLE_QUOTE':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,106,107,110,123,124,126,133,134,139,147,149,154,155,156,162,],[53,53,-14,53,-26,53,53,-100,53,-13,-15,-16,-17,-18,-19,-20,-21,-22,53,53,53,53,53,53,53,-24,-25,-99,53,53,53,53,53,138,-50,-23,53,53,53,53,53,-49,53,53,53,53,53,53,]),'QUOTE':([0,2,3,12,15,19,20,26,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,85,87,96,100,102,107,108,110,123,124,126,133,134,139,147,149,154,155,156,162,],[54,54,-14,54,-26,54,54,-100,54,-13,-15,-16,-17,-18,-19,-20,-21,-22,54,54,54,54,54,54,54,-24,-25,-99,54,54,54,54,54,-50,140,-23,54,54,54,54,54,-49,54,54,54,54,54,54,]),'MINUS':([0,2,3,11,12,13,15,18,19,20,25,26,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,87,95,96,98,100,101,102,109,110,111,113,114,115,116,117,118,122,123,124,125,126,128,131,132,133,134,138,140,143,147,148,149,151,152,153,154,155,156,157,162,],[55,55,-14,-46,55,71,-26,-42,55,55,-41,-100,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,55,-13,-15,-16,-17,-18,-19,-20,-21,-22,71,-42,-46,-41,55,55,55,55,55,55,55,-24,-25,-99,55,55,-46,55,71,55,-92,55,71,-23,71,71,71,71,71,71,71,71,55,55,71,55,-41,71,71,55,55,-47,-48,71,55,-91,55,-40,71,71,55,55,55,71,55,]),'$end':([1,2,3,15,26,56,57,58,59,60,61,62,63,64,76,77,78,110,],[0,-1,-14,-26,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,-23,]),'END':([3,15,26,56,57,58,59,60,61,62,63,64,76,77,78,110,124,],[-14,-26,-100,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-99,-23,144,]),'TO':([11,13,18,25,40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,95,101,109,113,114,115,116,117,118,138,140,148,151,],[-46,69,-42,-41,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,-46,-92,-63,-61,-62,-64,-65,-66,-67,-47,-48,-91,-40,]),'PLUS':([11,13,18,25,40,41,42,43,44,45,46,47,48,49,50,51,52,65,66,67,68,95,98,101,109,111,113,114,115,116,117,118,122,125,128,131,132,138,140,143,148,151,152,153,157,],[-46,70,-42,-41,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,70,-42,-46,-41,-46,70,-92,70,70,70,70,70,70,70,70,70,70,-41,70,70,-47,-48,70,-91,-40,70,70,70,]),'LESS':([11,13,18,25,40,41,42,43,44,45,46,47,48,49,50,51,52,65,66,67,68,95,98,101,109,111,113,114,115,116,117,118,122,125,128,131,132,138,140,143,148,151,152,153,157,],[-46,72,-42,-41,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,72,-42,-46,-41,-46,72,-92,72,72,72,72,72,72,72,72,72,72,-41,72,72,-47,-48,72,-91,-40,72,72,72,]),'GREATER':([11,13,18,25,40,41,42,43,44,45,46,47,48,49,50,51,52,65,66,67,68,95,98,101,109,111,113,114,115,116,117,118,122,125,128,131,132,138,140,143,148,151,152,153,157,],[-46,73,-42,-41,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,73,-42,-46,-41,-46,73,-92,73,73,73,73,73,73,73,73,73,73,-41,73,73,-47,-48,73,-91,-40,73,73,73,]),'EQ':([11,13,18,25,40,41,42,43,44,45,46,47,48,49,50,51,52,65,66,67,68,95,98,101,109,111,113,114,115,116,117,118,122,125,128,131,132,138,140,143,148,151,152,153,157,],[-46,74,-42,-41,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,74,-42,-46,-41,-46,74,-92,74,74,74,74,74,74,74,74,74,74,147,74,74,-47,-48,74,-91,-40,74,74,74,]),'NOTEQ':([11,13,18,25,40,41,42,43,44,45,46,47,48,49,50,51,52,65,66,67,68,95,98,101,109,111,113,114,115,116,117,118,122,125,128,131,132,138,140,143,148,151,152,153,157,],[-46,75,-42,-41,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,75,-42,-46,-41,-46,75,-92,75,75,75,75,75,75,75,75,75,75,-41,75,75,-47,-48,75,-91,-40,75,75,75,]),'ASSIGNMENT':([18,25,80,82,151,],[85,-41,85,-41,-40,]),'BEGIN':([19,126,154,156,162,],[87,87,87,87,87,]),'UNTIL':([19,21,22,23,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,79,80,81,82,86,88,89,90,91,92,93,94,95,97,101,109,111,112,113,114,115,116,117,118,122,125,126,135,136,137,138,140,141,142,143,144,145,148,151,152,153,154,156,159,161,162,163,],[-93,-73,-74,-75,-31,-32,-33,-85,-82,-83,-84,-86,-87,-88,-89,-90,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,-27,-37,-38,-41,123,-3,-4,-5,-6,-7,-8,-9,-10,-12,-92,-63,-77,-76,-61,-62,-64,-65,-66,-67,-39,-11,-93,-79,-81,-34,-47,-48,-35,-36,-68,-2,-69,-91,-40,-78,-80,-93,-93,-70,-72,-93,-71,]),'ELSE':([21,22,23,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,79,80,81,82,88,89,90,91,92,93,94,95,97,101,109,111,112,113,114,115,116,117,118,122,125,126,135,136,137,138,140,141,142,143,144,145,148,151,152,153,154,156,159,161,162,163,],[-73,-74,-75,-31,-32,-33,-85,-82,-83,-84,-86,-87,-88,-89,-90,-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,-27,-37,-38,-41,-3,-4,-5,-6,-7,-8,-9,-10,-12,-92,-63,-77,-76,-61,-62,-64,-65,-66,-67,-39,-11,-93,-79,-81,-34,-47,-48,-35,-36,-68,-2,154,-91,-40,-78,-80,-93,-93,-70,-72,-93,-71,]),'OF':([24,30,],[99,105,]),'LBRACKET':([25,68,128,146,],[100,100,100,155,]),'BRACKETS':([25,68,128,146,],[101,101,101,156,]),'L_QBRACKET':([25,68,82,128,],[102,102,102,102,]),'PUSH':([25,],[103,]),'POP':([25,],[104,]),'THEN':([40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,98,101,109,113,114,115,116,117,118,138,140,148,151,],[-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,126,-92,-63,-61,-62,-64,-65,-66,-67,-47,-48,-91,-40,]),'COMMA':([40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,80,81,82,101,109,113,114,115,116,117,118,122,128,129,130,131,138,140,148,150,151,157,158,160,],[-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,119,120,-41,-92,-63,-61,-62,-64,-65,-66,-67,-39,-41,149,-95,-97,-47,-48,-91,-96,-40,-98,-94,149,]),'RBRACKET':([40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,101,109,113,114,115,116,117,118,128,129,130,131,138,140,148,150,151,157,158,160,],[-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,-92,-63,-61,-62,-64,-65,-66,-67,-41,148,-95,-97,-47,-48,-91,-96,-40,-98,-94,162,]),'CONTINUE':([40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,101,109,113,114,115,116,117,118,128,129,130,131,138,140,148,150,151,157,158,160,],[-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,-92,-63,-61,-62,-64,-65,-66,-67,-41,150,-95,-97,-47,-48,-91,-96,-40,-98,-94,150,]),'R_QBRACKET':([40,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,101,109,113,114,115,116,117,118,132,138,140,148,151,],[-43,-44,-45,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-42,-46,-41,-92,-63,-61,-62,-64,-65,-66,-67,151,-47,-48,-91,-40,]),'FRONT':([103,104,],[134,136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,87,],[2,124,]),'statement':([0,2,87,124,],[3,56,3,56,]),'declaration':([0,2,19,87,124,126,154,156,162,],[4,4,89,4,4,89,89,89,89,]),'comment':([0,2,87,124,],[5,5,5,5,]),'assignment':([0,2,16,19,87,119,120,124,126,154,156,162,],[6,6,81,90,6,81,81,6,90,90,90,90,]),'while':([0,2,19,87,124,126,154,156,162,],[7,7,91,7,7,91,91,91,91,]),'if':([0,2,19,87,124,126,154,156,162,],[8,8,92,8,8,92,92,92,92,]),'command':([0,2,19,87,124,126,154,156,162,],[9,9,93,9,9,93,93,93,93,]),'function':([0,2,19,87,124,126,154,156,162,],[10,10,94,10,10,94,94,94,94,]),'call':([0,2,12,19,20,55,69,70,71,72,73,74,75,85,87,96,100,102,123,124,126,133,134,147,149,154,155,156,162,],[11,11,67,95,67,67,67,67,67,67,67,67,67,67,11,67,67,67,67,11,95,67,67,67,67,95,67,95,95,]),'expression':([0,2,12,19,20,55,69,70,71,72,73,74,75,85,87,96,100,102,123,124,126,133,134,147,149,154,155,156,162,],[13,13,65,13,98,109,111,113,114,115,116,117,118,122,13,125,131,132,143,13,13,152,153,157,131,13,131,13,13,]),'empty':([0,2,19,87,124,126,154,156,162,],[14,14,97,14,14,97,97,97,97,]),'errors':([0,2,87,124,],[15,15,15,15,]),'type':([0,2,19,69,87,99,105,124,126,154,156,162,],[16,16,16,112,16,127,137,16,16,16,16,16,]),'variable':([0,2,12,16,19,20,55,69,70,71,72,73,74,75,85,87,96,100,102,119,120,123,124,126,133,134,147,149,154,155,156,162,],[18,18,66,80,18,66,66,66,66,66,66,66,66,66,66,18,66,66,66,80,80,66,18,18,66,66,66,66,18,66,18,18,]),'vector_command':([0,2,19,87,124,126,154,156,162,],[21,21,21,21,21,21,21,21,21,]),'robot_command':([0,2,19,87,124,126,154,156,162,],[22,22,22,22,22,22,22,22,22,]),'converting_command':([0,2,19,87,124,126,154,156,162,],[23,23,23,23,23,23,23,23,23,]),'const':([0,2,12,19,20,55,69,70,71,72,73,74,75,85,87,96,100,102,123,124,126,133,134,147,149,154,155,156,162,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'qstring':([0,2,12,19,20,55,69,70,71,72,73,74,75,85,87,96,100,102,123,124,126,133,134,147,149,154,155,156,162,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'math_expression':([0,2,12,19,20,55,69,70,71,72,73,74,75,85,87,96,100,102,123,124,126,133,134,147,149,154,155,156,162,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'variables':([16,119,120,],[79,141,142,]),'any':([17,],[83,]),'statements_group':([19,126,154,156,162,],[86,145,159,161,163,]),'inner_statement':([19,126,154,156,162,],[88,88,88,88,88,]),'string':([53,54,],[106,108,]),'parameters':([100,155,],[129,160,]),'parameter':([100,149,155,],[130,158,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',29),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',34),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',35),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',43),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',44),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',45),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',46),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',47),
  ('inner_statement -> function','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',49),
  ('inner_statement -> RETURN expression','inner_statement',2,'p_inner_statement','parser.py',50),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',51),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',60),
  ('statements -> statement','statements',1,'p_statements','parser.py',61),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',69),
  ('statement -> comment NEWLINE','statement',2,'p_statement','parser.py',70),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',71),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',72),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',73),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',75),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',76),
  ('statement -> RETURN expression NEWLINE','statement',3,'p_statement','parser.py',77),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',78),
  ('statement -> errors NEWLINE','statement',2,'p_statement_error','parser.py',87),
  ('statement -> errors','statement',1,'p_statement_error_no_nl','parser.py',92),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',97),
  ('comment -> COMMENT any','comment',2,'p_comment','parser.py',102),
  ('any -> any VARIABLE','any',2,'p_any','parser.py',107),
  ('any -> VARIABLE','any',1,'p_any','parser.py',108),
  ('type -> INTEGER','type',1,'p_type','parser.py',116),
  ('type -> STRING','type',1,'p_type','parser.py',117),
  ('type -> BOOL','type',1,'p_type','parser.py',118),
  ('type -> VECTOR OF type','type',3,'p_type','parser.py',119),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',128),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',129),
  ('variables -> variable','variables',1,'p_variables','parser.py',130),
  ('variables -> assignment','variables',1,'p_variables','parser.py',131),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',139),
  ('variable -> VARIABLE L_QBRACKET expression R_QBRACKET','variable',4,'p_variable','parser.py',144),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',145),
  ('expression -> variable','expression',1,'p_expression','parser.py',153),
  ('expression -> const','expression',1,'p_expression','parser.py',154),
  ('expression -> qstring','expression',1,'p_expression','parser.py',155),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',156),
  ('expression -> call','expression',1,'p_expression','parser.py',157),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',162),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',163),
  ('string -> string VARIABLE','string',2,'p_string','parser.py',168),
  ('string -> VARIABLE','string',1,'p_string','parser.py',169),
  ('const -> TRUE','const',1,'p_const','parser.py',177),
  ('const -> FALSE','const',1,'p_const','parser.py',178),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',179),
  ('const -> DECIMAL','const',1,'p_const','parser.py',180),
  ('const -> EXIT','const',1,'p_const','parser.py',181),
  ('const -> WOOD','const',1,'p_const','parser.py',182),
  ('const -> STEEL','const',1,'p_const','parser.py',183),
  ('const -> GLASS','const',1,'p_const','parser.py',184),
  ('const -> CONCRETE','const',1,'p_const','parser.py',185),
  ('const -> PLASTIC','const',1,'p_const','parser.py',186),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',191),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',192),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',193),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',194),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',195),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',196),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',197),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',205),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',210),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if','parser.py',211),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',219),
  ('function -> FUNCTION OF type VARIABLE BRACKETS statements_group','function',6,'p_function','parser.py',220),
  ('command -> vector_command','command',1,'p_command','parser.py',229),
  ('command -> robot_command','command',1,'p_command','parser.py',230),
  ('command -> converting_command','command',1,'p_command','parser.py',231),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',236),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',237),
  ('vector_command -> VARIABLE PUSH BACK expression','vector_command',4,'p_vector_command','parser.py',242),
  ('vector_command -> VARIABLE POP BACK','vector_command',3,'p_vector_command','parser.py',243),
  ('vector_command -> VARIABLE PUSH FRONT expression','vector_command',4,'p_vector_command','parser.py',244),
  ('vector_command -> VARIABLE POP FRONT','vector_command',3,'p_vector_command','parser.py',245),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',253),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',254),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',255),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',256),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',257),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',258),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',259),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',260),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',261),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',266),
  ('call -> VARIABLE BRACKETS','call',2,'p_call','parser.py',267),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',275),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',280),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',281),
  ('parameters -> parameters CONTINUE','parameters',2,'p_parameters','parser.py',282),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',292),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',293),
  ('errors -> errors error','errors',2,'p_errors','parser.py',301),
  ('errors -> error','errors',1,'p_errors','parser.py',302),
]
