
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BACK BEGIN BOOL BRACKETS COMMA COMMENT CONCRETE CONTINUE DECIMAL DO DOUBLE_QUOTE DRILL ELSE END EQ EXIT FALSE FORWARD FRONT FUNCTION GLASS GREATER IF INTEGER LBRACKET LEFT LESS LMS L_QBRACKET MINUS NEWLINE NOTEQ OF PLASTIC PLUS POP PUSH QUOTE RBRACKET REFLECT RETURN RIGHT ROTATE_LEFT ROTATE_RIGHT R_QBRACKET STEEL STRING THEN TO TRUE UNDEFINED UNTIL VARIABLE VECTOR WOODprogram : statementsstatements_group : BEGIN statements END\n                            | inner_statementinner_statement : declaration\n                     | assignment\n                     | while\n                     | if\n                     | command\n                     | function\n                     | call\n                     | RETURN expression\n                     | emptystatements : statements statement\n                      | statementstatement : declaration NEWLINE\n                     | comment NEWLINE\n                     | assignment NEWLINE\n                     | while NEWLINE\n                     | if NEWLINE\n                     | command NEWLINE\n                     | function NEWLINE\n                     | call NEWLINE\n                     | RETURN expression NEWLINE\n                     | empty NEWLINEstatement : errors NEWLINEstatement : errorsdeclaration : type variablescomment : COMMENT anyany : any VARIABLE\n               | VARIABLEtype : INTEGER\n                | STRING\n                | BOOL\n                | VECTOR OF type\n        type : errorsvariables : variable COMMA variables\n                | assignment COMMA variables\n                | variable\n                | assignmentassignment : variable ASSIGNMENT expressionvariable : VARIABLE indexing\n                    | VARIABLEindexing : L_QBRACKET expression R_QBRACKET indexing\n                    | L_QBRACKET expression R_QBRACKETexpression : variable\n                      | const\n                      | qstring\n                      | math_expression\n                      | robot_command\n                      | converting_command\n                      | vector_pop\n                      | callqstring : DOUBLE_QUOTE string DOUBLE_QUOTE\n                   | QUOTE string QUOTEstring : VARIABLE string\n                   | DECIMAL string\n                   | FALSE string\n                   | TRUE string\n                   | FALSE\n                   | TRUE\n                   | DECIMAL\n                   | VARIABLEconst : TRUE\n                 | FALSE\n                 | UNDEFINED\n                 | DECIMAL\n                 | EXIT\n                 | WOOD\n                 | STEEL\n                 | GLASS\n                 | CONCRETE\n                 | PLASTICmath_expression : expression PLUS expression\n                           | expression MINUS expression\n                           | MINUS expression\n                           | expression LESS expression\n                           | expression GREATER expression\n                           | expression EQ expression\n                           | expression NOTEQ expressionwhile : DO statements_group UNTIL expressionif : IF expression THEN statements_group\n              | IF expression THEN statements_group ELSE statements_groupfunction : FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group\n                    | FUNCTION OF type VARIABLE BRACKETS statements_groupcommand : vector_command\n                   | robot_commandconverting_command : expression TO type\n                              | expression TO expression\n                              | expression TO vector_ofvector_of : VECTOR OF vector_of\n                    | VECTORvector_command : variable PUSH BACK expression\n                          | variable PUSH FRONT expressionvector_pop : variable POP BACK\n                      | variable POP FRONTrobot_command : LEFT\n                    | RIGHT\n                    | FORWARD\n                    | BACK\n                    | ROTATE_RIGHT\n                    | ROTATE_LEFT\n                    | LMS\n                    | REFLECT\n                    | DRILLcall : VARIABLE LBRACKET parameters RBRACKET\n                | VARIABLE BRACKETSempty : parameters : parameters COMMA parameter\n                      | parameter\n                      | CONTINUEparameter : expression\n                     | VARIABLE EQ expressionerrors : errors error\n                    | error'
    
_lr_action_items = {'RETURN':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,101,124,126,166,168,176,],[12,12,-14,-26,91,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,12,-23,12,91,91,91,91,]),'COMMENT':([0,2,3,14,24,38,39,40,41,42,43,44,45,46,70,71,72,82,101,124,],[16,16,-14,-26,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,16,-23,16,]),'DO':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,101,124,126,166,168,176,],[18,18,-14,-26,18,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,18,-23,18,18,18,18,18,]),'IF':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,101,124,126,166,168,176,],[19,19,-14,-26,19,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,19,-23,19,19,19,19,19,]),'FUNCTION':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,101,124,126,166,168,176,],[22,22,-14,-26,22,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,22,-23,22,22,22,22,22,]),'VARIABLE':([0,2,3,12,14,15,16,18,19,24,25,26,27,38,39,40,41,42,43,44,45,46,67,68,69,70,71,72,77,78,79,82,91,93,96,99,101,102,103,104,105,106,107,108,111,112,113,114,117,118,119,121,122,123,124,126,127,134,161,163,166,167,168,176,],[23,23,-14,56,-26,76,78,23,56,-114,-31,-32,-33,-13,-15,-16,-17,-18,-19,-20,-21,-22,111,111,56,-24,-25,-113,119,-30,56,23,56,-35,128,56,-23,56,56,56,56,56,56,56,111,111,111,111,76,76,-29,56,56,56,23,23,160,-34,56,128,23,128,23,23,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,13,14,20,21,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,82,83,84,85,86,87,88,89,90,92,93,97,98,101,116,119,120,124,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,153,154,155,156,157,158,159,162,164,166,168,171,172,173,175,176,177,],[-107,-107,-14,39,40,41,42,43,44,45,46,70,71,-85,-86,-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,-13,-15,-16,-17,-18,-19,-20,-21,-22,101,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-24,-25,-113,-27,-38,-39,-42,-28,-30,-107,-3,-4,-5,-6,-7,-8,-9,-10,-12,-35,-106,-41,-23,-75,-29,-40,-107,-11,-107,-34,-73,-74,-76,-77,-78,-79,-88,-87,-89,-91,-94,-95,-53,-54,-36,-37,-92,-93,-80,-2,-81,-105,-44,-107,-107,-43,-90,-82,-84,-107,-83,]),'error':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,93,95,100,101,108,124,126,165,166,168,176,],[24,24,-14,72,24,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,24,72,24,24,-23,24,24,24,24,24,24,24,]),'INTEGER':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,95,100,101,108,124,126,165,166,168,176,],[25,25,-14,-26,25,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,25,25,25,-23,25,25,25,25,25,25,25,]),'STRING':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,95,100,101,108,124,126,165,166,168,176,],[26,26,-14,-26,26,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,26,26,26,-23,26,26,26,26,26,26,26,]),'BOOL':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,95,100,101,108,124,126,165,166,168,176,],[27,27,-14,-26,27,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,27,27,27,-23,27,27,27,27,27,27,27,]),'VECTOR':([0,2,3,14,18,24,38,39,40,41,42,43,44,45,46,70,71,72,82,95,100,101,108,124,126,165,166,168,176,],[28,28,-14,-26,28,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,28,28,28,-23,144,28,28,144,28,28,28,]),'LEFT':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[30,30,-14,30,-26,30,30,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,30,-24,-25,-113,30,30,30,30,30,-23,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'RIGHT':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[31,31,-14,31,-26,31,31,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,31,-24,-25,-113,31,31,31,31,31,-23,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FORWARD':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[32,32,-14,32,-26,32,32,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,32,-24,-25,-113,32,32,32,32,32,-23,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'BACK':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,80,82,91,96,99,101,102,103,104,105,106,107,108,109,121,122,123,124,126,161,163,166,167,168,176,],[29,29,-14,29,-26,29,29,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,29,-24,-25,-113,29,121,29,29,29,29,-23,29,29,29,29,29,29,29,145,29,29,29,29,29,29,29,29,29,29,29,]),'ROTATE_RIGHT':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[33,33,-14,33,-26,33,33,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,33,-24,-25,-113,33,33,33,33,33,-23,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'ROTATE_LEFT':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[34,34,-14,34,-26,34,34,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,34,-24,-25,-113,34,34,34,34,34,-23,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'LMS':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[35,35,-14,35,-26,35,35,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,35,-24,-25,-113,35,35,35,35,35,-23,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'REFLECT':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[36,36,-14,36,-26,36,36,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,36,-24,-25,-113,36,36,36,36,36,-23,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'DRILL':([0,2,3,12,14,18,19,24,38,39,40,41,42,43,44,45,46,69,70,71,72,79,82,91,96,99,101,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[37,37,-14,37,-26,37,37,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,37,-24,-25,-113,37,37,37,37,37,-23,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'$end':([1,2,3,14,24,38,39,40,41,42,43,44,45,46,70,71,72,101,],[0,-1,-14,-26,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,-23,]),'END':([3,14,24,38,39,40,41,42,43,44,45,46,70,71,72,101,124,],[-14,-26,-114,-13,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-113,-23,158,]),'TRUE':([12,19,67,68,69,79,91,96,99,102,103,104,105,106,107,108,111,112,113,114,121,122,123,161,163,167,],[57,57,114,114,57,57,57,57,57,57,57,57,57,57,57,57,114,114,114,114,57,57,57,57,57,57,]),'FALSE':([12,19,67,68,69,79,91,96,99,102,103,104,105,106,107,108,111,112,113,114,121,122,123,161,163,167,],[58,58,113,113,58,58,58,58,58,58,58,58,58,58,58,58,113,113,113,113,58,58,58,58,58,58,]),'UNDEFINED':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'DECIMAL':([12,19,67,68,69,79,91,96,99,102,103,104,105,106,107,108,111,112,113,114,121,122,123,161,163,167,],[60,60,112,112,60,60,60,60,60,60,60,60,60,60,60,60,112,112,112,112,60,60,60,60,60,60,]),'EXIT':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'WOOD':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'STEEL':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'GLASS':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'CONCRETE':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'PLASTIC':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'DOUBLE_QUOTE':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,110,111,112,113,114,121,122,123,148,149,150,151,161,163,167,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,147,-62,-61,-59,-60,67,67,67,-55,-56,-57,-58,67,67,67,]),'QUOTE':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,111,112,113,114,115,121,122,123,148,149,150,151,161,163,167,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,-62,-61,-59,-60,152,68,68,68,-55,-56,-57,-58,68,68,68,]),'MINUS':([12,19,24,25,26,27,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,72,79,91,93,94,96,97,98,99,102,103,104,105,106,107,108,116,120,121,122,123,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,156,157,161,162,163,164,167,169,171,172,],[69,69,-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,103,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,69,-113,69,69,-35,103,69,-106,-41,69,69,69,69,69,69,69,69,103,103,69,69,69,103,-42,103,103,-34,103,103,103,103,103,103,103,-87,-89,-91,-94,-95,-53,-54,103,103,103,69,-105,69,-44,69,103,-43,-90,]),'ASSIGNMENT':([17,23,74,76,98,164,171,],[79,-42,79,-42,-41,-44,-43,]),'PUSH':([17,23,98,164,171,],[80,-42,-41,-44,-43,]),'BEGIN':([18,126,166,168,176,],[82,82,82,82,82,]),'UNTIL':([18,20,21,24,25,26,27,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,74,75,76,81,83,84,85,86,87,88,89,90,92,93,97,98,116,120,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,153,154,155,156,157,158,159,162,164,166,168,171,172,173,175,176,177,],[-107,-85,-86,-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-27,-38,-39,-42,123,-3,-4,-5,-6,-7,-8,-9,-10,-12,-35,-106,-41,-75,-40,-11,-107,-34,-73,-74,-76,-77,-78,-79,-88,-87,-89,-91,-94,-95,-53,-54,-36,-37,-92,-93,-80,-2,-81,-105,-44,-107,-107,-43,-90,-82,-84,-107,-83,]),'ELSE':([20,21,24,25,26,27,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,74,75,76,83,84,85,86,87,88,89,90,92,93,97,98,116,120,125,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,153,154,155,156,157,158,159,162,164,166,168,171,172,173,175,176,177,],[-85,-86,-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-27,-38,-39,-42,-3,-4,-5,-6,-7,-8,-9,-10,-12,-35,-106,-41,-75,-40,-11,-107,-34,-73,-74,-76,-77,-78,-79,-88,-87,-89,-91,-94,-95,-53,-54,-36,-37,-92,-93,-80,-2,166,-105,-44,-107,-107,-43,-90,-82,-84,-107,-83,]),'OF':([22,28,144,],[95,100,165,]),'LBRACKET':([23,56,128,160,],[96,96,96,167,]),'BRACKETS':([23,56,128,160,],[97,97,97,168,]),'L_QBRACKET':([23,56,76,128,164,],[99,99,99,99,99,]),'PLUS':([24,25,26,27,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,94,97,98,116,120,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,156,157,162,164,169,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,102,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,102,-106,-41,102,102,102,-42,102,102,-34,102,102,102,102,102,102,102,-87,-89,-91,-94,-95,-53,-54,102,102,102,-105,-44,102,-43,-90,]),'LESS':([24,25,26,27,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,94,97,98,116,120,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,156,157,162,164,169,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,104,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,104,-106,-41,104,104,104,-42,104,104,-34,104,104,104,104,104,104,104,-87,-89,-91,-94,-95,-53,-54,104,104,104,-105,-44,104,-43,-90,]),'GREATER':([24,25,26,27,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,94,97,98,116,120,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,156,157,162,164,169,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,105,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,105,-106,-41,105,105,105,-42,105,105,-34,105,105,105,105,105,105,105,-87,-89,-91,-94,-95,-53,-54,105,105,105,-105,-44,105,-43,-90,]),'EQ':([24,25,26,27,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,94,97,98,116,120,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,156,157,162,164,169,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,106,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,106,-106,-41,106,106,106,161,106,106,-34,106,106,106,106,106,106,106,-87,-89,-91,-94,-95,-53,-54,106,106,106,-105,-44,106,-43,-90,]),'NOTEQ':([24,25,26,27,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,94,97,98,116,120,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,156,157,162,164,169,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,107,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,107,-106,-41,107,107,107,-42,107,107,-34,107,107,107,107,107,107,107,-87,-89,-91,-94,-95,-53,-54,107,107,107,-105,-44,107,-43,-90,]),'TO':([24,25,26,27,29,30,31,32,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,94,97,98,116,120,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,155,156,157,162,164,169,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,108,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,108,-106,-41,108,108,108,-42,108,108,-34,108,108,108,108,108,108,108,-87,-89,-91,-94,-95,-53,-54,108,108,108,-105,-44,108,-43,-90,]),'THEN':([24,25,26,27,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,94,97,98,116,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,162,164,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,126,-106,-41,-75,-34,-73,-74,-76,-77,-78,-79,-88,-87,-89,-91,-94,-95,-53,-54,-105,-44,-43,-90,]),'COMMA':([24,25,26,27,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,76,93,97,98,116,120,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,162,164,169,170,171,172,174,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,117,118,-42,-35,-106,-41,-75,-40,-42,163,-109,-110,-111,-34,-73,-74,-76,-77,-78,-79,-88,-87,-89,-91,-94,-95,-53,-54,-105,-44,-112,-108,-43,-90,163,]),'RBRACKET':([24,25,26,27,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,97,98,116,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,162,164,169,170,171,172,174,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,-106,-41,-75,-42,162,-109,-110,-111,-34,-73,-74,-76,-77,-78,-79,-88,-87,-89,-91,-94,-95,-53,-54,-105,-44,-112,-108,-43,-90,176,]),'R_QBRACKET':([24,25,26,27,29,30,31,32,33,34,35,36,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,93,97,98,116,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,162,164,171,172,],[-114,-31,-32,-33,-99,-96,-97,-98,-100,-101,-102,-103,-104,-45,-46,-47,-48,-49,-50,-51,-52,-42,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-113,-35,-106,-41,-75,164,-34,-73,-74,-76,-77,-78,-79,-88,-87,-89,-91,-94,-95,-53,-54,-105,-44,-43,-90,]),'POP':([48,56,98,128,164,171,],[109,-42,-41,-42,-44,-43,]),'FRONT':([80,109,],[122,146,]),'CONTINUE':([96,167,],[131,131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,82,],[2,124,]),'statement':([0,2,82,124,],[3,38,3,38,]),'declaration':([0,2,18,82,124,126,166,168,176,],[4,4,84,4,4,84,84,84,84,]),'comment':([0,2,82,124,],[5,5,5,5,]),'assignment':([0,2,15,18,82,117,118,124,126,166,168,176,],[6,6,75,85,6,75,75,6,85,85,85,85,]),'while':([0,2,18,82,124,126,166,168,176,],[7,7,86,7,7,86,86,86,86,]),'if':([0,2,18,82,124,126,166,168,176,],[8,8,87,8,8,87,87,87,87,]),'command':([0,2,18,82,124,126,166,168,176,],[9,9,88,9,9,88,88,88,88,]),'function':([0,2,18,82,124,126,166,168,176,],[10,10,89,10,10,89,89,89,89,]),'call':([0,2,12,18,19,69,79,82,91,96,99,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[11,11,55,90,55,55,55,11,55,55,55,55,55,55,55,55,55,55,55,55,55,11,90,55,55,90,55,90,90,]),'empty':([0,2,18,82,124,126,166,168,176,],[13,13,92,13,13,92,92,92,92,]),'errors':([0,2,18,82,95,100,108,124,126,165,166,168,176,],[14,14,93,14,93,93,93,14,93,93,93,93,93,]),'type':([0,2,18,82,95,100,108,124,126,165,166,168,176,],[15,15,15,15,127,134,142,15,15,134,15,15,15,]),'variable':([0,2,12,15,18,19,69,79,82,91,96,99,102,103,104,105,106,107,108,117,118,121,122,123,124,126,161,163,166,167,168,176,],[17,17,48,74,17,48,48,48,17,48,48,48,48,48,48,48,48,48,48,74,74,48,48,48,17,17,48,48,17,48,17,17,]),'vector_command':([0,2,18,82,124,126,166,168,176,],[20,20,20,20,20,20,20,20,20,]),'robot_command':([0,2,12,18,19,69,79,82,91,96,99,102,103,104,105,106,107,108,121,122,123,124,126,161,163,166,167,168,176,],[21,21,52,21,52,52,52,21,52,52,52,52,52,52,52,52,52,52,52,52,52,21,21,52,52,21,52,21,21,]),'expression':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[47,94,116,120,125,132,133,135,136,137,138,139,140,141,155,156,157,169,132,132,]),'const':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'qstring':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'math_expression':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'converting_command':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'vector_pop':([12,19,69,79,91,96,99,102,103,104,105,106,107,108,121,122,123,161,163,167,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'variables':([15,117,118,],[73,153,154,]),'any':([16,],[77,]),'statements_group':([18,126,166,168,176,],[81,159,173,175,177,]),'inner_statement':([18,126,166,168,176,],[83,83,83,83,83,]),'indexing':([23,56,76,128,164,],[98,98,98,98,171,]),'string':([67,68,111,112,113,114,],[110,115,148,149,150,151,]),'parameters':([96,167,],[129,174,]),'parameter':([96,163,167,],[130,170,130,]),'vector_of':([108,165,],[143,172,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',28),
  ('statements_group -> BEGIN statements END','statements_group',3,'p_statements_group','parser.py',33),
  ('statements_group -> inner_statement','statements_group',1,'p_statements_group','parser.py',34),
  ('inner_statement -> declaration','inner_statement',1,'p_inner_statement','parser.py',42),
  ('inner_statement -> assignment','inner_statement',1,'p_inner_statement','parser.py',43),
  ('inner_statement -> while','inner_statement',1,'p_inner_statement','parser.py',44),
  ('inner_statement -> if','inner_statement',1,'p_inner_statement','parser.py',45),
  ('inner_statement -> command','inner_statement',1,'p_inner_statement','parser.py',46),
  ('inner_statement -> function','inner_statement',1,'p_inner_statement','parser.py',47),
  ('inner_statement -> call','inner_statement',1,'p_inner_statement','parser.py',48),
  ('inner_statement -> RETURN expression','inner_statement',2,'p_inner_statement','parser.py',49),
  ('inner_statement -> empty','inner_statement',1,'p_inner_statement','parser.py',50),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',59),
  ('statements -> statement','statements',1,'p_statements','parser.py',60),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',68),
  ('statement -> comment NEWLINE','statement',2,'p_statement','parser.py',69),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',70),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',71),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',72),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',73),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',74),
  ('statement -> call NEWLINE','statement',2,'p_statement','parser.py',75),
  ('statement -> RETURN expression NEWLINE','statement',3,'p_statement','parser.py',76),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',77),
  ('statement -> errors NEWLINE','statement',2,'p_statement_error','parser.py',86),
  ('statement -> errors','statement',1,'p_statement_error_no_nl','parser.py',91),
  ('declaration -> type variables','declaration',2,'p_declaration','parser.py',96),
  ('comment -> COMMENT any','comment',2,'p_comment','parser.py',101),
  ('any -> any VARIABLE','any',2,'p_any','parser.py',106),
  ('any -> VARIABLE','any',1,'p_any','parser.py',107),
  ('type -> INTEGER','type',1,'p_type','parser.py',115),
  ('type -> STRING','type',1,'p_type','parser.py',116),
  ('type -> BOOL','type',1,'p_type','parser.py',117),
  ('type -> VECTOR OF type','type',3,'p_type','parser.py',118),
  ('type -> errors','type',1,'p_type_error','parser.py',128),
  ('variables -> variable COMMA variables','variables',3,'p_variables','parser.py',134),
  ('variables -> assignment COMMA variables','variables',3,'p_variables','parser.py',135),
  ('variables -> variable','variables',1,'p_variables','parser.py',136),
  ('variables -> assignment','variables',1,'p_variables','parser.py',137),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',145),
  ('variable -> VARIABLE indexing','variable',2,'p_variable','parser.py',150),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',151),
  ('indexing -> L_QBRACKET expression R_QBRACKET indexing','indexing',4,'p_indexing','parser.py',159),
  ('indexing -> L_QBRACKET expression R_QBRACKET','indexing',3,'p_indexing','parser.py',160),
  ('expression -> variable','expression',1,'p_expression','parser.py',168),
  ('expression -> const','expression',1,'p_expression','parser.py',169),
  ('expression -> qstring','expression',1,'p_expression','parser.py',170),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',171),
  ('expression -> robot_command','expression',1,'p_expression','parser.py',172),
  ('expression -> converting_command','expression',1,'p_expression','parser.py',173),
  ('expression -> vector_pop','expression',1,'p_expression','parser.py',174),
  ('expression -> call','expression',1,'p_expression','parser.py',175),
  ('qstring -> DOUBLE_QUOTE string DOUBLE_QUOTE','qstring',3,'p_qstring','parser.py',180),
  ('qstring -> QUOTE string QUOTE','qstring',3,'p_qstring','parser.py',181),
  ('string -> VARIABLE string','string',2,'p_string','parser.py',186),
  ('string -> DECIMAL string','string',2,'p_string','parser.py',187),
  ('string -> FALSE string','string',2,'p_string','parser.py',188),
  ('string -> TRUE string','string',2,'p_string','parser.py',189),
  ('string -> FALSE','string',1,'p_string','parser.py',190),
  ('string -> TRUE','string',1,'p_string','parser.py',191),
  ('string -> DECIMAL','string',1,'p_string','parser.py',192),
  ('string -> VARIABLE','string',1,'p_string','parser.py',193),
  ('const -> TRUE','const',1,'p_const','parser.py',204),
  ('const -> FALSE','const',1,'p_const','parser.py',205),
  ('const -> UNDEFINED','const',1,'p_const','parser.py',206),
  ('const -> DECIMAL','const',1,'p_const','parser.py',207),
  ('const -> EXIT','const',1,'p_const','parser.py',208),
  ('const -> WOOD','const',1,'p_const','parser.py',209),
  ('const -> STEEL','const',1,'p_const','parser.py',210),
  ('const -> GLASS','const',1,'p_const','parser.py',211),
  ('const -> CONCRETE','const',1,'p_const','parser.py',212),
  ('const -> PLASTIC','const',1,'p_const','parser.py',213),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',218),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',219),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',220),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',221),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',222),
  ('math_expression -> expression EQ expression','math_expression',3,'p_math_expression','parser.py',223),
  ('math_expression -> expression NOTEQ expression','math_expression',3,'p_math_expression','parser.py',224),
  ('while -> DO statements_group UNTIL expression','while',4,'p_while','parser.py',232),
  ('if -> IF expression THEN statements_group','if',4,'p_if','parser.py',237),
  ('if -> IF expression THEN statements_group ELSE statements_group','if',6,'p_if','parser.py',238),
  ('function -> FUNCTION OF type VARIABLE LBRACKET parameters RBRACKET statements_group','function',8,'p_function','parser.py',246),
  ('function -> FUNCTION OF type VARIABLE BRACKETS statements_group','function',6,'p_function','parser.py',247),
  ('command -> vector_command','command',1,'p_command','parser.py',256),
  ('command -> robot_command','command',1,'p_command','parser.py',257),
  ('converting_command -> expression TO type','converting_command',3,'p_converting_command','parser.py',262),
  ('converting_command -> expression TO expression','converting_command',3,'p_converting_command','parser.py',263),
  ('converting_command -> expression TO vector_of','converting_command',3,'p_converting_command','parser.py',264),
  ('vector_of -> VECTOR OF vector_of','vector_of',3,'p_vector_of','parser.py',269),
  ('vector_of -> VECTOR','vector_of',1,'p_vector_of','parser.py',270),
  ('vector_command -> variable PUSH BACK expression','vector_command',4,'p_vector_command','parser.py',278),
  ('vector_command -> variable PUSH FRONT expression','vector_command',4,'p_vector_command','parser.py',279),
  ('vector_pop -> variable POP BACK','vector_pop',3,'p_vector_command_pop','parser.py',284),
  ('vector_pop -> variable POP FRONT','vector_pop',3,'p_vector_command_pop','parser.py',285),
  ('robot_command -> LEFT','robot_command',1,'p_robot_command','parser.py',290),
  ('robot_command -> RIGHT','robot_command',1,'p_robot_command','parser.py',291),
  ('robot_command -> FORWARD','robot_command',1,'p_robot_command','parser.py',292),
  ('robot_command -> BACK','robot_command',1,'p_robot_command','parser.py',293),
  ('robot_command -> ROTATE_RIGHT','robot_command',1,'p_robot_command','parser.py',294),
  ('robot_command -> ROTATE_LEFT','robot_command',1,'p_robot_command','parser.py',295),
  ('robot_command -> LMS','robot_command',1,'p_robot_command','parser.py',296),
  ('robot_command -> REFLECT','robot_command',1,'p_robot_command','parser.py',297),
  ('robot_command -> DRILL','robot_command',1,'p_robot_command','parser.py',298),
  ('call -> VARIABLE LBRACKET parameters RBRACKET','call',4,'p_call','parser.py',303),
  ('call -> VARIABLE BRACKETS','call',2,'p_call','parser.py',304),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',312),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',317),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',318),
  ('parameters -> CONTINUE','parameters',1,'p_parameters','parser.py',319),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',327),
  ('parameter -> VARIABLE EQ expression','parameter',3,'p_parameter','parser.py',328),
  ('errors -> errors error','errors',2,'p_errors','parser.py',336),
  ('errors -> error','errors',1,'p_errors','parser.py',337),
]
