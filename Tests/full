function of integer application() begin
    return findPath()
end
function of integer findPath() begin
    vector of vector of boolean vm
    vector of boolean xy
    integer x := 0, y := 0, steps
    xy push back true
    vm push back xy
    integer size_x := 0
    integer size_y := 0
    vector of integer stack_x, stack_y
    stack_x push back x
    stack_y push back y
    integer turn := 0
    integer numOfTurns := 0
    boolean willTurn := true
    boolean exit := false
    integer free, i
    do begin
        if reflect = "EXIT" then exit := true else begin
            if lms <> 0 then begin numOfTurns := 0
                willTurn := false
                i := lms
                free := lms
                if turn = 0 then free := size_x - 1 - x else if turn = 1 then free := size_y - 1 - y else if turn = 2 then free := x else if turn = 3 then free := y
                if free < i then i := free
            end
            do begin
                forward
                if vm[x][y] = false then begin
                    if turn = 0 then x := x + 1 else if turn = 1 then y := y + 1 else if turn = 2 then x := x - 1 else if turn = 3 then y := y - 1
                    stack_x push front x
                    stack_y push front y
                    i := i - 1
                end else begin
                    i:= 0
                    willTurn := true
                end
            end until i <> 0
            if lms then begin if willTurn <> 1 then begin
                if turn = 0 then begin
                    if x + lms < size_x - 1 then begin
                        steps := x + lms - size_x + 1
                        size_x := size_x + steps
                        do begin
                           i := size_y
                           do begin
                               if steps = y then vm[steps] push back True else vm[steps] push back False
                               i := i - 1
                           end until i <> 0
                           steps := steps - 1
                        end until steps <> 0
                    end
                end else if turn = 1 then begin
                    if y - lms < 0 then begin
                        steps := lms - y
                        size_y := size_y + steps
                        do begin
                            integer i := size_x
                            do begin
                                if steps = x then vm push back True else vm push back False
                                i := i - 1
                                end until i <> 0
                            steps := steps - 1
                            end until steps <> 0
                        steps := lms - y
                        y:= y + steps
                        integer i := 0
                        do begin
                            stack_y [ i ] := stack_y [ i ] + steps
                            i := i + 1
                            end until i <> stack_y_size
                    end
                end else if turn = 2 then begin
                    if x - lms < 0 then begin
                        steps := lms - x
                        size_x := size_x + steps
                        do begin
                            integer i := size_y
                            do begin
                                if steps = y then vm[steps] push front True else vm[steps] push front False
                                i := i - 1
                                end until i <> 0
                            steps := steps - 1
                            end until steps <> 0
                        steps := lms - x
                        x:= x + steps
                        i := 0
                        do begin
                            stack_x [ i ] := stack_x [ i ] + steps
                            i := i + 1
                            end until i <> stack_x_size
                    end
                end else if turn = 3 then begin
                    if y + lms < size_y - 1 then begin
                        steps := y + lms - size_y + 1
                        size_y := size_y + steps
                        do begin
                            i := size_x
                            do begin
                                if steps = x then vm push front True else vm push front False
                                i := i - 1
                            end until i <> 0
                            steps := steps - 1
                        end until steps <> 0
                    end
                end
                i := lms
                do begin forward
                    if turn = 0 then x := x + 1 else if turn = 1 then y := y + 1 else if turn = 2 then x := x - 1 else if turn = 3 then y := y - 1
                    stack_x push front x
                    stack_y push front y
                    i := i - 1
                end until i <> 0
            end
            end
        end
        if willTurn then begin
            right
            turn := turn + 1
            numOfTurns := numOfTurns + 1
        end
        if numOfTurns = 4 then begin
            numOfTurns := 0
            x := stack_x pop front
            y := stack_y pop front
        end
    end until exit <> true
    return 0
end
